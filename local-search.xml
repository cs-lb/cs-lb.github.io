<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mac电脑</title>
    <link href="/2024/10/09/mac%E7%94%B5%E8%84%91/"/>
    <url>/2024/10/09/mac%E7%94%B5%E8%84%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>保研经验贴</title>
    <link href="/2024/10/01/%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%E8%B4%B4/"/>
    <url>/2024/10/01/%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%E8%B4%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="2024年（2025届）四非非rk1保研上岸中科大经验贴"><a href="#2024年（2025届）四非非rk1保研上岸中科大经验贴" class="headerlink" title="2024年（2025届）四非非rk1保研上岸中科大经验贴"></a>2024年（2025届）四非非rk1保研上岸中科大经验贴</h1><p><strong>现在是10.1国庆节，祝大家国庆节快乐，准备写个经验贴为自己曲折的保研之路划下一个圆满句号，也希望我下文的经验贴能帮助到大家。</strong></p><h2 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h2><ul><li>学校 ： 辽宁省四非</li><li>专业 ： 计算机科学与技术</li><li>排名 ： 2&#x2F;90</li><li>竞赛 ： 计设、蓝桥杯国三 + 某干省奖</li><li>科研 ： CCF-C 一作</li><li>offer ：计算所、浙大、中科大、成电、厦大、华师、中南、北邮、上科、东师</li><li>最终去向 ：<strong>中国科学技术大学</strong></li></ul><h2 id="夏令营记录"><a href="#夏令营记录" class="headerlink" title="夏令营记录"></a>夏令营记录</h2><p><strong>夏令营的门槛很高，对我而言主要是想刷面试经历，因此采用了海投策略，从清北到四非都有投递，接下来将按照时间线来对夏令营进行梳理</strong></p><table><thead><tr><th>学校</th><th>入营情况</th><th>参营情况</th><th>优营情况</th><th>备注</th></tr></thead><tbody><tr><td>清华大学生医工</td><td>&#10004;</td><td>&#10004;</td><td></td><td>线上宣讲营无考核，不评选优营，提供一个跟老师沟通的平台</td></tr><tr><td>同济大学卓工</td><td>&#10004;</td><td>&#10004;</td><td>&#10006;</td><td>参加的第一营，但表现不佳很遗憾没拿到优营</td></tr><tr><td>中国科学技术大学先研院</td><td>&#10004;</td><td>&#10004;</td><td>&#10004;</td><td>豪华的开营仪式、五星级酒店，体验感最好的一个营！！！也是最终去向</td></tr><tr><td>复旦大学工研院</td><td>&#10006;</td><td></td><td></td><td>联系了老师但是是强com、门槛比较高没进</td></tr><tr><td>南京大学软件学院</td><td>&#10006;</td><td></td><td></td><td>联系了老师但是推荐没有用是强com、据了解四非可以靠区域金直通</td></tr><tr><td>浙江大学软件学院</td><td>&#10004;</td><td>&#10004;</td><td>&#10006;</td><td>浙软是线上营，我参加的是 AI 营，项目没做好就没有优营</td></tr><tr><td>上海科技大学</td><td>&#10004;</td><td>&#10004;</td><td>&#10004;</td><td>参加的专硕项目，宣讲+考核，优营率应该挺高（豪华酒店、茶歇好吃）</td></tr><tr><td>电子科技大学信软学院</td><td>&#10004;</td><td>&#10004;</td><td>&#10006;</td><td>线上宣讲营无考核，但是根据跟老师的沟通情况发了部分优营，忙着期末就挂了下会议，因此没优</td></tr><tr><td>华东师范大学计算机学院</td><td>&#10006;</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="1、同济大学"><a href="#1、同济大学" class="headerlink" title="1、同济大学"></a>1、同济大学</h3><p>同济我参加的是卓工（工程硕博）项目，当时觉得这个门槛比较低就报名了，报的是电院的电子信息专业。<br>同济是我参加的第一个夏令营</p><h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><h2 id="预推免记录"><a href="#预推免记录" class="headerlink" title="预推免记录"></a>预推免记录</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深度学习常见问题汇总</title>
    <link href="/2024/08/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2024/08/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习常见问题汇总"><a href="#深度学习常见问题汇总" class="headerlink" title="深度学习常见问题汇总"></a>深度学习常见问题汇总</h1><h2 id="深度学习与机器学习有什么区别"><a href="#深度学习与机器学习有什么区别" class="headerlink" title="深度学习与机器学习有什么区别"></a>深度学习与机器学习有什么区别</h2><p>人工智能包含机器学习；机器学习包含深度学习</p><ol><li><p>算法复杂度</p></li><li><p>可解释性；</p></li><li><p>数据需求</p></li><li><p>计算资源</p></li><li><p><strong>特征的提取</strong></p></li><li><p><strong>决策边界</strong>（线性&#x2F;非线性）</p></li></ol><h2 id="ANN（人工神经网络）的基本结构"><a href="#ANN（人工神经网络）的基本结构" class="headerlink" title="ANN（人工神经网络）的基本结构"></a>ANN（人工神经网络）的基本结构</h2><p>单个感知机（或神经元）可以想象为逻辑回归。ANN可以视为一组多层感知机&#x2F;神经元</p><p>ANN被称为前馈神经网络，因为输入只在正向处理</p><p>ANN结构由输入层，隐藏层，输出层构成</p><p>在分类任务中，我们通常<strong>在感知器的输出层中使用 Softmax 函数作为激活函数</strong>，以保证输出的是概率并且相加等于 1</p><h2 id="单层感知机和MLP"><a href="#单层感知机和MLP" class="headerlink" title="单层感知机和MLP"></a>单层感知机和MLP</h2><p>单层感知器——这是最简单的前馈神经网络，不包含任何隐藏层</p><p>多层感知器——多层感知器有至少一个隐藏层</p><p>单层感知器只能学习线性函数，而多层感知器也可以学习非线性函数</p><h2 id="激活函数的作用，常用的激活函数有哪些"><a href="#激活函数的作用，常用的激活函数有哪些" class="headerlink" title="激活函数的作用，常用的激活函数有哪些"></a>激活函数的作用，常用的激活函数有哪些</h2><p>为神经网络增强非线性变换，提高网络的特征提取能力和表达能力；</p><p>sigmoid；tanh；ReLU；softmax；</p><p>ReLU ：可以有效解决梯度消失和梯度爆炸的问题（导数为 1）；正则化作用（稀疏激活）；</p><p>ReLU变体：防止部分神经元一直无法激活（“死亡”ReLUs问题）</p><h2 id="前向传播和反向传播"><a href="#前向传播和反向传播" class="headerlink" title="前向传播和反向传播"></a>前向传播和反向传播</h2><p>前向传播目的：得到损失值</p><p><img src="/../../img/%E5%89%8D%E5%90%91%E4%BC%A0%E6%92%AD%E8%BF%87%E7%A8%8B.png"></p><p>反向传播目的：为了让损失函数的值最小（利用梯度进行反向更新参数）</p><p>前向传播从输入到输出，逐层计算，目的是得到损失值；<br>反向传播则通过梯度下降，从输出往回层层求导，更新权重，以优化模型。</p><h2 id="解释梯度下降算法在深度学习中的应用"><a href="#解释梯度下降算法在深度学习中的应用" class="headerlink" title="解释梯度下降算法在深度学习中的应用"></a>解释梯度下降算法在深度学习中的应用</h2><p>梯度下降（Gradient Descent）是一种优化算法，用于寻找最小化损失函数（或成本函数）的参数值</p><p>损失函数衡量了模型预测值与真实值之间的差异，而梯度下降则是用于更新模型的参数（例如权重和偏置），以最小化这个差异。</p><p><strong>梯度下降算法的步骤：</strong></p><ol><li><p>初始化参数：随机初始化模型的参数（例如权重和偏置）。</p></li><li><p>计算梯度：使用当前参数计算损失函数关于这些参数的梯度。梯度是一个向量，指示了损失函数在每个参数上的局部变化率。</p></li><li><p>更新参数：将每个参数沿着梯度的反方向移动一小步，步长由学习率控制。学习率是一个超参数，决定了参数更新的幅度。</p></li><li><p>重复迭代：重复步骤2和3，直到满足某个停止条件（例如达到最大迭代次数、损失函数值足够小或梯度足够小）。</p></li></ol><h2 id="BGD（批量梯度下降）、SGD（随机梯度下降）、MBGD（小批量梯度下降）-有何不同"><a href="#BGD（批量梯度下降）、SGD（随机梯度下降）、MBGD（小批量梯度下降）-有何不同" class="headerlink" title="BGD（批量梯度下降）、SGD（随机梯度下降）、MBGD（小批量梯度下降） 有何不同"></a>BGD（批量梯度下降）、SGD（随机梯度下降）、MBGD（小批量梯度下降） 有何不同</h2><p>下面是一个表格，总结了批量梯度下降（BGD）、随机梯度下降（SGD）和小批量梯度下降（MBGD）的主要特点：</p><table><thead><tr><th>特性</th><th>批量梯度下降 (BGD)</th><th>随机梯度下降 (SGD)</th><th>小批量梯度下降 (MBGD)</th></tr></thead><tbody><tr><td><strong>梯度计算</strong></td><td>使用全部训练数据</td><td>使用单个样本</td><td>使用一小批样本</td></tr><tr><td><strong>内存需求</strong></td><td>高</td><td>低</td><td>中等</td></tr><tr><td><strong>计算成本</strong></td><td>高</td><td>低</td><td>中等</td></tr><tr><td><strong>收敛速度</strong></td><td>慢</td><td>快（震荡可能较大）</td><td>较快（通常比BGD快）</td></tr><tr><td><strong>梯度稳定性</strong></td><td>最稳定</td><td>最不稳定</td><td>较稳定</td></tr><tr><td><strong>适用场景</strong></td><td>小数据集</td><td>大数据集、在线学习</td><td>大数据集（常用）</td></tr><tr><td><strong>收敛到全局最小值</strong></td><td>可能性较高</td><td>可能性较低</td><td>可能性较高</td></tr><tr><td><strong>调整参数</strong></td><td>较少</td><td>需要调整学习率等</td><td>需要调整小批量大小</td></tr><tr><td><strong>特点</strong></td><td>梯度估计最准确</td><td>训练速度快，但可能震荡</td><td>计算效率和稳定性平衡</td></tr></tbody></table><h2 id="描述CNN的架构和在图像处理中的应用"><a href="#描述CNN的架构和在图像处理中的应用" class="headerlink" title="描述CNN的架构和在图像处理中的应用"></a>描述CNN的架构和在图像处理中的应用</h2><h2 id="池化层的作用是什么"><a href="#池化层的作用是什么" class="headerlink" title="池化层的作用是什么"></a>池化层的作用是什么</h2><h2 id="什么是RNN？它如何处理序列数据"><a href="#什么是RNN？它如何处理序列数据" class="headerlink" title="什么是RNN？它如何处理序列数据"></a>什么是RNN？它如何处理序列数据</h2><h2 id="LSTM（长短期记忆网络）-与-RNN-的主要区别"><a href="#LSTM（长短期记忆网络）-与-RNN-的主要区别" class="headerlink" title="LSTM（长短期记忆网络） 与 RNN 的主要区别"></a>LSTM（长短期记忆网络） 与 RNN 的主要区别</h2><h2 id="解释过拟合和欠拟合，如何防止过拟合"><a href="#解释过拟合和欠拟合，如何防止过拟合" class="headerlink" title="解释过拟合和欠拟合，如何防止过拟合"></a>解释过拟合和欠拟合，如何防止过拟合</h2><h2 id="正则化在深度学习中的作用是什么？常见的正则化技术有哪些？"><a href="#正则化在深度学习中的作用是什么？常见的正则化技术有哪些？" class="headerlink" title="正则化在深度学习中的作用是什么？常见的正则化技术有哪些？"></a>正则化在深度学习中的作用是什么？常见的正则化技术有哪些？</h2><h2 id="什么是数据增强？在深度学习中它为什么重要？"><a href="#什么是数据增强？在深度学习中它为什么重要？" class="headerlink" title="什么是数据增强？在深度学习中它为什么重要？"></a>什么是数据增强？在深度学习中它为什么重要？</h2><h2 id="Batch-Normalization（批归一化）的目的是什么"><a href="#Batch-Normalization（批归一化）的目的是什么" class="headerlink" title="Batch Normalization（批归一化）的目的是什么"></a>Batch Normalization（批归一化）的目的是什么</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java语法基础</title>
    <link href="/2024/08/15/Java/Java%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/08/15/Java/Java%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java语法基础"><a href="#Java语法基础" class="headerlink" title="Java语法基础"></a>Java语法基础</h1><p><a href="https://www.cyc2018.xyz/">CS-Notes 面试笔记</a></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>数据类型介绍</strong><br><img src="/../../img/dataclass.png"></p><p><strong>数据类型转换</strong></p><p>小-&gt;大 ：自动转换<br>大-&gt;小 : 强制转换： (int)</p><ul><li>基本数据类型 ——&gt; String<ul><li><code>val + &quot;&quot;</code></li></ul></li><li>String ——&gt; 基本数据类型<ul><li>parsexx方法：如p<code>arseInt/Float</code></li></ul></li></ul><h2 id="参数重载-可变参数"><a href="#参数重载-可变参数" class="headerlink" title="参数重载&#x2F;可变参数"></a>参数重载&#x2F;可变参数</h2><p><strong>可变参数</strong><br>将传递的参数变成一个数组</p><p><code>void f(int...nums)</code></p><p>一个形参列表只能有一个可变参数<br>可变参数可以和普通参数在一起，但可变参数必须要放在最后</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2024/08/13/algorithm_know/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2024/08/13/algorithm_know/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> f[N],w[N]; <span class="hljs-comment">//w[i] 记录每个以节点i为根的集合中点的数量</span><br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        f[i] = i;<br>        w[i] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(u == f[u]) <span class="hljs-keyword">return</span> u;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> f[u] = <span class="hljs-built_in">find</span>(f[u]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    u = <span class="hljs-built_in">find</span>(u);<br>    v = <span class="hljs-built_in">find</span>(v);<br>    <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span>;<br>    f[u] = v;<br>    w[v] += w[u];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSame</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    u = <span class="hljs-built_in">find</span>(u);<br>    v = <span class="hljs-built_in">find</span>(v);<br>    <span class="hljs-keyword">return</span> u == v;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="求图是否连通"><a href="#求图是否连通" class="headerlink" title="求图是否连通"></a>求图是否连通</h2><p><a href="https://www.acwing.com/problem/content/3590/">连通图</a></p><p>由于如果都连通时，所有点的跟都是一样的，因此以该根的图的节点个数会等于总节点个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> fa = <span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(w[fa] == n) cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>; <span class="hljs-comment">//所有顶点都连通，即要求n个点都连通</span><br><span class="hljs-keyword">else</span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="求连通块个数"><a href="#求连通块个数" class="headerlink" title="求连通块个数"></a>求连通块个数</h2><p><a href="https://www.acwing.com/problem/content/description/3722/">畅通工程</a></p><p>刚开始时所有节点的根都为本身，连通块个数为节点个数。</p><p>最后，计算有多少个节点的根不再为本身了，改变了一个连通块个数就减一</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> cnt = n; <span class="hljs-comment">//连通块个数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(f[i] != i)&#123;<br>        cnt --;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法适用条件</title>
    <link href="/2024/08/02/algorithm_know/%E7%AE%97%E6%B3%95%E9%80%82%E7%94%A8%E6%9D%A1%E4%BB%B6/"/>
    <url>/2024/08/02/algorithm_know/%E7%AE%97%E6%B3%95%E9%80%82%E7%94%A8%E6%9D%A1%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="算法适用条件"><a href="#算法适用条件" class="headerlink" title="算法适用条件"></a>算法适用条件</h1><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><ol><li>具有单调性</li><li>丛某个范围内查找某个数</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高等数学复习</title>
    <link href="/2024/07/20/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/"/>
    <url>/2024/07/20/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="高等数学复习"><a href="#高等数学复习" class="headerlink" title="高等数学复习"></a>高等数学复习</h1><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>在函数中，当自变量趋近于某个特定值时，函数的取值可能会逼近某个确定的数值，这个确定的数值就被称为函数的极限。</p><p>定义：给定一个函数f(x)，当自变量x趋近于某个特定值x0时，如果函数的取值f(x)随着x的趋近逼近一个确定的数A，那么我们称A是函数f(x)在x趋近于x0时的极限。</p><h2 id="三个中值定理"><a href="#三个中值定理" class="headerlink" title="三个中值定理"></a>三个中值定理</h2><p><strong>前提条件</strong>：函数( f(x) )在闭区间 $[ a, b ]$ 上连续，在开区间 $(a, b)$ 内可导。</p><ol><li><p><strong>罗尔中值定理</strong>（Rolle’s Theorem）：</p><ul><li><strong>结论</strong>：<strong>如果( f(a) &#x3D; f(b) )，</strong> 那么至少存在一点( c )在开区间(a, b)内，使得( f’(c) &#x3D; 0 )。</li><li><strong>几何意义</strong>：如果一个函数在区间的两端取相同的值，那么至少在区间内部有一点的导数为零，即函数在该点的切线是水平的。</li></ul></li><li><p><strong>拉格朗日中值定理</strong>（Lagrange’s Mean Value Theorem）：</p><ul><li><strong>前提条件</strong>：与罗尔中值定理相同。</li><li><strong>结论</strong>：存在至少一点( c )在开区间(a, b)内，使得<br>[<br>f’(c) &#x3D; \frac{f(b) - f(a)}{b - a}<br>]</li><li><strong>几何意义</strong>：函数在区间内的某点的导数等于连接函数在区间两端点的直线的斜率。</li></ul></li><li><p><strong>柯西中值定理</strong>（Cauchy’s Mean Value Theorem）：</p><ul><li><strong>前提条件</strong>：函数( f(x) )在闭区间 $[ a, b ]$ 上连续，在开区间 $(a, b)$ 内可导，并且( g’(x) )在开区间(a, b)内不为零。</li><li><strong>结论</strong>：存在至少一点( c )在开区间(a, b)内，使得<br>[<br>\frac{f’(c)}{g’(c)} &#x3D; \frac{f(b) - f(a)}{g(b) - g(a)}<br>]</li><li><strong>几何意义</strong>：如果两个函数在区间的两端取值不同，那么它们在区间内的某点的导数之比等于它们在区间两端点的函数值之比。</li></ul></li></ol><h2 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h2><p>泰勒公式的初衷是用多项式函数来近似表示函数在某点周围的情况。</p><p>泰勒公式可用于将一个函数在某个点附近展开成无穷级数的形式。</p><p>泰勒公式的一般形式如下：</p><p>f(x) &#x3D; f(a) + f’(a)(x - a)&#x2F;1! + f’’(a)(x - a)²&#x2F;2! + f’’’(a)(x - a)³&#x2F;3! + …</p><p>f(x) 是要近似的函数，a 是展开点。</p><h2 id="什么是方向导数和梯度"><a href="#什么是方向导数和梯度" class="headerlink" title="什么是方向导数和梯度"></a>什么是方向导数和梯度</h2><p>方向导数和梯度是多元微积分中的两个重要概念，它们描述了函数在多元空间中的变化情况。</p><ol><li><p><strong>方向导数</strong>（Directional Derivative）：</p><ul><li><strong>定义</strong>：方向导数是函数在某一点沿特定方向的变化率。如果( f )是在( \mathbb{R}^n )上的函数，( P )是( \mathbb{R}^n )中的一点，( \vec{v} )是单位向量，那么在点( P )沿向量( \vec{v} )的方向导数定义为：<br>[<br>D_{\vec{v}}f(P) &#x3D; \lim_{t \to 0} \frac{f(P + t\vec{v}) - f(P)}{t}<br>]</li><li><strong>几何意义</strong>：方向导数可以想象为在点( P )处，函数值沿着向量( \vec{v} )方向的瞬时变化率。</li></ul></li><li><p><strong>梯度</strong>（Gradient）：</p><ul><li><strong>定义</strong>：梯度是一个向量场，它由函数在多元空间中的偏导数构成。如果( f )是在( \mathbb{R}^n )上的可微函数，那么它的梯度( \nabla f )定义为：<br>[<br>\nabla f &#x3D; \left( \frac{\partial f}{\partial x_1}, \frac{\partial f}{\partial x_2}, \ldots, \frac{\partial f}{\partial x_n} \right)<br>]</li><li><strong>几何意义</strong>：梯度向量的方向是函数增长最快的方向，其大小是函数在该方向上的最大变化率。梯度向量的每个分量是函数在相应坐标轴上的偏导数。</li></ul></li></ol><p>方向导数和梯度在物理学、工程学和经济学等领域有广泛的应用，例如在最优化问题中，梯度向量可以指导我们找到函数的局部极值点。</p><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>傅里叶变换：可以处理非周期性信号（一个信号可以看成一个周期性无穷大T-&gt;∞的信号）。傅里叶变换将一个信号从时域转换到频域，得到该信号的频谱。</p><p>通过傅里叶变换，我们可以对信号进行滤波、降噪、压缩、频谱估计等操作。这些技术在音频处理、图像处理、视频压缩、通信系统等领域都有广泛应用。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2024/06/27/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2024/06/27/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>并查集可以解决什么问题：<br><strong>两个节点是否在一个集合，也可以将两个节点添加到一个集合中</strong></p><p>并查集的核心思路在于，不管你是x-&gt;y，还是y-&gt;x，不管边什么方向。只要找到了他们的最根节点，并且连接起来。就相当于把两个不相连的图连接起来了，并且最妙的是这两个图连接起来后，根节点自动切换成同一个。这个数据结构真的是秒啊</p><h2 id="使用的tips"><a href="#使用的tips" class="headerlink" title="使用的tips"></a>使用的tips</h2><p><strong>注意一定要先初始化init()</strong></p><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>并查集初始化，所有节点的根指向本身</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 并查集初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)  father[i] = i;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>tips: <code>join(u,v)</code> 不是将u和v相连，<strong>而是将它们的根相连</strong></p><p>即 <code>join(int u, int v)</code> 函数里 要分别对 u 和 v 寻根之后再进行关联</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 将v-&gt;u 这条边加入并查集</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    u = <span class="hljs-built_in">find</span>(u); <span class="hljs-comment">// 寻找u的根</span><br>    v = <span class="hljs-built_in">find</span>(v); <span class="hljs-comment">// 寻找v的根</span><br>    <span class="hljs-keyword">if</span> (u == v) <span class="hljs-keyword">return</span> ; <span class="hljs-comment">// 如果发现根相同，则说明在一个集合，不用两个节点相连直接返回</span><br>    father[v] = u;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>函数返回类型为 <code>int</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 并查集里寻根的过程</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == father[u]) <span class="hljs-keyword">return</span> u; <span class="hljs-comment">// 如果根就是自己，直接返回</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(father[u]); <span class="hljs-comment">// 如果根不是自己，就根据数组下标一层一层向下找</span><br>&#125;<br></code></pre></td></tr></table></figure><p>路径压缩：将非根节点的所有节点直接指向根节点 ， 减少 下次查询的路径长度</p><p>我们只需要在递归的过程中，让 father[u] 接住 递归函数 find(father[u]) 的返回结果。</p><p>因为 find 函数向上寻找根节点，father[u] 表述 u 的父节点，那么让 father[u] 直接获取 find函数 返回的根节点，这样就让节点 u 的父节点 变成根节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 路径压缩后 并查集里寻根的过程</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == father[u]) <span class="hljs-keyword">return</span> u;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> father[u] = <span class="hljs-built_in">find</span>(father[u]); <span class="hljs-comment">// 路径压缩</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="isSame"><a href="#isSame" class="headerlink" title="isSame"></a>isSame</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// bool isSame(int u,int v)&#123;</span><br><span class="hljs-comment">//     return find(u) == find(v); </span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 判断 u 和 v是否找到同一个根</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSame</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    u = <span class="hljs-built_in">find</span>(u);<br>    v = <span class="hljs-built_in">find</span>(v);<br>    <span class="hljs-keyword">return</span> u == v;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="冗余连接"><a href="#冗余连接" class="headerlink" title="冗余连接"></a>冗余连接</h2><blockquote><p>现给定一个拥有 n 个节点（节点编号从 1 到 n）和 n 条边的连通无向图，请找出一条可以删除的边，删除后图可以变成一棵树。</p></blockquote><p>一个树要是节点数量不变，硬加一条边，那一定会出现环</p><h2 id="并查集题目合集"><a href="#并查集题目合集" class="headerlink" title="并查集题目合集"></a>并查集题目合集</h2><h3 id="判断连通图"><a href="#判断连通图" class="headerlink" title="判断连通图"></a>判断连通图</h3><p>给定一个无向图和其中的所有边，判断这个图是否所有顶点都是连通的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    u = <span class="hljs-built_in">find</span>(u);<br>    v = <span class="hljs-built_in">find</span>(v);<br>    <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span>;<br>    f[u] = v;<br>    w[v] += w[u];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> x,y;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;<br>        <span class="hljs-built_in">init</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            cin &gt;&gt; x &gt;&gt; y;<br>            <span class="hljs-built_in">join</span>(x,y);<br>        &#125;<br>        <span class="hljs-type">int</span> fa = <span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(w[fa] == n) cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>; <span class="hljs-comment">//所有顶点都连通，即要求n个点都连通</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="连通块中点的数量"><a href="#连通块中点的数量" class="headerlink" title="连通块中点的数量"></a>连通块中点的数量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    u = <span class="hljs-built_in">find</span>(u);<br>    v = <span class="hljs-built_in">find</span>(v);<br>    <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span>;<br>    f[u] = v;<br>    s[v] += s[u]; <span class="hljs-comment">//点个数相加</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(op == <span class="hljs-string">&quot;Q2&quot;</span>)&#123;<br>    cin &gt;&gt; a;<br>    cout &lt;&lt; s[<span class="hljs-built_in">find</span>(a)] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="连通块个数"><a href="#连通块个数" class="headerlink" title="连通块个数"></a>连通块个数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> cnt = n; <br><br><span class="hljs-comment">//for循环完所得到的cnt即为连通块个数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(f[i] != i)&#123;<br>        cnt --;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//使全省任何两个城镇间都可以实现交通，即将目前分割开的连通块连接在一起</span><br><span class="hljs-comment">//需要新修的路 = 连通块个数 - 1</span><br>cout &lt;&lt; cnt<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图论</title>
    <link href="/2024/06/26/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%9B%BE%E8%AE%BA/"/>
    <url>/2024/06/26/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%9B%BE%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="图论习题"><a href="#图论习题" class="headerlink" title="图论习题"></a>图论习题</h1><h2 id="dfs和bfs-的岛屿问题"><a href="#dfs和bfs-的岛屿问题" class="headerlink" title="dfs和bfs 的岛屿问题"></a>dfs和bfs 的岛屿问题</h2><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> g[N][N],st[N][N];<br><span class="hljs-type">int</span> n,m,res;<br><br><span class="hljs-type">int</span> ax[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> ay[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;t&lt;<span class="hljs-number">4</span>;t++)&#123;<br>        <span class="hljs-type">int</span> x = i+ax[t]; <span class="hljs-type">int</span> y = j+ay[t];<br>        <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="hljs-number">0</span> &amp;&amp; y&lt;m &amp;&amp; !st[x][y] &amp;&amp; g[x][y])&#123;<br>            st[x][y] = <span class="hljs-number">1</span>; <span class="hljs-comment">//设置访问过</span><br>            <span class="hljs-built_in">dfs</span>(x,y);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            cin &gt;&gt; g[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(st));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!st[i][j] &amp;&amp; g[i][j])&#123;<br>                st[i][j] = <span class="hljs-number">1</span>; <span class="hljs-comment">//设置访问过</span><br>                res ++;<br>                <span class="hljs-built_in">dfs</span>(i,j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="孤岛"><a href="#孤岛" class="headerlink" title="孤岛"></a>孤岛</h2><p>思路：先把图中的靠边的岛屿变成海洋，再进行遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> n,m,s;<br><span class="hljs-type">int</span> g[N][N],st[N][N];<br><span class="hljs-type">int</span> ax[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> ay[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br>    st[i][j] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)&#123;<br>        <span class="hljs-type">int</span> x = i + ax[k];<br>        <span class="hljs-type">int</span> y = j + ay[k];<br>        <span class="hljs-keyword">if</span>(x &gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt; n &amp;&amp; y &gt;=<span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp; !st[x][y] &amp;&amp; g[x][y])&#123;<br>            st[x][y] = <span class="hljs-number">1</span>;<br>            s ++;<br>            <span class="hljs-built_in">dfs</span>(x,y);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            cin &gt;&gt; g[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(st));<br>    <br>    <span class="hljs-comment">//最左边和最右边</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(g[i][<span class="hljs-number">0</span>]) <span class="hljs-built_in">dfs</span>(i,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(g[i][m<span class="hljs-number">-1</span>]) <span class="hljs-built_in">dfs</span>(i,m<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-comment">//最上边和最下边</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(g[<span class="hljs-number">0</span>][j]) <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,j);<br>        <span class="hljs-keyword">if</span>(g[n<span class="hljs-number">-1</span>][j]) <span class="hljs-built_in">dfs</span>(n<span class="hljs-number">-1</span>,j);<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!st[i][j] &amp;&amp; g[i][j])&#123;<br>                s = <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">dfs</span>(i,j);<br>                res += s;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="沉没孤岛"><a href="#沉没孤岛" class="headerlink" title="沉没孤岛"></a>沉没孤岛</h2><p>思路：<br>通过st（标志状态） 和 g（存储图） 两个数组来控制岛屿的遍历 以及 变化（改变矩阵值）</p><ol><li><p>第一个 dfs 来找出那些以四条边有关的非孤岛的岛屿，通过st数组将他们标记成已遍历</p></li><li><p>第二个 dfs2 来对孤岛进行遍历并改变g数组的值</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> g[N][N],st[N][N];<br><span class="hljs-type">int</span> ax[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> ay[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br>    st[i][j] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)&#123;<br>        <span class="hljs-type">int</span> x = i + ax[k];<br>        <span class="hljs-type">int</span> y = j + ay[k];<br>        <span class="hljs-keyword">if</span>(x &gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt; n &amp;&amp; y &gt;=<span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp; !st[x][y] &amp;&amp; g[x][y])&#123;<br>            st[x][y] = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs</span>(x,y);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br>    st[i][j] = <span class="hljs-number">1</span>;<br>    g[i][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)&#123;<br>        <span class="hljs-type">int</span> x = i + ax[k];<br>        <span class="hljs-type">int</span> y = j + ay[k];<br>        <span class="hljs-keyword">if</span>(x &gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt; n &amp;&amp; y &gt;=<span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp; !st[x][y] &amp;&amp; g[x][y])&#123;<br>            st[x][y] = <span class="hljs-number">1</span>;<br>            g[x][y] = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">dfs2</span>(x,y); <span class="hljs-comment">//这里也要写dfs2</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            cin &gt;&gt; g[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(st));<br>    <br>    <span class="hljs-comment">//最左边和最右边</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(g[i][<span class="hljs-number">0</span>]) <span class="hljs-built_in">dfs</span>(i,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(g[i][m<span class="hljs-number">-1</span>]) <span class="hljs-built_in">dfs</span>(i,m<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-comment">//最上边和最下边</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(g[<span class="hljs-number">0</span>][j]) <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,j);<br>        <span class="hljs-keyword">if</span>(g[n<span class="hljs-number">-1</span>][j]) <span class="hljs-built_in">dfs</span>(n<span class="hljs-number">-1</span>,j);<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!st[i][j] &amp;&amp; g[i][j])&#123;<br>                <span class="hljs-built_in">dfs2</span>(i,j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            cout &lt;&lt; g[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i == n<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="建造最大岛屿"><a href="#建造最大岛屿" class="headerlink" title="建造最大岛屿"></a>建造最大岛屿</h2><p>求岛屿面积注意事项：</p><ol><li><code>s = 1; // 这里为 1 而不是 0，起点开始从1累加</code></li><li>要先计算一遍面积，再用两个fou循环去改变岛屿矩阵<br>防止出现如下样例答案为1，而输出为0<br>暴力：外层两个for循环嵌套内部两个for循环 ： n^4<br>优化：给每个岛屿进行编号（从2开始，矩阵值为1代表还未编号），然后对海水即矩阵值为0的地方开始遍历，将其周围的岛屿面积相加<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span> <br></code></pre></td></tr></table></figure></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200</span>;<br><br><span class="hljs-type">int</span> n,m,s;<br><span class="hljs-type">int</span> g[N][N],st[N][N];<br><br><span class="hljs-type">int</span> ax[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> ay[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)&#123;<br>        <span class="hljs-type">int</span> x = i+ax[k];<br>        <span class="hljs-type">int</span> y = j+ay[k];<br>        <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt;n &amp;&amp; y &gt;=<span class="hljs-number">0</span> &amp;&amp; y&lt;m &amp;&amp; !st[x][y] &amp;&amp; g[x][y])&#123;<br>            st[x][y] = <span class="hljs-number">1</span>;<br>            s++;<br>            <span class="hljs-built_in">dfs</span>(x,y);<br>        &#125;<br>        <br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            cin &gt;&gt; g[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> maxs = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(st));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!st[i][j] &amp;&amp; g[i][j])&#123;<br>                st[i][j] = <span class="hljs-number">1</span>;<br>                s = <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">dfs</span>(i,j);<br>                maxs = <span class="hljs-built_in">max</span>(maxs,s);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;a&lt;n;a++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;b&lt;m;b++)&#123;<br>            <span class="hljs-keyword">if</span>(g[a][b] == <span class="hljs-number">0</span>)&#123;<br>                g[a][b] = <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(st));<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>                        <span class="hljs-keyword">if</span>(!st[i][j] &amp;&amp; g[i][j])&#123;<br>                            st[i][j] = <span class="hljs-number">1</span>;<br>                            s = <span class="hljs-number">1</span>;<br>                            <span class="hljs-built_in">dfs</span>(i,j);<br>                            maxs = <span class="hljs-built_in">max</span>(maxs,s);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                g[a][b] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; maxs;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有向图的可达性"><a href="#有向图的可达性" class="headerlink" title="有向图的可达性"></a>有向图的可达性</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    st[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span>(!st[j])&#123;<br>            <span class="hljs-built_in">dfs</span>(j);<br>        &#125;<br>    &#125;<br>&#125;<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!st[i])&#123;<br>            flag = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag) cout &lt;&lt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; <span class="hljs-number">-1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="岛屿的周长"><a href="#岛屿的周长" class="headerlink" title="岛屿的周长"></a>岛屿的周长</h2><p>思路：<br>遍历所有岛屿，判断其四周（上下左右四个方向）的情况，满足以下条件则周长加1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span>(g[x][y] == <span class="hljs-number">0</span><br>        || x &lt; <span class="hljs-number">0</span><br>        || x &gt;= n<br>        || y &lt; <span class="hljs-number">0</span><br>        || y &gt;= m<br>    )&#123;<br>    res++;        <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-type">int</span> ax[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> ay[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            cin &gt;&gt; g[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(g[i][j] == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)&#123;<br>                    <span class="hljs-type">int</span> x = i+ax[k];<br>                    <span class="hljs-type">int</span> y = j+ay[k];<br>                    <span class="hljs-keyword">if</span>(g[x][y] == <span class="hljs-number">0</span><br>                            || x &lt; <span class="hljs-number">0</span><br>                            || x &gt;= n<br>                            || y &lt; <span class="hljs-number">0</span><br>                            || y &gt;= m<br>                        )&#123;<br>                        res++;        <br>                    &#125;<br>                        <br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="bfs-问题：小镇购物"><a href="#bfs-问题：小镇购物" class="headerlink" title="bfs 问题：小镇购物"></a>bfs 问题：小镇购物</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-type">int</span> n,m,k,s;<br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx;<br><span class="hljs-type">int</span> st[N];<br><br><span class="hljs-type">int</span> a[N]; <span class="hljs-comment">//a[i] = j 代表第i个商店的商品种类为j</span><br><span class="hljs-type">bool</span> buy[<span class="hljs-number">110</span>]; <span class="hljs-comment">//第i钟商品是否购买  1≤ k ≤ min(n,100)</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx;<br>    idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(st));<br>    <span class="hljs-built_in">memset</span>(buy,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(buy));<br>    <br>    buy[a[u]] = <span class="hljs-literal">true</span>; <span class="hljs-comment">//这里应该是 a[u] 去置为true，而不是buy[u] = true;</span><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>; <span class="hljs-comment">//起点直接就被算上</span><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    st[u] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(u); <span class="hljs-comment">// 节点</span><br>    <br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[t];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span>(st[j] == <span class="hljs-number">-1</span>)&#123;<br>                <span class="hljs-comment">// cout &lt;&lt; j &lt;&lt; &#x27; &#x27; &lt;&lt; d[j] &lt;&lt; endl; </span><br>                st[j] = st[t] + <span class="hljs-number">1</span>;<br>                <br>                q.<span class="hljs-built_in">push</span>(j);<br>                <br>                <br>                <span class="hljs-keyword">if</span>(!buy[a[j]])&#123;<br>                    buy[a[j]] = <span class="hljs-literal">true</span>;<br>                    cnt ++;<br>                    res += st[j];<br>                &#125;<br>                <br>                <span class="hljs-keyword">if</span>(cnt == s) <span class="hljs-keyword">return</span> res;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; s)&#123;<br><br>        <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h));<br>        <span class="hljs-comment">// memset(e,0,sizeof(e));</span><br>        <span class="hljs-comment">// memset(ne,0,sizeof(ne));</span><br>        <br>        <span class="hljs-comment">// memset(a,0,sizeof(a));</span><br>        <br>        idx = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            cin &gt;&gt; a[i];<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>            <span class="hljs-type">int</span> a,b;<br>            cin &gt;&gt; a &gt;&gt; b;<br>            <span class="hljs-built_in">add</span>(a,b); <span class="hljs-built_in">add</span>(b,a);<br>        &#125;       <br>        <br>        <span class="hljs-comment">//当只需要买一种商品时，此时所有的位置出发都不需要派遣队伍出去，即代价为0</span><br>        <span class="hljs-comment">//注意这种判断一定要得把改组所有测试数据都接收完在进行</span><br>        <span class="hljs-keyword">if</span>(s == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>                cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>                cout &lt;&lt; <span class="hljs-built_in">bfs</span>(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pycharm 虚拟环境</title>
    <link href="/2024/06/11/pycharm-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/06/11/pycharm-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">创建虚拟环境  <br>conda create -n xxx<br>进入虚拟环境  <br>conda activate xxx<br>退出虚拟环境  <br>conda deactivate<br>删除虚拟环境  <br>conda remove --name xxx --<span class="hljs-built_in">all</span><br></code></pre></td></tr></table></figure><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://gitcode.csdn.net/65e7d1081a836825ed789158.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MTQ2NTQ0NCwiZXhwIjoxNzE4NjkzNzk5LCJpYXQiOjE3MTgwODg5OTksInVzZXJuYW1lIjoibTBfNjEwNjgyNDEifQ.7259cLHEohi5dwSZaTtB5clG_2yNAySG-Y8P0_Jh5Uk">Anaconda+PyCharm创建环境及超详细配置指南</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树</title>
    <link href="/2024/06/10/algorithm_know/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2024/06/10/algorithm_know/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p><strong>树深度和高度</strong></p><ol><li>树的高度和深度是一样的</li><li>节点的深度和高度可能不一样</li><li>深度是从上到下数的，而高度是从下往上数</li><li>最大深度和最小深度（由题意而定）</li></ol><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><p><strong>前中后序遍历</strong></p><p>前中后序遍历指的是中间节点的位置是在前还是中还是后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//前序遍历</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traversal</span><span class="hljs-params">(TreeNode* cur, vector&lt;<span class="hljs-type">int</span>&gt;&amp; vec)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>        vec.<span class="hljs-built_in">push_back</span>(cur-&gt;val);    <span class="hljs-comment">// 中</span><br>        <span class="hljs-built_in">traversal</span>(cur-&gt;left, vec);  <span class="hljs-comment">// 左</span><br>        <span class="hljs-built_in">traversal</span>(cur-&gt;right, vec); <span class="hljs-comment">// 右</span><br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        <span class="hljs-built_in">traversal</span>(root, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><p><strong>层次遍历</strong></p><ol><li>层次遍历使用队列这种数据结构  </li><li>要用 <strong>while</strong> 循环入队出队</li><li>if (root &#x3D;&#x3D; NULL) return a; <ul><li><strong>防止后续错误操作了为空的序列而报错</strong></li><li>剪枝，减少算法复杂度</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    queue&lt;TreeNode*&gt; q;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; a; <br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">levelOrder</span>(TreeNode* root) &#123; <br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> a; <span class="hljs-comment">//如果树为空就直接返回</span><br>        q.<span class="hljs-built_in">push</span>(root);<br>        a.<span class="hljs-built_in">push_back</span>(&#123;q.<span class="hljs-built_in">front</span>()-&gt;val&#125;);<br>        <span class="hljs-comment">//注意这里要用while</span><br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt; b;<br>            <span class="hljs-type">int</span> size = q.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">//要遍历完当前整个队列的元素</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>                TreeNode* t = q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(t-&gt;left != <span class="hljs-literal">NULL</span>)&#123;<br>                    q.<span class="hljs-built_in">push</span>(t-&gt;left);<br>                    b.<span class="hljs-built_in">push_back</span>(t-&gt;left-&gt;val);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(t-&gt;right != <span class="hljs-literal">NULL</span>)&#123;<br>                    q.<span class="hljs-built_in">push</span>(t-&gt;right);<br>                    b.<span class="hljs-built_in">push_back</span>(t-&gt;right-&gt;val);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(b.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>) a.<span class="hljs-built_in">push_back</span>(b);<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="树的叶子节点路径"><a href="#树的叶子节点路径" class="headerlink" title="树的叶子节点路径"></a>树的叶子节点路径</h2><ol><li>定义的是string path，每次都是复制赋值，不用使用引用，否则就无法做到回溯的效果</li><li><strong>这里并没有加上引用&amp;</strong> ，即本层递归中，path + 该节点数值，但该层递归结束，上一层path的数值并不会受到任何影响</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++">lass Solution &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//定义的是string path，每次都是复制赋值，不用使用引用，否则就无法做到回溯的效果</span><br><span class="hljs-comment">//这里并没有加上引用&amp; ，即本层递归中，path + 该节点数值，但该层递归结束，上一层path的数值并不会受到任何影响</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findPath</span><span class="hljs-params">(TreeNode* cur,string path,vector&lt;string&gt;&amp; result)</span></span>&#123;<br>        path += <span class="hljs-built_in">to_string</span>(cur-&gt;val);<br>        <span class="hljs-keyword">if</span>(cur-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; cur-&gt;right == <span class="hljs-literal">NULL</span>)&#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left != <span class="hljs-literal">NULL</span>)&#123;<br>                path += <span class="hljs-string">&quot;-&gt;&quot;</span>;<br>                <span class="hljs-built_in">findPath</span>(cur-&gt;left,path,result);<br>                path.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//回溯&#x27;&gt;&#x27;</span><br>                path.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//回溯&#x27;-&#x27;</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;right != <span class="hljs-literal">NULL</span>)&#123;<br>                path += <span class="hljs-string">&quot;-&gt;&quot;</span>;<br>                <span class="hljs-built_in">findPath</span>(cur-&gt;right,path,result);<br>                path.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//回溯&#x27;&gt;&#x27;</span><br>                path.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//回溯&#x27;-&#x27;</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">binaryTreePaths</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;string&gt; result;<br>        string path;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> result;<br>        <span class="hljs-built_in">findPath</span>(root,path,result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="从前序与中序遍历序列构造二叉树"><a href="#从前序与中序遍历序列构造二叉树" class="headerlink" title="从前序与中序遍历序列构造二叉树"></a>从前序与中序遍历序列构造二叉树</h2><p>tips:</p><ol><li>对前序和中序进行分割<ul><li>前序是直接分割</li><li>中序中间会空一个根节点进行分割</li></ul></li><li>对分割之后的左前序和左中序 以及 右前序和右中序 进行递归操作 分别得到当前根节点的左子节点和右子节点</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">createTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(preorder.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(preorder[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">int</span> inorderIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = inorder.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(root-&gt;val == inorder[i]) inorderIndex = i;<br>        &#125;<br>        <span class="hljs-comment">//切割中序数组，两端切割出来的数组中间会空一个根节点</span><br>        <span class="hljs-comment">// 左闭右开区间：[0, delimiterIndex)</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftinorder</span><span class="hljs-params">(inorder.begin(),inorder.begin()+inorderIndex)</span></span>;<br>        <span class="hljs-comment">// [delimiterIndex + 1, end)</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightinorder</span><span class="hljs-params">(inorder.begin()+inorderIndex+<span class="hljs-number">1</span>,inorder.end())</span></span>;<br><br>        preorder.<span class="hljs-built_in">erase</span>(preorder.<span class="hljs-built_in">begin</span>(),preorder.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 依然左闭右开，注意这里使用了左中序数组大小作为切割点</span><br>        <span class="hljs-comment">// [0, leftInorder.size)</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftpreorder</span><span class="hljs-params">(preorder.begin(),preorder.begin()+leftinorder.size())</span></span>;<br>        <span class="hljs-comment">// [leftInorder.size(), end)</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightpreorder</span><span class="hljs-params">(preorder.begin()+leftinorder.size(),preorder.end())</span></span>; <br><br>        root-&gt;left = <span class="hljs-built_in">createTree</span>(leftpreorder,leftinorder);<br>        root-&gt;right = <span class="hljs-built_in">createTree</span>(rightpreorder,rightinorder);<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span>&#123;<br>        TreeNode* root = <span class="hljs-built_in">createTree</span>(preorder,inorder);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>线性代数复习</title>
    <link href="/2024/06/06/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%A4%8D%E4%B9%A0/"/>
    <url>/2024/06/06/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="线性代数复习"><a href="#线性代数复习" class="headerlink" title="线性代数复习"></a>线性代数复习</h1><h2 id="向量运算"><a href="#向量运算" class="headerlink" title="向量运算"></a>向量运算</h2><ol><li>内积（点乘）</li></ol><p>如果内积为0，代表两个向量正交，<br>内积大于0，两向量夹角小于90<br>内积小于0，两向量夹角大于90小于180</p><ol start="2"><li>外积（叉乘）</li></ol><h2 id="线性-无关-有关"><a href="#线性-无关-有关" class="headerlink" title="线性 无关&#x2F;有关"></a>线性 无关&#x2F;有关</h2><p><strong>线性无关</strong></p><p>一组向量是线性无关的，如果它们不能通过线性组合（即加权和）来表示为零向量<br>（一组向量里面，没有一个可以被其他人联合表示）</p><p><strong>线性相关</strong></p><p>如果一组向量可以通过非零权重的线性组合得到零向量，那么这组向量就是线性相关的。</p><p>线性 无关&#x2F; 相关 两者都不包含 所有权重都为0 的情况</p><h2 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h2><p>线性代数中的线性变换是一种将向量从一个向量空间映射到另一个向量空间的函数。</p><p>它满足两个基本属性：加法的保持性和标量的乘法保持性。</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p><strong>每个线性变换都可以用一个矩阵来表示</strong><br>如果矩阵里面的列是线性相关的（共线的话），这个矩阵就是一个高维到低维的线性变换。</p><p><strong>矩阵向量乘法</strong><br><img src="/../../img/%E7%9F%A9%E9%98%B5%E5%90%91%E9%87%8F%E4%B9%98%E6%B3%95.png"></p><p><strong>逆矩阵</strong><br>AB &#x3D; E (B为A的逆矩阵，E为单位矩阵，即对角线全为1，其他位置全为0)</p><p><strong>转置矩阵</strong><br>把矩阵的行和列交换产生的矩阵是A的转置矩阵，记作$A^T$<br>矩阵A的转置AT的秩与A的秩是一样的</p><p><strong>对角矩阵</strong></p><p>对角矩阵只在对角线上含有非0元素，其它位置都为0</p><p><strong>单位矩阵</strong></p><p>对角线（称为主对角线）上的元素均为1。除此以外全都为0。<br>任何矩阵与单位矩阵相乘都等于本身</p><p><strong>正交矩阵</strong><br>$A^-1 &#x3D; A^T$ : A即为正交矩阵</p><p><strong>相似矩阵</strong></p><p>矩阵A和B相似：$P^{-1}AP &#x3D; B$</p><p>若矩阵A和B相似，则R(A) &#x3D; R(B),且特征值也相同</p><p>相似矩阵的本质就是在不同的基向量下表达同一个线性变换</p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><p><strong>几何意义</strong><br>在二维中，行列式的值就是由基所围成的平行四边形的面积<br>det(A) &#x3D; S(A)</p><p>行列式为0（代表这个矩阵所对应的线性变换将空间压缩到更小的维度上）的矩阵为奇异矩阵</p><p>非0的为非奇异矩阵</p><p>矩阵可逆和矩阵满秩的充分必要条件都是 det不为0</p><p><strong>线性变换定义</strong>：<br>线性变换是指一个函数 ( T: V \rightarrow W )，它将一个向量空间 ( V ) 中的向量 ( v ) 映射到另一个向量空间 ( W ) 中的向量 ( w )，且满足以下两个条件：</p><ul><li>加法保持性：对于任意向量 ( u, v \in V )，有 ( T(u + v) &#x3D; T(u) + T(v) )。</li><li>标量乘法保持性：对于任意向量 ( v \in V ) 和任意标量 ( a )，有 ( T(av) &#x3D; aT(v) )。</li></ul><p><strong>几何意义</strong>：<br><strong>线性变换可以看作是一种在空间中的“拉伸”或“压缩”，甚至可以是“旋转”或“反射”。</strong> 在二维空间中，线性变换可以想象为一个网格被均匀地拉伸或压缩，而不会发生撕裂或折叠。</p><h2 id="线性组合"><a href="#线性组合" class="headerlink" title="线性组合"></a>线性组合</h2><p>多个数乘向量的和</p><p>n个线性无关的向量可以通过线性组合张成一个n维空间，这样的向量我们就可以称为基向量（线性相关的一组向量则不行）</p><p>向量组可以张成的空间的维度也叫做秩</p><p><img src="/../../img/%E7%BA%BF%E6%80%A7%E7%BB%84%E5%90%88.png"></p><h2 id="线性空间"><a href="#线性空间" class="headerlink" title="线性空间"></a>线性空间</h2><p>m个相互正交的向量，做加法和数乘，可以组成线性空间</p><h2 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h2><p>矩阵乘法 是对空间的线性变换</p><h2 id="基向量"><a href="#基向量" class="headerlink" title="基向量"></a>基向量</h2><ol><li>基向量（或简称基）是构成向量空间的一组<strong>线性无关</strong>向量</li><li>向量空间中的任意向量都可以表示为基向量的线性组合</li><li>每个基向量集合的向量数量必须与向量空间的维数相同</li></ol><p>线性变换的含义</p><h2 id="矩阵的秩"><a href="#矩阵的秩" class="headerlink" title="矩阵的秩"></a>矩阵的秩</h2><ol><li>矩阵中线性无关向量的个数。</li><li>矩阵的秩 为 变换后空间的维度</li><li>取子矩阵（方阵）的行列式，最大子矩阵维度 使得行列式 ≠ 0（没有对空间进行压缩）</li></ol><h3 id="矩阵的秩的含义"><a href="#矩阵的秩的含义" class="headerlink" title="矩阵的秩的含义"></a>矩阵的秩的含义</h3><p>它描述了<strong>矩阵中线性独立行或列的最大数目</strong></p><p>一个向量组A: a1,a2,…,am </p><p>线性相关的充分必要条件就是 R(A) &lt; m;</p><p>线性无关的充分必要条件就是 R(A) &#x3D; m;</p><ol><li><p><strong>线性独立性</strong>：矩阵的秩是矩阵中线性独立行或列的最大数目。如果一个矩阵的秩为 ( r )，那么矩阵中至少有 ( r ) 行（或列）是线性独立的。</p></li><li><p><strong>行最简形</strong>：通过行简化（如行交换、行倍加等操作），可以将矩阵转换为行最简形。在行最简形中，非零行的数目等于矩阵的秩。</p></li><li><p><strong>列最简形</strong>：同样地，通过列简化，可以将矩阵转换为列最简形。在列最简形中，非零列的数目也等于矩阵的秩。</p></li><li><p><strong>零空间</strong>：矩阵的零空间（或核）是所有映射到零向量的向量集合。矩阵的秩与零空间的维数有直接关系。具体来说，如果一个矩阵 ( A ) 的秩为 ( r )，那么 ( A ) 的零空间的维数为 ( n - r )，其中 ( n ) 是矩阵的列数。</p></li><li><p><strong>线性方程组解的个数</strong>：矩阵的秩与线性方程组解的个数有关。如果系数矩阵的秩等于增广矩阵的秩，并且等于未知数的个数，那么方程组有唯一解；如果系数矩阵的秩小于未知数的个数，那么方程组有无穷多解；如果系数矩阵的秩大于增广矩阵的秩，那么方程组无解。</p></li><li><p><strong>矩阵的可逆性</strong>：如果一个方阵的秩等于其阶数（即行数和列数），那么这个矩阵是可逆的。换句话说，只有满秩的方阵才是可逆的。</p></li><li><p><strong>子空间的维数</strong>：矩阵的秩还可以描述其行空间或列空间的维数。行空间和列空间是矩阵行向量或列向量生成的向量空间，其维数等于矩阵的秩。</p></li></ol><h3 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h3><p>矩阵的秩可以通过多种方法计算，常见的有：</p><ul><li><p><strong>高斯消元法</strong>：通过行操作(<strong>初等行变换</strong>)将矩阵转换为行最简形，然后计算非零行的数目。</p></li><li><p><strong>奇异值分解（SVD）</strong>：通过分解矩阵为三个矩阵的乘积，其中包含一个对角矩阵，其非零元素的数目即为矩阵的秩。</p></li></ul><p><a href="https://www.bilibili.com/video/BV1Gm421G7aC/?spm_id_from=333.999.0.0">奇异值分解视频</a></p><p>满秩矩阵也为可逆矩阵，满秩矩阵detA≠0（detA 就是矩阵A的行列式的值）</p><p><strong>不满秩矩阵就是奇异矩阵</strong>，奇异矩阵<strong>detA&#x3D;0</strong></p><p>由行列式性质知道，矩阵A的转置AT的秩与A的秩是一样的</p><h2 id="线性方程组有解（一个-多个）和无解的条件"><a href="#线性方程组有解（一个-多个）和无解的条件" class="headerlink" title="线性方程组有解（一个&#x2F;多个）和无解的条件"></a>线性方程组有解（一个&#x2F;多个）和无解的条件</h2><h3 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h3><p><img src="/../../img/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84.png"></p><p><a href="https://blog.csdn.net/lynn0085/article/details/79375614">线性方程组什么时候无解？多个解？唯一解？</a></p><p><img src="/../../img/%E8%A7%A3%E6%96%B9%E7%A8%8B%E7%BB%84%E4%B8%AA%E6%95%B0.png"></p><h2 id="特征值和特征向量的含义"><a href="#特征值和特征向量的含义" class="headerlink" title="特征值和特征向量的含义"></a>特征值和特征向量的含义</h2><p>矩阵向量乘积 &#x3D; 向量数乘（A为矩阵，$\mathbf{v}$为向量，$\lambda$为标量）<br>  [<br>  A\mathbf{v} &#x3D; \lambda \mathbf{v}<br>  ]</p><p>从直观理解上看，由于矩阵的乘法实际上是对向量进行坐标旋转变换,它使得左乘 𝐴 后的向量依然与 𝑥 共线</p><p><strong>几何意义</strong>：<br><strong>特征向量：是线性变换下保持方向不变的向量，</strong><br><strong>特征值：则表示这个方向上的伸缩比例。</strong> 在二维空间中，可以想象一个线性变换将一个向量“拉伸”或“压缩”成另一个向量，而特征向量就是在这个过程中方向不变的向量。</p><p><strong>计算方法：</strong><br>式Av&#x3D;λv也可写成( A-λE)v&#x3D;0，并且|λE-A|叫做A 的特征多项式。当特征多项式等于0的时候，称为A的特征方程，特征方程是一个齐次线性方程组，求解特征值的过程其实就是求解特征方程的解。</p><h3 id="特征值（Eigenvalue）"><a href="#特征值（Eigenvalue）" class="headerlink" title="特征值（Eigenvalue）"></a>特征值（Eigenvalue）</h3><p>特征值是与线性变换相关联的标量，满足以下性质：</p><ul><li>对于给定的线性变换 ( T ) 和非零向量 ( \mathbf{v} )，如果存在标量 ( \lambda ) 使得：<br>[<br>T(\mathbf{v}) &#x3D; \lambda \mathbf{v}<br>]<br>那么 ( \lambda ) 就是 ( T ) 的一个特征值。</li></ul><p><strong>求解特征值：</strong><br>求特征方程 det(A−λI)&#x3D;0 的解，即为特征值</p><h3 id="特征向量（Eigenvector）"><a href="#特征向量（Eigenvector）" class="headerlink" title="特征向量（Eigenvector）"></a>特征向量（Eigenvector）</h3><p>特征向量是与特征值相关联的非零向量，满足以下性质：</p><ul><li>如果 ( \lambda ) 是线性变换 ( T ) 的特征值，那么满足 ( T(\mathbf{v}) &#x3D; \lambda \mathbf{v} ) 的非零向量 ( \mathbf{v} ) 就是 ( \lambda ) 的特征向量。</li></ul><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>特征值和特征向量的计算通常通过求解特征方程 ( T(v) &#x3D; \lambda v ) 来完成，即：</p><p>[ (T - \lambda I)v &#x3D; 0 ]</p><p>其中，( T ) 是线性变换的矩阵表示，( I ) 是单位矩阵，( \lambda ) 是特征值，( v ) 是特征向量。</p><h3 id="性质和应用"><a href="#性质和应用" class="headerlink" title="性质和应用"></a>性质和应用</h3><ol><li><p><strong>不变性</strong>：特征向量在 ( T ) 的作用下被拉伸或压缩，但方向不变。这是“特征”（eigen，德语中意为“自身”）一词的由来。</p></li><li><p><strong>计算</strong>：特征值和特征向量可以通过解特征方程来找到。对于矩阵 ( A )，特征方程为：<br>[<br>\det(A - \lambda I) &#x3D; 0<br>]<br>其中 ( \det ) 表示行列式，( I ) 是单位矩阵。解这个方程可以得到 ( A ) 的特征值 ( \lambda )，然后通过解线性方程组 ( (A - \lambda I) \mathbf{v} &#x3D; 0 ) 找到对应的特征向量。</p></li><li><p><strong>主成分分析（PCA）</strong>：在统计学和机器学习中（如PCA主成分分析法），特征值和特征向量用于降维和数据压缩，通过识别数据中的主要变化方向</p></li></ol><p>在线性代数中，矩阵根据其特性可以被分为多种类型，每种类型都有其特定的性质和应用。以下是对称矩阵、置换矩阵、正交矩阵和正定矩阵的解释：</p><h2 id="矩阵类型"><a href="#矩阵类型" class="headerlink" title="矩阵类型"></a>矩阵类型</h2><h3 id="对称矩阵（Symmetric-Matrix）"><a href="#对称矩阵（Symmetric-Matrix）" class="headerlink" title="对称矩阵（Symmetric Matrix）"></a>对称矩阵（Symmetric Matrix）</h3><ol><li><strong>定义</strong>：如果矩阵( A )的转置( A^T )等于其本身，即( A^T &#x3D; A )，则称矩阵( A )为对称矩阵。</li><li><strong>性质</strong>：对称矩阵的对角线以外的元素都是对称的，即( a_{ij} &#x3D; a_{ji} )。</li><li><strong>应用</strong>：在物理学中，对称矩阵常用于表示守恒定律；在优化问题中，对称矩阵用于表示二次型。</li></ol><h3 id="置换矩阵（Permutation-Matrix）"><a href="#置换矩阵（Permutation-Matrix）" class="headerlink" title="置换矩阵（Permutation Matrix）"></a>置换矩阵（Permutation Matrix）</h3><ol><li><strong>定义</strong>：置换矩阵是一种特殊类型的方阵，它的每一行和每一列都恰好有一个非零元素（通常是1），其余元素都是0。置换矩阵代表了一种排列或置换。</li><li><strong>性质</strong>：置换矩阵的乘积可以表示更复杂的排列；它们在数学上用于重新排列集合中的元素顺序。</li><li><strong>应用</strong>：在组合数学中，置换矩阵用于表示元素的重新排序；在计算机科学中，用于实现数据结构中的排序算法。</li></ol><h3 id="正交矩阵（Orthogonal-Matrix）"><a href="#正交矩阵（Orthogonal-Matrix）" class="headerlink" title="正交矩阵（Orthogonal Matrix）"></a>正交矩阵（Orthogonal Matrix）</h3><ol><li><strong>定义</strong>：如果矩阵( A )的转置乘以( A )等于单位矩阵，即( A^TA &#x3D; AA^T &#x3D; I )，则称矩阵( A )为正交矩阵。</li><li><strong>性质</strong>：正交矩阵的列向量和行向量都是单位向量，并且两两正交（即内积为0）。</li><li><strong>应用</strong>：在几何变换中，正交矩阵用于表示保持长度和角度不变的变换，如旋转和反射。</li></ol><h3 id="正定矩阵（Positive-Definite-Matrix）"><a href="#正定矩阵（Positive-Definite-Matrix）" class="headerlink" title="正定矩阵（Positive Definite Matrix）"></a>正定矩阵（Positive Definite Matrix）</h3><ol><li><strong>定义</strong>：对于任意非零向量( \mathbf{x} )，如果( \mathbf{x}^T A \mathbf{x} &gt; 0 )，则称矩阵( A )为正定矩阵。</li><li><strong>性质</strong>：正定矩阵是对称矩阵的一种特殊类型，它的所有特征值都是正数；对角线上的元素也都是正数。</li><li><strong>应用</strong>：正定矩阵在优化问题中非常重要，因为它们保证了函数的局部最小值也是全局最小值；在统计学中，正定矩阵用于表示协方差矩阵。</li></ol><h3 id="其他相关矩阵"><a href="#其他相关矩阵" class="headerlink" title="其他相关矩阵"></a>其他相关矩阵</h3><ul><li><strong>半正定矩阵（Positive Semidefinite Matrix）</strong>：如果( \mathbf{x}^T A \mathbf{x} \geq 0 )对所有非零向量( \mathbf{x} )都成立，则矩阵( A )是半正定的。</li><li><strong>负定矩阵（Negative Definite Matrix）</strong>：如果( \mathbf{x}^T A \mathbf{x} &lt; 0 )对所有非零向量( \mathbf{x} )都成立，则矩阵( A )是负定的。</li><li><strong>不定矩阵（Indefinite Matrix）</strong>：如果矩阵既不是正定的也不是负定的，则称该矩阵为不定矩阵。</li></ul><p>理解这些矩阵类型的特性对于解决线性代数问题和应用矩阵理论在各个领域中非常重要。</p><h2 id="线性代数的应用"><a href="#线性代数的应用" class="headerlink" title="线性代数的应用"></a>线性代数的应用</h2><ul><li><strong>机器学习</strong>：在机器学习中，特征值和特征向量被用于主成分分析（PCA）等降维技术，以及谱聚类等聚类算法。</li><li><strong>深度学习</strong>：在深度学习的卷积神经网络中，卷积核可以看作是一种线性变换，其参数（权重）可以通过特征值分解来优化。</li><li><strong>物理学</strong>：在经典力学中，特征值问题与系统的固有频率相关，特征向量则与系统的振动模式相关。</li></ul><p>理解线性变换、特征值和特征向量对于深入学习数学、物理以及相关工程领域非常重要，它们提供了一种强大的工具来分析和理解复杂系统的行为。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库复习</title>
    <link href="/2024/06/06/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0/"/>
    <url>/2024/06/06/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ec65f6b673ee6b7247cbda4ea00d875472bcaf098cc10a102a5c50a6ba9f9fb3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>概率论与数理统计面试题</title>
    <link href="/2024/06/05/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2024/06/05/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h2><h3 id="概率论和数理统计的区别与联系"><a href="#概率论和数理统计的区别与联系" class="headerlink" title="概率论和数理统计的区别与联系"></a>概率论和数理统计的区别与联系</h3><p><strong>通过中心极限定理和大数定律结合在一起的</strong></p><ul><li>概率论：更数学，从已知形式或某些参数的 分布 &#x2F; 随机变量入手，推断出另一者的性质，比如 已知分布形式 求期望方差，已知随机变量参数 估计分布期望方差（大数定律 中心极限定理 这是数理统计的基础），已知事件间关系建模 求概率（全概率公式 贝叶斯公式）。</li><li>数理统计：更偏应用，基础是概率论，是概率论的应用，从实际出发，从采样出发，主要内容有参数估计、假设检验等。</li><li>知和用的关系。一个是发现规律，构造模型，证明定理。一个是选择模型，调整模型，应用模型。</li></ul><h3 id="概率密度函数"><a href="#概率密度函数" class="headerlink" title="概率密度函数"></a>概率密度函数</h3><p><strong>连续型随机变量，落在一段区间的概率 &#x2F; 区间长度 取极限。</strong></p><p>概率密度函数是连续随机变量分布的描述方式。连续随机变量的取值范围是无限的，因此不能简单地计算每个具体值的概率，而是需要一个函数来描述在任意一点上随机变量取值的概率密度。</p><p><strong>概率密度函数的性质</strong></p><ol><li><strong>非负性</strong>：概率密度函数的值在定义域内必须非负。</li><li><strong>归一性</strong>：概率密度函数在整个定义域上的积分等于1，表示随机变量在整个值域内取值的概率之和为100%。</li><li><strong>概率计算</strong>：随机变量在某个区间取值的概率可以通过概率密度函数在该区间上的积分来计算。</li><li><strong>期望值（均值）</strong>：连续随机变量的期望值可以通过概率密度函数计算得到：<br>[ E(X) &#x3D; \int_{-\infty}^{\infty} x \cdot f(x) , dx ]</li><li><strong>方差</strong>：连续随机变量的方差也可以通过概率密度函数来计算：<br>[ \text{Var}(X) &#x3D; E[(X - E(X))^2] &#x3D; \int_{-\infty}^{\infty} (x - E(X))^2 \cdot f(x) , dx ]</li><li><strong>累积分布函数（CDF）</strong>：连续随机变量的累积分布函数是概率密度函数的积分：<br>[ F(x) &#x3D; P(X \leq x) &#x3D; \int_{-\infty}^{x} f(t) , dt ]</li></ol><h3 id="条件概率分布、联合概率分布、边缘概率分布"><a href="#条件概率分布、联合概率分布、边缘概率分布" class="headerlink" title="条件概率分布、联合概率分布、边缘概率分布"></a>条件概率分布、联合概率分布、边缘概率分布</h3><p>条件概率：B 发生的情况下 A 发生的概率。<br>联合概率：几个事件同时发生的概率<br>边缘概率：某个事件单独发生的概率，仅与单个随机变量有关的概率，剩下维度按分布求期望。<br>能否直接由边缘分布函数求得联合分布函数：两随机变量不相互独立 则不行</p><p><strong>条件概率分布</strong><br>条件概率分布是指在某个事件已经发生的条件下，另一个事件发生的概率分布。条件概率分布通常用条件概率密度函数（连续变量）或条件概率质量函数（离散变量）来描述。</p><p>对于连续随机变量 ( X ) 和 ( Y )，条件概率密度函数 ( f_{X|Y}(x|y) ) 定义为：<br>[ f_{X|Y}(x|y) &#x3D; \frac{f_{X,Y}(x,y)}{f_Y(y)} ]<br>其中：</p><ul><li>( f_{X,Y}(x,y) ) 是 ( X ) 和 ( Y ) 的联合概率密度函数。</li><li>( f_Y(y) ) 是 ( Y ) 的边缘概率密度函数。</li></ul><p>对于离散随机变量，条件概率质量函数 ( P(X &#x3D; x | Y &#x3D; y) ) 同样定义为：<br>[ P(X &#x3D; x | Y &#x3D; y) &#x3D; \frac{P(X &#x3D; x, Y &#x3D; y)}{P(Y &#x3D; y)} ]</p><p><strong>联合概率分布</strong><br>联合概率分布描述了两个或多个随机变量共同取特定值的概率。对于连续随机变量，联合概率密度函数 ( f_{X,Y}(x,y) ) 描述了 ( X ) 和 ( Y ) 同时取值 ( x ) 和 ( y ) 的概率密度。对于离散随机变量，联合概率质量函数 ( P(X &#x3D; x, Y &#x3D; y) ) 描述了 ( X ) 和 ( Y ) 同时取值 ( x ) 和 ( y ) 的概率。</p><p><strong>边缘概率分布</strong><br>边缘概率分布是指在多个随机变量的联合分布中，通过求和或积分，得到的单个随机变量的概率分布。它表示了忽略其他变量的情况下，一个随机变量的概率分布。</p><p>对于连续随机变量 ( X ) 和 ( Y )，( X ) 的边缘概率密度函数 ( f_X(x) ) 可以通过对 ( Y ) 的所有可能取值积分 ( X ) 和 ( Y ) 的联合概率密度函数来得到：<br>[ f_X(x) &#x3D; \int_{-\infty}^{\infty} f_{X,Y}(x,y) , dy ]</p><p>对于离散随机变量，( X ) 的边缘概率质量函数 ( P(X &#x3D; x) ) 可以通过对 ( Y ) 的所有可能取值求和 ( X ) 和 ( Y ) 的联合概率质量函数来得到：<br>[ P(X &#x3D; x) &#x3D; \sum_{y} P(X &#x3D; x, Y &#x3D; y) ]</p><h3 id="什么是先验概率和后验概率"><a href="#什么是先验概率和后验概率" class="headerlink" title="什么是先验概率和后验概率"></a>什么是先验概率和后验概率</h3><p><strong>先验概率：</strong></p><p>事情未发生，只根据以往数据统计，分析事情发生的可能性，即先验概率。</p><p><strong>后验概率（贝叶斯公式）：</strong></p><p>事情已发生，已有结果，求引起这事发生的因素的可能性，由果求因，即后验概率。</p><p><strong>后验概率和先验概率的关系：</strong></p><p>后验概率的计算，是以先验概率为前提条件的。如果只知道事情结果，而不知道先验概率，是无法计算后验概率的。</p><h3 id="贝叶斯公式是什么，有什么应用"><a href="#贝叶斯公式是什么，有什么应用" class="headerlink" title="贝叶斯公式是什么，有什么应用"></a>贝叶斯公式是什么，有什么应用</h3><p>贝叶斯公式描述了两个<strong>条件概率之间的关系</strong><br>即在已知某个事件B发生的条件下，事件A发生的概率 与 在已知事件A发生的条件下，事件B发生的概率之间的关系。<br>应用：通过发生的事情，反推环境是 xx 因素的概率（原因推结果）</p><ol><li>机器学习：在机器学习中，贝叶斯方法被用于分类、聚类和预测。<br>贝叶斯分类器利用 <strong>先验概率</strong>和<strong>似然度</strong> 来 计算新实例的<strong>后验概率</strong>。</li></ol><p>贝叶斯分类器是一种统计分类方法，它使用贝叶斯定理来结合先验知识（先验概率）和新观测到的数据（似然度），从而计算出新实例的后验概率，并据此做出分类决策。以下是贝叶斯分类器如何工作的详细解释：</p><p><strong>先验概率（Prior Probability）</strong><br>先验概率是指在没有考虑新证据之前，我们对某个事件发生的概率评估。在分类问题中，先验概率通常是指各类别在数据集中出现的频率。例如，如果我们正在处理垃圾邮件分类问题，先验概率可能是垃圾邮件和非垃圾邮件在训练数据集中的比例。</p><p><strong>似然度（Likelihood）</strong><br>似然度是指在某个假设下，观测数据出现的概率。在贝叶斯分类器中，似然度是指给定类别条件下，实例特征出现的概率。例如，对于一封邮件，似然度可以是邮件中包含特定单词的概率，假设这些单词只在垃圾邮件中出现。</p><p><strong>后验概率（Posterior Probability）</strong><br>后验概率是在考虑了新证据之后，对事件发生概率的重新评估。在贝叶斯分类器中，后验概率是给定实例特征条件下，该实例属于某个类别的概率。贝叶斯定理提供了一种计算后验概率的方法：</p><p>[ P(C_k|X) &#x3D; \frac{P(X|C_k) \cdot P(C_k)}{P(X)} ]</p><p>其中：</p><ul><li>( P(C_k|X) ) 是后验概率，即给定特征集 ( X ) 的条件下，实例属于类别 ( C_k ) 的概率。</li><li>( P(X|C_k) ) 是似然度，即在类别 ( C_k ) 发生的条件下，观测到特征集 ( X ) 的概率。</li><li>( P(C_k) ) 是先验概率，即类别 ( C_k ) 的初始概率。</li><li>( P(X) ) 是边缘概率，即不考虑类别标签，观测到特征集 ( X ) 的概率，它可以通过对所有类别的似然度和先验概率乘积求和得到。</li></ul><p><strong>分类决策</strong><br>贝叶斯分类器根据后验概率来做出分类决策。具体来说，对于一个新的实例，分类器会计算该实例属于每个可能类别的后验概率，然后选择具有最高后验概率的类别作为预测结果。</p><p>贝叶斯分类器的优势在于其简单性和解释性，它可以很容易地结合领域知识（通过先验概率）和数据（通过似然度）。此外，贝叶斯分类器在处理大量特征时特别有效，尤其是在特征之间存在不确定性时。</p><ol><li>决策理论：贝叶斯决策理论通过考虑不确定性和风险来帮助做出最优决策。</li></ol><h3 id="大数定律（切比雪夫，伯努利，辛钦）"><a href="#大数定律（切比雪夫，伯努利，辛钦）" class="headerlink" title="大数定律（切比雪夫，伯努利，辛钦）"></a>大数定律（切比雪夫，伯努利，辛钦）</h3><p>大数定律是概率论中描述随机变量序列部分和行为的一组定理。它们指出，<strong>当样本数量足够大时，样本均值会趋近于总体均值</strong></p><p>当样本数据无限大时，（形式 lim n→∞ P &#x3D; 1）</p><p><strong>1. 切比雪夫大数定律</strong></p><ul><li>样本均值 → 总体均值</li><li>条件为独立；方差有限大</li><li>它提供了一个关于样本均值偏离总体均值的概率的界限</li><li>样本均值的分布会趋近于一个以总体均值为期望值的正态分布</li><li><strong>切比雪夫不等式</strong>给出了随机变量与其期望值之间的<strong>偏离程度的一个上界</strong></li></ul><p><strong>2. 伯努利大数定律</strong></p><ul><li>事件 A 发生的频率 → 概率</li><li>伯努利实验</li></ul><p><strong>3. 辛钦大数定律</strong></p><ul><li>样本均值→ 数学期望</li><li>条件为期望存在，独立同分布</li><li>样本均值几乎必然收敛到某个常数</li></ul><p><strong>大数定律应用</strong>：多次采样平均减小误差。</p><ol><li><p>参数估计的稳定性：<br>大数定律保证了随着样本数量的增加，样本均值会越来越接近总体均值。在机器学习中，这意味着当我们有<strong>足够多的训练数据时，模型参数的估计（例如，权重和偏置）会趋于稳定，减少估计误差。</strong></p></li><li><p>模型泛化能力的提高：<br>在深度学习中，大量的训练数据可以帮助模型学习到数据的普遍特征，而不是仅仅记住训练样本。大数定律表明，<strong>随着训练样本数量的增加，模型的预测误差会趋于一个常数，这有助于提高模型的泛化能力。</strong></p></li><li><p>随机梯度下降（SGD）的收敛性：<br>深度学习中常用的优化算法之一是随机梯度下降。大数定律为SGD提供了理论基础，<strong>表明随着迭代次数的增加，梯度的估计会越来越准确，从而有助于算法收敛到全局或局部最优解。</strong></p></li></ol><h3 id="中心极限定理"><a href="#中心极限定理" class="headerlink" title="中心极限定理"></a>中心极限定理</h3><ul><li><p>当样本量 n 逐渐趋于无穷大时，n 个抽样样本的均值的频数，逐渐趋于正态分布 N(μ, σ²&#x2F;n)。原总体的分布不做任何要求。</p></li><li><p>应用：1. 样本平均值 → 总体均值 &#x2F; 期望，2. 样本方差 → 估计总体方差。</p></li><li><p>即使原始随机变量不服从正态分布，只要它们是独立同分布的，并且具有有限的期望值和方差，它们的标准化和也会趋近于正态分布。</p></li></ul><h3 id="大数定律和中心极限定理的区别"><a href="#大数定律和中心极限定理的区别" class="headerlink" title="大数定律和中心极限定理的区别"></a>大数定律和中心极限定理的区别</h3><p>中心极限定理（Central Limit Theorem, CLT）和大数定理（Law of Large Numbers, LLN）是统计学中的两个基本概念，它们都描述了随机变量的某些性质，但它们关注的点和应用场景有所不同。</p><p><strong>大数定理</strong><br>大数定理主要关注的是随机变量的样本均值的长期稳定性。它描述了当样本量足够大时，样本均值的分布会趋近于一个固定的值，即总体均值。</p><p><strong>中心极限定理</strong><br>中心极限定理关注的是样本均值的分布形状，而不是其稳定性。无论原始总体分布如何，只要样本量足够大，样本均值的分布将趋近于正态分布。</p><p><strong>区别</strong></p><ol><li><p><strong>关注点不同</strong>：大数定理关注样本均值的稳定性，即其趋近于总体均值；中心极限定理关注样本均值分布的形状，即其趋近于正态分布。</p></li><li><p><strong>应用场景不同</strong>：大数定理常用于估计总体参数，而中心极限定理常用于统计推断，如置信区间的计算和假设检验。</p></li><li><p>大数定理指的是当样本数据量足够大的时候，样本均值会趋近于总体均值</p></li><li><p>中心极限定理指的是当原始样本数据是独立同分布的，当数据量足够多时，样本均值的分布是呈现一个正态分布</p></li></ol><h3 id="最大似然估计："><a href="#最大似然估计：" class="headerlink" title="最大似然估计："></a>最大似然估计：</h3><p>最大似然估计（MLE）是一种在已知观测数据下估计概率模型参数的方法。</p><p>它基于这样的思想：<strong>最有可能产生观测数据的参数值应该是使这些数据出现概率最大的参数值。</strong></p><p>假设我们有一个概率模型，该模型由一组参数 ( \theta ) 定义，并且我们观测到了一个数据集 ( D &#x3D; {x_1, x_2, …, x_n} )。最大似然估计试图找到参数 ( \theta ) 的值，使得数据集 ( D ) 的概率最大。</p><ul><li>概率：结果没有产生之前，根据环境参数，预测某件事情发生的可能性；</li><li>似然：在确定的结果下，去推测产生这个结果的可能环境参数。</li><li>L(θ|x) &#x3D; P(x|θ)。既然已经观测到了这个现象，就取 让它出现概率最大 的环境参数值吧。</li></ul><p>最大似然估计被用于参数估计、模型选择、假设检验等许多问题</p><h3 id="全概率公式："><a href="#全概率公式：" class="headerlink" title="全概率公式："></a>全概率公式：</h3><ul><li>样本空间 ( S )，其可以被划分成事件 A1，A2，…构成一个完备事件组（互斥且 Σ概率&#x3D;1），如果B 是 ( S )中的任意一个事件，那么 P(B) &#x3D; Σ P(B|Ai) P(Ai)。</li></ul><p>全概率公式提供了一种计算随机事件概率的方法</p><h3 id="贝叶斯公式，应用："><a href="#贝叶斯公式，应用：" class="headerlink" title="贝叶斯公式，应用："></a>贝叶斯公式，应用：</h3><ul><li>已知 B 求 A 的概率，等于 （AB 都发生概率） &#x2F; （B 发生的概率）。</li><li>应用：通过发生的事情，反推环境是 xx 因素的概率。</li></ul><h3 id="期望、方差、协方差、相关系数"><a href="#期望、方差、协方差、相关系数" class="headerlink" title="期望、方差、协方差、相关系数"></a>期望、方差、协方差、相关系数</h3><p><strong>1. 期望</strong><br>期望（E(X)）是随机变量的平均值</p><p><strong>2. 方差</strong><br>方差（D(X)）是随机变量与其期望值偏差的平方的平均值。它衡量随机变量的离散程度</p><p><strong>3. 协方差</strong><br>协方差是两个随机变量联合变化趋势的度量，表示为 ( \text{Cov}(X, Y) )。如果两个变量的增减趋势一致，协方差为正；如果一个变量增加时另一个变量减少，协方差为负。</p><p>协方差&#x2F;相关系数 为0 ，代表两个变量不相关<br>独立一定不相关，不相关不一定独立</p><p>做特征转换后，新的特征需要满足彼此不相关，体现为新特征的协方差矩阵要为一个对角矩阵</p><p><strong>4. 相关系数</strong><br>相关系数是协方差的标准化形式，用于度量两个变量之间的线性关系强度和方向。最常用的相关系数是皮尔逊相关系数，表示为 ( \rho_{X,Y} ) 或 ( r )，定义为：<br>[ \rho_{X,Y} &#x3D; \frac{\text{Cov}(X, Y)}{\sigma_X \sigma_Y} ]</p><p>在概率论和统计学中，期望、方差、协方差和相关系数是描述随机变量及其分布特征的基本概念。</p><h3 id="参数估计：无偏性、有效性、相合性"><a href="#参数估计：无偏性、有效性、相合性" class="headerlink" title="参数估计：无偏性、有效性、相合性"></a>参数估计：无偏性、有效性、相合性</h3><h3 id="离散随机变量分布"><a href="#离散随机变量分布" class="headerlink" title="离散随机变量分布"></a>离散随机变量分布</h3><p>伯努利分布、二项分布、泊松分布、超几何分布</p><p><img src="/../../img/%E7%A6%BB%E6%95%A3%E5%88%86%E5%B8%83.png"></p><h3 id="正态分布有什么性质"><a href="#正态分布有什么性质" class="headerlink" title="正态分布有什么性质"></a>正态分布有什么性质</h3><ol><li><p>对称性：正态分布是概率密度函数关于其均值μ的对称分布，即在平均值两侧呈镜像对称。</p></li><li><p>唯一峰值：正态分布的概率密度函数呈现单峰形状，只有一个最高峰值。</p></li><li><p>分布范围无界：正态分布的取值范围是负无穷到正无穷，没有明确的上下界限。</p></li><li><p>标准差决定形状：正态分布的形状由其标准差σ决定。较小的标准差会使曲线更加陡峭，较大的标准差会使曲线更加平坦。</p></li><li><p>68-95-99.7 规则：在正态分布中，约有68%的观测值落在均值的一个标准差范围内（( \mu ) - ( \sigma )），约有95%的观测值落在两个标准差范围内，约有99.7%的观测值落在三个标准差范围内。</p></li></ol><p>其中：</p><ul><li>( x ) 是随机变量。</li><li>( \mu ) 是分布的均值（或数学期望）。</li><li>( \sigma^2 ) 是分布的方差。</li><li>( \sigma ) 是标准差。</li></ul><p>正态分布的概率密度函数图像呈对称的钟形曲线，均值( \mu )决定了曲线的中心位置，标准差( \sigma )决定了曲线的宽度。</p><p><strong>标准正态分布</strong>：当( \mu &#x3D; 0 )且( \sigma &#x3D; 1 )时，正态分布称为标准正态分布。其概率密度函数为：</p><p>[<br>f(x) &#x3D; \frac{1}{\sqrt{2\pi}} e^{-\frac{x^2}{2}}<br>]</p><ol start="6"><li>中心极限定理：多个随机变量的总和（或平均值）趋向于正态分布，即使原始随机变量不满足正态分布，这是中心极限定理的重要推论。</li></ol><h2 id="P问题、NP问题以及NP完全问题"><a href="#P问题、NP问题以及NP完全问题" class="headerlink" title="P问题、NP问题以及NP完全问题"></a>P问题、NP问题以及NP完全问题</h2><p>P问题是可以在多项式时间内解决的问题</p><p>NP问题是可以在多项式时间内<strong>验证</strong>解的正确性的问题</p><p>NP完全问题是一类特殊的NP问题，没有已知的高效解决算法，并且可以在多项式时间内归约到任何其他的NP问题</p><h2 id="矩阵分解"><a href="#矩阵分解" class="headerlink" title="矩阵分解"></a>矩阵分解</h2><p>矩阵分解是将一个矩阵表示为一些特定形式的矩阵乘积的过程。</p><p>矩阵分解的种类以及物理意义：</p><ul><li><p>LU分解：将矩阵分解为一个下三角矩阵和一个上三角矩阵的乘积。物理意义包括解线性方程组、计算矩阵的行列式和逆矩阵等。</p></li><li><p>QR分解：将矩阵分解为一个正交矩阵和一个上三角矩阵的乘积。物理意义包括最小二乘问题、矩阵的特征值计算等。</p></li><li><p>特征值分解：将矩阵分解为一个特征向量矩阵和一个对角矩阵的乘积。物理意义包括矩阵的幂、指数和对称矩阵的对角化等。</p></li><li><p>奇异值分解（SVD）：将矩阵分解为一个正交矩阵、一个对角矩阵和一个正交矩阵的乘积。物理意义包括降维、矩阵逼近和图像压缩等。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>保研专业课面试题库</title>
    <link href="/2024/06/05/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E4%BF%9D%E7%A0%94%E4%B8%93%E4%B8%9A%E8%AF%BE%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    <url>/2024/06/05/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E4%BF%9D%E7%A0%94%E4%B8%93%E4%B8%9A%E8%AF%BE%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b9d745ce5430034401e54bd8d7ceb8d8b19949c7f34bccb0ea71edfef8ded300">9ef5e081b4fe98a32076e025047ca199b8697f81cb35d436f11001bf982a82df1c35a3996ffa16c4fcd08799576700447be7fd463907e30c80b967e673ae80b43882bcb95cb3f6f354ca65cd1495e031b4a3abe7bbbbc4f02fabb8dd1937e8172251c681c585fcdfedb8d13d522a5de294e1f41b6a1b446136bb10e4199ec397317f7e1485e687171822ffde876fdbcb6c0991d8eca89709608aa682e4cfd69ae41902bc935cff52f02a33f06c3fa4405e6e62834d4e93565b0acc21d1f70c51153e95b4185a9b5dcb9c56502f9ce255d04aed5afe10f8267e7169373060311998e6fe23bc6e7f9d9642613e5f63afc1c0263d9d5545641409b2d554a5e513dd931bc6e71832b68e8486ba82b3d0c26cc092b7d89393b2805e7ced2e756fce66b28aad6a0692a3d69019e3740eae5cd8d6263d20c9c421b70171f4ed4593bdb05f7f4d739703c3bbe13430b7c02a357b11011c8a93902d926b34d90dc19f16384765538dfb34a457d348cdc10b51cb24ce04eeac9efaf9a0f1b752db0322a0203f43fff36cf766cffbe0836640a1d09f4777ca6747fd858d58424e93b63e8b19b4364b634637bdb0bfea0929d27006e0daacba15298f6187c9e8154930ae4c714f84af1bb86661477522bd24840154c2508c6687829dfa06e1d8334d309e309a9ef1d5ebcf0b08a970c59356d3f772c6235e1ff68f687d3b917b5cd389c9c5ed</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>概率论与数理统计</title>
    <link href="/2024/06/04/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    <url>/2024/06/04/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h1><h2 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h2><h3 id="概率计算公式"><a href="#概率计算公式" class="headerlink" title="概率计算公式"></a>概率计算公式</h3><p><strong>1. 加法公式</strong></p><p>加法公式用于计算两个事件<strong>至少有一个发生的概率</strong> ，即事件A或事件B发生的概率。</p><p>如果事件A和事件B不是互斥的，那么需要减去它们同时发生的概率，以避免重复计算：<br>[ P(A \cup B) &#x3D; P(A) + P(B) - P(A \cap B) ]</p><p>如果事件A和事件B是<strong>互斥的（即它们不能同时发生）</strong>，那么加法公式可以表示为：<br>[ P(A \cup B) &#x3D; P(A) + P(B) ]</p><p>其中：</p><ul><li>( P(A \cup B) ) 是事件A或事件B发生的概率。</li><li>( P(A) ) 是事件A发生的概率。</li><li>( P(B) ) 是事件B发生的概率。</li><li>( P(A \cap B) ) 是事件A和事件B同时发生的概率。</li></ul><p><strong>2. 乘法公式</strong></p><p>乘法公式用于计算两个事件<strong>同时发生的概率</strong>，即事件A和事件B的联合概率。</p><p>如果事件A和事件B不是独立的，那么需要使用条件概率来计算它们的联合概率：<br>[ P(A \cap B) &#x3D; P(A) \times P(B | A) ]<br>或者<br>[ P(A \cap B) &#x3D; P(B) \times P(A | B) ]</p><p>如果事件<strong>A和B是独立的</strong>，那么它们的联合概率可以通过它们各自的概率相乘得到：<br>[ P(A \cap B) &#x3D; P(A) \times P(B) ]</p><p>其中：</p><ul><li>( P(A \cap B) ) 是事件A和事件B同时发生的概率。</li><li>( P(B | A) ) 是在事件A发生的条件下事件B发生的概率，即条件概率。</li><li>( P(A | B) ) 是在事件B发生的条件下事件A发生的概率。</li></ul><p><strong>3. 全概率公式（原因推结果）</strong></p><p>全概率公式用于计算一个事件的结果，当这个事件是由多个互斥原因引起的。如果事件A是由多个互斥的子事件B1, B2, …, Bn引起的，那么事件A发生的概率可以通过以下公式计算：<br>[ P(A) &#x3D; P(A|B_1)P(B_1) + P(A|B_2)P(B_2) + \ldots + P(A|B_n)P(B_n) ]<br>其中：</p><ul><li>( P(A) ) 是事件A发生的概率。</li><li>( P(B_i) ) 是第i个原因发生的概率。</li><li>( P(A|B_i) ) 是在第i个原因发生的条件下，事件A发生的概率。</li></ul><p>全概率公式允许我们通过已知的各个原因的概率和它们导致结果的条件概率，来计算结果发生的概率</p><p><strong>4. 贝叶斯公式（结果推原因）</strong></p><p>贝叶斯公式是一种逆概率计算方法，它允许我们根据已知的结果来推断原因的概率。贝叶斯公式可以表示为：<br>[ P(B_i|A) &#x3D; \frac{P(A|B_i)P(B_i)}{P(A)} ]<br>其中：</p><ul><li>( P(B_i|A) ) 是在事件A发生的条件下，原因Bi发生的概率。</li><li>( P(A|B_i) ) 是在原因Bi发生的条件下，事件A发生的概率。</li><li>( P(B_i) ) 是原因Bi发生的概率。</li><li>( P(A) ) 是事件A发生的概率。</li></ul><p>贝叶斯公式的核心思想是，通过已知的事件A发生的条件概率和原因的概率，以及事件A发生的概率，来计算在事件A发生的情况下，各个原因发生的概率。</p><p>这两个公式在处理不确定性和进行决策时非常有用，特别是在我们只有部分信息的情况下。例如，在医学诊断、风险评估、机器学习中的分类问题等领域，全概率公式和贝叶斯公式都发挥着重要作用。</p><h3 id="事件独立性"><a href="#事件独立性" class="headerlink" title="事件独立性"></a>事件独立性</h3><h2 id="分布"><a href="#分布" class="headerlink" title="分布"></a>分布</h2><h3 id="离散分布"><a href="#离散分布" class="headerlink" title="离散分布"></a>离散分布</h3><p><img src="/../../img/%E7%A6%BB%E6%95%A3%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83.png"></p><p><strong>1. 伯努利分布（0-1分布）</strong></p><p>描述了只有两种可能结果（成功和失败，通常用1和0表示）的单次随机试验。</p><p><strong>2. 二项分布（n重 伯努利分布）</strong></p><p>描述了固定次数 𝑛的独立重复的伯努利试验中成功的次数。</p><p><strong>3. 几何分布</strong></p><p>描述了在一系列独立的伯努利试验中，得到第一次成功所需的试验次数。<br>意义：n 次伯努利试验中前 k-1 次皆失败，第 k 次成功的概率。</p><p><strong>4. 泊松分布（0-1分布）</strong></p><p>二项分布的极限。期望和方差均为λ。<br>当二项分布 n 很大 p 很小时，泊松分布可作为二项分布的近似，其中 λ 为 np。</p><p>参数 λ 是单位时间(或单位面积)内随机事件的平均发生次数，满足线性相加（2 倍单位时间内…服从 2λ分布）。</p><p>泊松分布适合于描述单位时间内随机事件发生的次数</p><h3 id="连续分布"><a href="#连续分布" class="headerlink" title="连续分布"></a>连续分布</h3><p>概率论与数理统计中的均匀分布、指数分布和正态分布是三种非常重要的连续概率分布，它们在不同的领域和情境下有着广泛的应用。</p><p><strong>均匀分布（Uniform Distribution）</strong><br>均匀分布是一种最简单的连续概率分布，其中随机变量在某个区间内取任何值的概率是相同的。如果随机变量 ( X ) 在区间 ( [a, b] ) 上服从均匀分布，其概率密度函数（PDF）为：<br>[ f(x) &#x3D; \begin{cases}<br>\frac{1}{b - a} &amp; \text{for } a \leq x \leq b, \<br>0 &amp; \text{otherwise.}<br>\end{cases} ]</p><p>均匀分布的特点：</p><ul><li>概率密度在区间 ( [a, b] ) 上是恒定的。</li><li>区间外的概率密度为0。</li><li>随机变量的期望值 ( E(X) ) 为 ( \frac{a + b}{2} )。</li><li>方差 ( \text{Var}(X) ) 为 ( \frac{(b - a)^2}{12} )。</li></ul><p><strong>指数分布（Exponential Distribution）</strong><br>指数分布是一种单参数的连续概率分布，常用于描述独立随机事件发生的时间间隔。如果随机变量 ( X ) 服从参数为 ( \lambda ) 的指数分布，其概率密度函数为：<br>[ f(x) &#x3D; \lambda e^{-\lambda x} \quad \text{for } x \geq 0 ]<br>其中 ( \lambda &gt; 0 )。</p><p>指数分布的特点：</p><ul><li>它没有记忆性，即指数分布的随机变量的持续时间不依赖于已经经过的时间。</li><li>期望值 ( E(X) ) 为 ( \frac{1}{\lambda} )。</li><li>方差 ( \text{Var}(X) ) 为 ( \frac{1}{\lambda^2} )。</li></ul><p><strong>正态分布（Normal Distribution）</strong><br>正态分布，也称为高斯分布，是连续概率分布中最重要的一种。它在自然科学和社会科学的许多领域中都有应用。如果随机变量 ( X ) 服从均值为 ( \mu )，方差为 ( \sigma^2 ) 的正态分布，其概率密度函数为：<br>[ f(x) &#x3D; \frac{1}{\sigma\sqrt{2\pi}} e^{-\frac{(x - \mu)^2}{2\sigma^2}} ]</p><p>正态分布的特点：</p><ul><li>它是对称的，并且以均值 ( \mu ) 为中心。</li><li>大部分数据集中在均值附近，数据的分布呈现钟形曲线。</li><li>期望值 ( E(X) )、中位数和众数都等于 ( \mu )。</li><li>方差 ( \text{Var}(X) ) 为 ( \sigma^2 )。</li><li>68-95-99.7 规则（经验法则）表明，在正态分布中，约68%的数据落在 ( \mu \pm \sigma ) 区间内，约95%落在 ( \mu \pm 2\sigma ) 区间内，约99.7%落在 ( \mu \pm 3\sigma ) 区间内。</li></ul><p>这三种分布各自有其独特的性质和应用场景。均匀分布常用于描述在一定范围内等可能发生的事件；指数分布适用于描述泊松过程中事件之间的时间间隔；正态分布则因其优美的数学性质和中心极限定理，在统计推断和数据分析中扮演着核心角色。</p><h2 id="大数定律"><a href="#大数定律" class="headerlink" title="大数定律"></a>大数定律</h2><p>大数定律是概率论和数理统计中的一个基本概念，它描述了在一定条件下，<strong>随着样本量的增加，样本均值会越来越接近总体均值的性质。</strong> 大数定律保证了在大量重复实验中，随机变量的相对频率趋近于其概率。</p><h3 id="大数定律的两种形式"><a href="#大数定律的两种形式" class="headerlink" title="大数定律的两种形式"></a>大数定律的两种形式</h3><ol><li><strong>切比雪夫大数定律（Chebyshev’s Law of Large Numbers）</strong><br>切比雪夫大数定律是大数定律的一个较弱的形式，它适用于具有相同期望值和有限方差的随机变量序列。它指出，对于一列独立同分布（i.i.d.）的随机变量 ( X_1, X_2, \ldots )，如果它们的期望值 ( \mu ) 和方差 ( \sigma^2 ) 都存在，则样本均值 ( \overline{X}<em>n &#x3D; \frac{1}{n} \sum</em>{i&#x3D;1}^n X_i ) 会随着 ( n ) 的增加而趋近于 ( \mu )。具体来说，对于任意正数 ( \varepsilon &gt; 0 )，有：<br>[ P\left(|\overline{X}_n - \mu| \geq \varepsilon\right) \leq \frac{\sigma^2}{n \varepsilon^2} ]</li></ol><p><strong>1. 切比雪夫大数定律</strong><br>适用于<strong>独立同分布</strong>的随机变量序列</p><p>设 ( X_1, X_2, \ldots ) 是一列具有相同期望值 ( \mu ) 和有限方差 ( \sigma^2 ) 的独立随机变量。则对于任意 ( \varepsilon &gt; 0 )，当 ( n ) 趋于无穷大时，有：<br>[ P\left(|\bar{X}_n - \mu| \geq \varepsilon\right) \to 0 ]<br>其中，( \bar{X}_n ) 是样本均值，( n ) 是样本数量。</p><p><strong>2. 伯努利大数定律</strong><br>伯努利大数定律是切比雪夫大数定律的一个特例，<strong>适用于伯努利试验（即只有两种可能结果的独立试验）</strong> 定理表述如下：</p><p>设 ( X_1, X_2, \ldots ) 是一列独立同分布的伯努利随机变量，其成功概率为 ( p )。则当 ( n ) 趋于无穷大时，样本均值 ( \bar{X}<em>n ) 几乎几乎必然收敛于 ( p )，即：<br>[ P\left(\lim</em>{n \to \infty} \bar{X}_n &#x3D; p\right) &#x3D; 1 ]</p><p><strong>3. 辛钦大数定律</strong><br>设 ( X_1, X_2, \ldots ) 是一列独立随机变量，它们具有有限的期望值 ( \mu_i )（但 ( \mu_i ) 可以不同）。如果存在常数 ( C ) 使得对于所有的 ( i )，都有 ( |\mu_i| \leq C )，则样本均值 ( \bar{X}<em>n ) 几乎必然收敛于某个常数 ( \mu )，即：<br>[ P\left(\lim</em>{n \to \infty} \bar{X}_n &#x3D; \mu\right) &#x3D; 1 ]</p><ol start="2"><li><strong>中心极限定理（Central Limit Theorem, CLT）</strong><br>中心极限定理是大数定律的一个更强的形式，它说明了在适当的条件下，大量独立同分布的随机变量之和经过标准化后趋近于正态分布。无论原始随机变量本身服从何种分布，只要它们具有相同的期望值 ( \mu ) 和方差 ( \sigma^2 )，它们的样本均值的分布会随着样本量的增加而趋近于正态分布 ( N(\mu, \frac{\sigma^2}{n}) )。具体来说，对于任意 ( z ) 值，当 ( n ) 足够大时，有：<br>[ P\left(\frac{\overline{X}_n - \mu}{\sigma&#x2F;\sqrt{n}} \leq z\right) \approx \Phi(z) ]<br>其中，( \Phi(z) ) 是标准正态分布的累积分布函数。</li></ol><h3 id="大数定律在深度学习中的应用"><a href="#大数定律在深度学习中的应用" class="headerlink" title="大数定律在深度学习中的应用"></a>大数定律在深度学习中的应用</h3><ol><li><p>参数估计的稳定性：<br>大数定律保证了随着样本数量的增加，样本均值会越来越接近总体均值。在机器学习中，这意味着当我们有<strong>足够多的训练数据时，模型参数的估计（例如，权重和偏置）会趋于稳定，减少估计误差。</strong></p></li><li><p>模型泛化能力的提高：<br>在深度学习中，大量的训练数据可以帮助模型学习到数据的普遍特征，而不是仅仅记住训练样本。大数定律表明，<strong>随着训练样本数量的增加，模型的预测误差会趋于一个常数，这有助于提高模型的泛化能力。</strong></p></li><li><p>随机梯度下降（SGD）的收敛性：<br>深度学习中常用的优化算法之一是随机梯度下降。大数定律为SGD提供了理论基础，<strong>表明随着迭代次数的增加，梯度的估计会越来越准确，从而有助于算法收敛到全局或局部最优解。</strong></p></li><li><p>正则化技术的合理性：<br>为了防止模型过拟合，机器学习中经常使用L1或L2正则化。大数定律支持了这些正则化方法的有效性，因为它表明在大样本条件下，正则化项可以帮助我们更好地估计模型参数。</p></li><li><p>集成学习中的投票机制：<br>在集成学习方法中，多个模型的预测结果会通过投票或平均等方式结合起来。大数定律在这里确保了，随着集成中模型数量的增加，最终的预测结果会越来越可靠。</p></li></ol><h2 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h2><h3 id="概率论和数理统计的区别与联系"><a href="#概率论和数理统计的区别与联系" class="headerlink" title="概率论和数理统计的区别与联系"></a>概率论和数理统计的区别与联系</h3><ul><li>概率论：更数学，从已知形式或某些参数的 分布 &#x2F; 随机变量入手，推断出另一者的性质，比如 已知分布形式 求期望方差，已知随机变量参数 估计分布期望方差（大数定律 中心极限定理 这是数理统计的基础），已知事件间关系建模 求概率（全概率公式 贝叶斯公式）。</li><li>数理统计：更偏应用，基础是概率论，是概率论的应用，从实际出发，从采样出发，主要内容有参数估计、假设检验等。</li><li>知和用的关系。一个是发现规律，构造模型，证明定理。一个是选择模型，调整模型，应用模型。</li></ul><h3 id="概率密度函数"><a href="#概率密度函数" class="headerlink" title="概率密度函数"></a>概率密度函数</h3><p>概率密度函数是连续随机变量分布的描述方式。连续随机变量的取值范围是无限的，因此不能简单地计算每个具体值的概率，而是需要一个函数来描述在任意一点上随机变量取值的概率密度。</p><p>概率密度函数（Probability Density Function，简称PDF）是连续随机变量分布的描述方式。与离散随机变量使用概率质量函数（Probability Mass Function，简称PMF）不同，连续随机变量的取值范围是无限的，因此不能简单地计算每个具体值的概率，而是需要一个函数来描述在任意一点上随机变量取值的概率密度。</p><p><strong>概率密度函数的定义</strong><br>对于连续随机变量 ( X )，其概率密度函数 ( f(x) ) 定义如下：</p><ul><li>对于任意的 ( x )，( f(x) \geq 0 )（非负性）。</li><li>随机变量 ( X ) 在区间 ( [a, b] ) 内取值的概率可以表示为该区间下概率密度函数的积分：( P(a \leq X \leq b) &#x3D; \int_{a}^{b} f(x) , dx )。</li><li>随机变量 ( X ) 取某个具体值 ( x_0 ) 的概率为零，即 ( P(X &#x3D; x_0) &#x3D; 0 )。</li><li>随机变量 ( X ) 在整个值域内取值的概率为1，即 ( P(-\infty &lt; X &lt; \infty) &#x3D; \int_{-\infty}^{\infty} f(x) , dx &#x3D; 1 )（归一性）。</li></ul><p><strong>概率密度函数的性质</strong></p><ol><li><strong>非负性</strong>：概率密度函数的值在定义域内必须非负。</li><li><strong>归一性</strong>：概率密度函数在整个定义域上的积分等于1，表示随机变量在整个值域内取值的概率之和为100%。</li><li><strong>概率计算</strong>：随机变量在某个区间取值的概率可以通过概率密度函数在该区间上的积分来计算。</li><li><strong>期望值（均值）</strong>：连续随机变量的期望值可以通过概率密度函数计算得到：<br>[ E(X) &#x3D; \int_{-\infty}^{\infty} x \cdot f(x) , dx ]</li><li><strong>方差</strong>：连续随机变量的方差也可以通过概率密度函数来计算：<br>[ \text{Var}(X) &#x3D; E[(X - E(X))^2] &#x3D; \int_{-\infty}^{\infty} (x - E(X))^2 \cdot f(x) , dx ]</li><li><strong>累积分布函数（CDF）</strong>：连续随机变量的累积分布函数是概率密度函数的积分：<br>[ F(x) &#x3D; P(X \leq x) &#x3D; \int_{-\infty}^{x} f(t) , dt ]</li></ol><p>概率密度函数是连续概率分布的核心，它在统计学、概率论和相关领域中有着广泛的应用。通过概率密度函数，我们可以对连续随机变量的行为进行详细的分析和预测。</p><h3 id="条件概率分布、联合概率分布、边缘概率分布"><a href="#条件概率分布、联合概率分布、边缘概率分布" class="headerlink" title="条件概率分布、联合概率分布、边缘概率分布"></a>条件概率分布、联合概率分布、边缘概率分布</h3><p>条件概率：B 发生的情况下 A 发生的概率。<br>联合概率：几个事件同时发生的概率<br>边缘概率：某个事件单独发生的概率，仅与单个随机变量有关的概率，剩下维度按分布求期望。<br>能否直接由边缘分布函数求得联合分布函数：两随机变量不相互独立 则不行</p><p><strong>条件概率分布</strong><br>条件概率分布是指在某个事件已经发生的条件下，另一个事件发生的概率分布。条件概率分布通常用条件概率密度函数（连续变量）或条件概率质量函数（离散变量）来描述。</p><p>对于连续随机变量 ( X ) 和 ( Y )，条件概率密度函数 ( f_{X|Y}(x|y) ) 定义为：<br>[ f_{X|Y}(x|y) &#x3D; \frac{f_{X,Y}(x,y)}{f_Y(y)} ]<br>其中：</p><ul><li>( f_{X,Y}(x,y) ) 是 ( X ) 和 ( Y ) 的联合概率密度函数。</li><li>( f_Y(y) ) 是 ( Y ) 的边缘概率密度函数。</li></ul><p>对于离散随机变量，条件概率质量函数 ( P(X &#x3D; x | Y &#x3D; y) ) 同样定义为：<br>[ P(X &#x3D; x | Y &#x3D; y) &#x3D; \frac{P(X &#x3D; x, Y &#x3D; y)}{P(Y &#x3D; y)} ]</p><p><strong>联合概率分布</strong><br>联合概率分布描述了两个或多个随机变量共同取特定值的概率。对于连续随机变量，联合概率密度函数 ( f_{X,Y}(x,y) ) 描述了 ( X ) 和 ( Y ) 同时取值 ( x ) 和 ( y ) 的概率密度。对于离散随机变量，联合概率质量函数 ( P(X &#x3D; x, Y &#x3D; y) ) 描述了 ( X ) 和 ( Y ) 同时取值 ( x ) 和 ( y ) 的概率。</p><p><strong>边缘概率分布</strong><br>边缘概率分布是指在多个随机变量的联合分布中，通过求和或积分，得到的单个随机变量的概率分布。它表示了忽略其他变量的情况下，一个随机变量的概率分布。</p><p>对于连续随机变量 ( X ) 和 ( Y )，( X ) 的边缘概率密度函数 ( f_X(x) ) 可以通过对 ( Y ) 的所有可能取值积分 ( X ) 和 ( Y ) 的联合概率密度函数来得到：<br>[ f_X(x) &#x3D; \int_{-\infty}^{\infty} f_{X,Y}(x,y) , dy ]</p><p>对于离散随机变量，( X ) 的边缘概率质量函数 ( P(X &#x3D; x) ) 可以通过对 ( Y ) 的所有可能取值求和 ( X ) 和 ( Y ) 的联合概率质量函数来得到：<br>[ P(X &#x3D; x) &#x3D; \sum_{y} P(X &#x3D; x, Y &#x3D; y) ]</p><h3 id="贝叶斯公式是什么，有什么应用"><a href="#贝叶斯公式是什么，有什么应用" class="headerlink" title="贝叶斯公式是什么，有什么应用"></a>贝叶斯公式是什么，有什么应用</h3><p>贝叶斯公式描述了两个<strong>条件概率之间的关系</strong><br>即在已知某个事件B发生的条件下，事件A发生的概率 与 在已知事件A发生的条件下，事件B发生的概率之间的关系。<br>应用：通过发生的事情，反推环境是 xx 因素的概率（原因推结果）</p><ol><li>机器学习：在机器学习中，贝叶斯方法被用于分类、聚类和预测。贝叶斯分类器利用<strong>先验概率</strong>和<strong>似然度</strong>来计算新实例的后验概率。</li></ol><p>贝叶斯分类器是一种统计分类方法，它使用贝叶斯定理来结合先验知识（先验概率）和新观测到的数据（似然度），从而计算出新实例的后验概率，并据此做出分类决策。以下是贝叶斯分类器如何工作的详细解释：</p><p><strong>先验概率（Prior Probability）</strong><br>先验概率是指在没有考虑新证据之前，我们对某个事件发生的概率评估。在分类问题中，先验概率通常是指各类别在数据集中出现的频率。例如，如果我们正在处理垃圾邮件分类问题，先验概率可能是垃圾邮件和非垃圾邮件在训练数据集中的比例。</p><p><strong>似然度（Likelihood）</strong><br>似然度是指在某个假设下，观测数据出现的概率。在贝叶斯分类器中，似然度是指给定类别条件下，实例特征出现的概率。例如，对于一封邮件，似然度可以是邮件中包含特定单词的概率，假设这些单词只在垃圾邮件中出现。</p><p><strong>后验概率（Posterior Probability）</strong><br>后验概率是在考虑了新证据之后，对事件发生概率的重新评估。在贝叶斯分类器中，后验概率是给定实例特征条件下，该实例属于某个类别的概率。贝叶斯定理提供了一种计算后验概率的方法：</p><p>[ P(C_k|X) &#x3D; \frac{P(X|C_k) \cdot P(C_k)}{P(X)} ]</p><p>其中：</p><ul><li>( P(C_k|X) ) 是后验概率，即给定特征集 ( X ) 的条件下，实例属于类别 ( C_k ) 的概率。</li><li>( P(X|C_k) ) 是似然度，即在类别 ( C_k ) 发生的条件下，观测到特征集 ( X ) 的概率。</li><li>( P(C_k) ) 是先验概率，即类别 ( C_k ) 的初始概率。</li><li>( P(X) ) 是边缘概率，即不考虑类别标签，观测到特征集 ( X ) 的概率，它可以通过对所有类别的似然度和先验概率乘积求和得到。</li></ul><p><strong>分类决策</strong><br>贝叶斯分类器根据后验概率来做出分类决策。具体来说，对于一个新的实例，分类器会计算该实例属于每个可能类别的后验概率，然后选择具有最高后验概率的类别作为预测结果。</p><p>贝叶斯分类器的优势在于其简单性和解释性，它可以很容易地结合领域知识（通过先验概率）和数据（通过似然度）。此外，贝叶斯分类器在处理大量特征时特别有效，尤其是在特征之间存在不确定性时。</p><ol start="2"><li>决策理论：贝叶斯决策理论通过考虑不确定性和风险来帮助做出最优决策。</li></ol><h3 id="大数定律（切比雪夫，伯努利，辛钦）"><a href="#大数定律（切比雪夫，伯努利，辛钦）" class="headerlink" title="大数定律（切比雪夫，伯努利，辛钦）"></a>大数定律（切比雪夫，伯努利，辛钦）</h3><p>大数定律是概率论中描述随机变量序列部分和行为的一组定理。它们指出，<strong>当样本数量足够大时，样本均值会趋近于总体均值</strong></p><p>当样本数据无限大时，（形式 lim n→∞ P &#x3D; 1）</p><p><strong>1. 切比雪夫大数定律</strong></p><ul><li>样本均值 → 总体均值</li><li>条件为独立同分布；方差有限大</li><li>它提供了一个关于样本均值偏离总体均值的概率的界限</li><li>样本均值的分布会趋近于一个以总体均值为期望值的正态分布</li></ul><p><strong>2. 伯努利大数定律</strong></p><ul><li>事件 A 发生的频率 → 概率</li><li>伯努利实验</li></ul><p><strong>3. 辛钦大数定律</strong></p><ul><li>样本均值→ 数学期望</li><li>条件为期望存在</li><li>样本均值几乎必然收敛到某个常数</li></ul><p><strong>大数定律应用</strong>：多次采样平均减小误差。</p><ol><li><p>参数估计的稳定性：<br>大数定律保证了随着样本数量的增加，样本均值会越来越接近总体均值。在机器学习中，这意味着当我们有<strong>足够多的训练数据时，模型参数的估计（例如，权重和偏置）会趋于稳定，减少估计误差。</strong></p></li><li><p>模型泛化能力的提高：<br>在深度学习中，大量的训练数据可以帮助模型学习到数据的普遍特征，而不是仅仅记住训练样本。大数定律表明，<strong>随着训练样本数量的增加，模型的预测误差会趋于一个常数，这有助于提高模型的泛化能力。</strong></p></li><li><p>随机梯度下降（SGD）的收敛性：<br>深度学习中常用的优化算法之一是随机梯度下降。大数定律为SGD提供了理论基础，<strong>表明随着迭代次数的增加，梯度的估计会越来越准确，从而有助于算法收敛到全局或局部最优解。</strong></p></li></ol><h3 id="期望、方差、协方差、相关系数"><a href="#期望、方差、协方差、相关系数" class="headerlink" title="期望、方差、协方差、相关系数"></a>期望、方差、协方差、相关系数</h3><p>在概率论和统计学中，期望、方差、协方差和相关系数是描述随机变量及其分布特征的基本概念。</p><h4 id="期望（Expected-Value）"><a href="#期望（Expected-Value）" class="headerlink" title="期望（Expected Value）"></a>期望（Expected Value）</h4><p>期望是随机变量的平均值，表示为 ( E(X) ) 或 ( \mu )。对于离散随机变量，期望定义为：<br>[ E(X) &#x3D; \sum_{i&#x3D;1}^{\infty} x_i P(X &#x3D; x_i) ]<br>对于连续随机变量，期望定义为：<br>[ E(X) &#x3D; \int_{-\infty}^{\infty} x f_X(x) , dx ]<br>其中，( x_i ) 是随机变量 ( X ) 可能取到的值，( P(X &#x3D; x_i) ) 是 ( X ) 取到 ( x_i ) 的概率，( f_X(x) ) 是 ( X ) 的概率密度函数。</p><h4 id="方差（Variance）"><a href="#方差（Variance）" class="headerlink" title="方差（Variance）"></a>方差（Variance）</h4><p>方差是随机变量与其期望值偏差的平方的平均值，表示为 ( \text{Var}(X) ) 或 ( \sigma^2 )。它衡量随机变量的离散程度。方差的定义为：<br>[ \text{Var}(X) &#x3D; E[(X - E(X))^2] &#x3D; \sum_{i&#x3D;1}^{\infty} (x_i - \mu)^2 P(X &#x3D; x_i) ]<br>对于连续随机变量：<br>[ \text{Var}(X) &#x3D; \int_{-\infty}^{\infty} (x - \mu)^2 f_X(x) , dx ]</p><h4 id="协方差（Covariance）"><a href="#协方差（Covariance）" class="headerlink" title="协方差（Covariance）"></a>协方差（Covariance）</h4><p>协方差是两个随机变量联合变化趋势的度量，表示为 ( \text{Cov}(X, Y) )。如果两个变量的增减趋势一致，协方差为正；如果一个变量增加时另一个变量减少，协方差为负。协方差的定义为：<br>[ \text{Cov}(X, Y) &#x3D; E[(X - E(X))(Y - E(Y))] ]<br>[ \text{Cov}(X, Y) &#x3D; \sum_{i&#x3D;1}^{\infty} \sum_{j&#x3D;1}^{\infty} (x_i - \mu_X)(y_j - \mu_Y) P(X &#x3D; x_i, Y &#x3D; y_j) ]<br>对于连续随机变量：<br>[ \text{Cov}(X, Y) &#x3D; \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} (x - \mu_X)(y - \mu_Y) f_{X,Y}(x, y) , dx , dy ]</p><h4 id="相关系数（Correlation-Coefficient）"><a href="#相关系数（Correlation-Coefficient）" class="headerlink" title="相关系数（Correlation Coefficient）"></a>相关系数（Correlation Coefficient）</h4><p>相关系数是协方差的标准化形式，用于度量两个变量之间的线性关系强度和方向。最常用的相关系数是皮尔逊相关系数，表示为 ( \rho_{X,Y} ) 或 ( r )，定义为：<br>[ \rho_{X,Y} &#x3D; \frac{\text{Cov}(X, Y)}{\sigma_X \sigma_Y} ]<br>其中，( \sigma_X ) 和 ( \sigma_Y ) 分别是 ( X ) 和 ( Y ) 的标准差。相关系数的取值范围在 -1 和 1 之间，其中 1 表示完全正相关，-1 表示完全负相关，0 表示没有线性相关。</p><p>这些统计量是理解和分析数据集的基础，它们在统计推断、风险评估、投资组合管理、机器学习等多种领域中都有重要应用。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2024/06/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2024/06/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; st; <span class="hljs-comment">//哈希表统计数据</span><br>    vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; a; <span class="hljs-comment">//vector的sort来排序</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">topKFrequent</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            st[nums[i]] ++;<br>        &#125;<br>        <span class="hljs-keyword">auto</span> it = st.<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">while</span>(it != st.<span class="hljs-built_in">end</span>()) &#123;<br>            a.<span class="hljs-built_in">push_back</span>(&#123;it-&gt;second,it-&gt;first&#125;);<br>            it ++;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            res.<span class="hljs-built_in">push_back</span>(a[i].second);<br>            k--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mamba Out</title>
    <link href="/2024/06/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Mamba-Out/"/>
    <url>/2024/06/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Mamba-Out/</url>
    
    <content type="html"><![CDATA[<h1 id="Mamba"><a href="#Mamba" class="headerlink" title="Mamba"></a>Mamba</h1><p><a href="https://blog.csdn.net/v_JULY_v/article/details/134923301">一文通透想颠覆Transformer的Mamba：从SSM、HiPPO、S4到Mamba</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则化</title>
    <link href="/2024/06/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%AD%A3%E5%88%99%E5%8C%96/"/>
    <url>/2024/06/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%AD%A3%E5%88%99%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h1><h2 id="L1和L2正则化"><a href="#L1和L2正则化" class="headerlink" title="L1和L2正则化"></a>L1和L2正则化</h2><p>L1和L2正则化是机器学习和深度学习中常用的两种技术，它们用于控制模型的复杂度，防止过拟合，并提高模型的泛化能力。这两种正则化方法通过在损失函数中添加一个额外的惩罚项来实现，该惩罚项与模型参数的大小相关。下面是L1和L2正则化的详细解释：</p><h3 id="L2正则化（岭回归，Tikhonov正则化）"><a href="#L2正则化（岭回归，Tikhonov正则化）" class="headerlink" title="L2正则化（岭回归，Tikhonov正则化）"></a>L2正则化（岭回归，Tikhonov正则化）</h3><p>L2正则化，也称为欧几里得范数正则化，通过惩罚参数的平方和来工作。它的目标是使参数值尽可能小，从而限制模型的复杂度。</p><p><strong>数学表达式</strong>：<br>[ L_{2} &#x3D; \lambda \sum_{i&#x3D;1}^{n} w_i^2 ]</p><p>其中，( w_i ) 是模型参数，( \lambda ) 是正则化系数（一个超参数），控制着正则化项的强度，( n ) 是参数的总数。</p><p><strong>特点</strong>：</p><ul><li>L2正则化倾向于让参数值接近于0，但不会变成0。</li><li>它倾向于产生平滑的权重分布。</li><li>L2正则化可以被看作是高斯先验的贝叶斯推断。</li></ul><h3 id="L1正则化（Lasso回归）"><a href="#L1正则化（Lasso回归）" class="headerlink" title="L1正则化（Lasso回归）"></a>L1正则化（Lasso回归）</h3><p>L1正则化，也称为拉普拉斯范数正则化，通过惩罚参数的绝对值之和来工作。与L2正则化不同，L1正则化可以产生稀疏权重矩阵，即模型参数中的一部分会变为0。</p><p><strong>数学表达式</strong>：<br>[ L_{1} &#x3D; \lambda \sum_{i&#x3D;1}^{n} |w_i| ]</p><p>其中，( w_i ) 是模型参数，( \lambda ) 是正则化系数，( n ) 是参数的总数。</p><p><strong>特点</strong>：</p><ul><li>L1正则化倾向于产生稀疏解，即模型参数中的一些元素可以被驱动为0。</li><li>这使得L1正则化具有特征选择的能力，因为它可以自动地将不重要的特征的权重设置为0。</li><li>L1正则化可以被看作是拉普拉斯先验的贝叶斯推断。</li></ul><h3 id="正则化的选择"><a href="#正则化的选择" class="headerlink" title="正则化的选择"></a>正则化的选择</h3><ul><li><strong>L2正则化</strong>通常用于大多数深度学习模型，因为它有助于稳定训练过程，并且可以防止参数值变得过大。</li><li><strong>L1正则化</strong>适用于需要特征选择的情况，或者当模型需要稀疏性时。</li><li>在某些情况下，结合L1和L2正则化（即弹性网正则化）可以提供两者的优点。</li></ul><p>正则化是深度学习中控制模型复杂度的重要工具，通过合理选择正则化类型和调整正则化系数，可以显著提高模型的泛化能力和性能。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hugging Face Transformer</title>
    <link href="/2024/05/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Hugging-Face-Transformer/"/>
    <url>/2024/05/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Hugging-Face-Transformer/</url>
    
    <content type="html"><![CDATA[<h1 id="Hugging-Face-Transformer"><a href="#Hugging-Face-Transformer" class="headerlink" title="Hugging Face Transformer"></a>Hugging Face Transformer</h1><p><a href="https://blog.csdn.net/FrenzyTechAI/article/details/131958687">Hugging Face Transformer：从原理到实战的全面指南</a></p><p><a href="https://blog.csdn.net/m0_68382801/article/details/127624858">使用网上服务器（AutoDL）训练模型</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 周赛</title>
    <link href="/2024/05/26/leetcode-%E5%91%A8%E8%B5%9B/"/>
    <url>/2024/05/26/leetcode-%E5%91%A8%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-周赛"><a href="#leetcode-周赛" class="headerlink" title="leetcode 周赛"></a>leetcode 周赛</h1><h2 id="100313-所有球里面不同颜色的数目"><a href="#100313-所有球里面不同颜色的数目" class="headerlink" title="100313. 所有球里面不同颜色的数目"></a>100313. 所有球里面不同颜色的数目</h2><p><a href="https://leetcode.cn/problems/find-the-number-of-distinct-colors-among-the-balls/description/">所有球里面不同颜色的数目</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; balls; <span class="hljs-comment">//球的序号，颜色值</span><br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; colors; <span class="hljs-comment">//颜色值，该颜色值个数</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">queryResults</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; q = queries;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-type">int</span> n = q.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-comment">//该气球已经有颜色了</span><br>            <span class="hljs-keyword">if</span>(balls[ q[i][<span class="hljs-number">0</span>] ])&#123;<br>                <span class="hljs-comment">//先将原先存在的气球和颜色从两个数组中去除</span><br>                colors[ balls[q[i][<span class="hljs-number">0</span>]] ] --;<br>                <span class="hljs-keyword">if</span>( colors[ balls[q[i][<span class="hljs-number">0</span>]] ] == <span class="hljs-number">0</span>) res --;<br>            &#125;<br>            <br>            <span class="hljs-comment">//加入新的颜色</span><br>            balls[ q[i][<span class="hljs-number">0</span>] ] = q[i][<span class="hljs-number">1</span>];<br>            colors[ q[i][<span class="hljs-number">1</span>] ] ++;<br>            <span class="hljs-keyword">if</span>(colors[ q[i][<span class="hljs-number">1</span>] ] == <span class="hljs-number">1</span>) res ++;<br><br>            ans.<span class="hljs-built_in">push_back</span>(res);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="100321-优质数对的总数-II"><a href="#100321-优质数对的总数-II" class="headerlink" title="100321.优质数对的总数 II"></a>100321.优质数对的总数 II</h2><p><a href="https://leetcode.cn/problems/find-the-number-of-good-pairs-ii/description/">优质数对的总数 II</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp; <span class="hljs-comment">//nums1数组中某个数的约数 ； 该约数的总个数</span><br><br>    <span class="hljs-comment">//求nums1[i]的约数和对应个数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=v/i;i++)&#123;<br>            <span class="hljs-keyword">if</span>(v % i == <span class="hljs-number">0</span>)&#123;<br>                mp[i] ++;<br>                <span class="hljs-comment">//重复的约数只记作一个（如4的约数为一个2）</span><br>                <span class="hljs-comment">//这个if一定要在上一个if里面</span><br>                <span class="hljs-keyword">if</span>(i != (v/i))&#123;<br>                    mp[v/i] ++;<br>                &#125;<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">numberOfPairs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums1.<span class="hljs-built_in">size</span>(); <span class="hljs-type">int</span> m = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-built_in">cnt</span>(nums1[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>            nums2[i] *= k;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>            res += mp[ nums2[i] ];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="100306-不包含相邻元素的子序列的最大和"><a href="#100306-不包含相邻元素的子序列的最大和" class="headerlink" title="100306. 不包含相邻元素的子序列的最大和"></a>100306. 不包含相邻元素的子序列的最大和</h2><p><a href="https://leetcode.cn/problems/maximum-sum-of-subsequence-with-non-adjacent-elements/description/">不包含相邻元素的子序列的最大和</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode Hot 100</title>
    <link href="/2024/05/25/Leetcode-Hot-100/"/>
    <url>/2024/05/25/Leetcode-Hot-100/</url>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-Hot-100"><a href="#Leetcode-Hot-100" class="headerlink" title="Leetcode Hot 100"></a>Leetcode Hot 100</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天是2024年5月25日 凌晨 1:24 分 在寝室洗衣房写下这段话。距离9.28还有4个月。也不知道那个时候的我有没有offer了（shushu不会还是0 offer吧，做梦都想去tp，有点难，那就梦梦浙大吧，耳机里突然响起来《落空》这首歌——“我们都曾试过想以后，以后却不会来了”。。。。。。希望我的梦想不会落空。加油！！！开刷leetcode hot 100 为了我梦想，为了不留遗憾，再冲一次吧。）</p><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><p><img src="/../img/1.png"></p><ol><li><p>算法一（哈希表）<br>核心思想：for循环，使用map依次存储数组下标和对应的数；使用map.count(target - num[i]) 查询目前map中是否已经存储了所需要的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>;<br>        map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">if</span>(mp.<span class="hljs-built_in">count</span>(target - nums[i]) &gt; <span class="hljs-number">0</span>)&#123;<br>                res[<span class="hljs-number">0</span>] = i;<br>                res[<span class="hljs-number">1</span>] = mp[target - nums[i]];<br>                <span class="hljs-keyword">return</span> res;<br>            &#125;<br>            mp[nums[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>算法二（快慢指针）<br>核心思想：$两个指针 i,j 不断向前移动找到答案（ j &lt; i ）$</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i=nums.<span class="hljs-built_in">begin</span>();i&lt;nums.<span class="hljs-built_in">end</span>();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j=nums.<span class="hljs-built_in">begin</span>();j&lt;i;j++)&#123;<br>                <span class="hljs-keyword">if</span>((*i + *j) == target)&#123;<br>                    res.<span class="hljs-built_in">push_back</span>(j-nums.<span class="hljs-built_in">begin</span>());<br>                    res.<span class="hljs-built_in">push_back</span>(i-nums.<span class="hljs-built_in">begin</span>());<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h2><p><img src="/../img/2.png"></p><p>核心思想：高精度加法</p><p>tips:</p><ol><li>注意最后一个进位也要考虑进来</li><li>构造链表<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-number">1.</span>初始化<br>ListNode* prehead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>), *cur = prehead;<br><br><span class="hljs-number">2.</span>赋值<br>cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(v);<br>cur = cur-&gt;next;<br><br><span class="hljs-number">3.</span>返回构造的链表<br><span class="hljs-keyword">return</span> prehead-&gt;next;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* prehead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>), *cur = prehead;<br>        ListNode *p = l1;<br>        vector&lt;<span class="hljs-type">int</span>&gt; a,b;<br>        <span class="hljs-keyword">while</span>(p)&#123;<br>            a.<span class="hljs-built_in">push_back</span>(p-&gt;val);<br>            p = p-&gt;next;<br>        &#125;<br>        p = l2;<br>        <span class="hljs-keyword">while</span>(p)&#123;<br>            b.<span class="hljs-built_in">push_back</span>(p-&gt;val);<br>            p = p-&gt;next;<br>        &#125;<br>        <span class="hljs-type">int</span> len = <span class="hljs-built_in">max</span>(a.<span class="hljs-built_in">size</span>(),b.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>        vector &lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(i&lt;a.<span class="hljs-built_in">size</span>())&#123;<br>                v += a[i];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i&lt;b.<span class="hljs-built_in">size</span>())&#123;<br>                v += b[i];<br>            &#125;<br>            v += t;<br>            <span class="hljs-keyword">if</span>(v&gt;=<span class="hljs-number">10</span>)&#123;<br>                v -= <span class="hljs-number">10</span>; t = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                t = <span class="hljs-number">0</span>;<br>            &#125;<br>            cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(v);<br>            cur = cur-&gt;next;<br><br>        &#125;<br>        <span class="hljs-comment">//注意最后一个进位也要考虑进来</span><br>        <span class="hljs-keyword">if</span>(t &gt;= <span class="hljs-number">1</span>)&#123;<br>            cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(t);<br>            cur = cur-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prehead-&gt;next;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h2><p><img src="/../img/3.png"><br>核心思想：滑动窗口 + un ordered set<br>tips:</p><ol><li>count（检查当前窗口内是否有重复元素）</li><li>erase（去掉左指针所指向元素，i++ ——&gt; 即窗口右移）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>();<br>        unordered_set&lt;<span class="hljs-type">char</span>&gt; str; <span class="hljs-comment">//无重复字符且无序</span><br>        <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>;<span class="hljs-comment">//定义右指针</span><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//遍历左指针</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br><br>            <span class="hljs-comment">//不断移动右指针</span><br>            <span class="hljs-keyword">while</span>(!str.<span class="hljs-built_in">count</span>(s[r]) &amp;&amp; r&lt;len)&#123;<br>                str.<span class="hljs-built_in">insert</span>(s[r]);<br>                r++;<br>            &#125;<br>            <span class="hljs-comment">//跳出了while循环代表有重复元素出现了，此时移动左指针(从set中删除当前左指针所指向元素)</span><br>            res = <span class="hljs-built_in">max</span>(res,r-i);<br>            str.<span class="hljs-built_in">erase</span>(s[i]);<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4.寻找两个正序数组的中位数"></a>4.寻找两个正序数组的中位数</h2><p><img src="/../img/4.png"><br>核心思想：先合并成一个单调递增的数组；然后计算新数组的中位数，算法复杂度为O(n+m); 还可以用二分优化到log(n+m);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len1 = nums1.<span class="hljs-built_in">size</span>(); <span class="hljs-type">int</span> len2 = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n=<span class="hljs-number">0</span>,m=<span class="hljs-number">0</span>; <span class="hljs-comment">//分别指示num1,num2两个数组的指针</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br><br>        <span class="hljs-comment">//构建一个单调递增的ans数组</span><br>        <span class="hljs-keyword">while</span>(n &lt; len1 &amp;&amp; m &lt; len2)&#123;<br>            <span class="hljs-keyword">if</span>(nums1[n] &lt; nums2[m])&#123;<br>                ans.<span class="hljs-built_in">push_back</span>(nums1[n]);<br>                n++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                ans.<span class="hljs-built_in">push_back</span>(nums2[m]);<br>                m++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(n &lt; len1)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(nums1[n]);<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(m &lt; len2)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(nums2[m]);<br>            m++;<br>        &#125;<br>        <span class="hljs-type">int</span> len = ans.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">double</span> res;<br>        <span class="hljs-keyword">if</span>(len % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            res = (ans[len/<span class="hljs-number">2</span> - <span class="hljs-number">1</span>] + ans[len/<span class="hljs-number">2</span>]) / <span class="hljs-number">2.0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            res = ans[len/<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h2><p>核心思想：动态规划 f[i][j] , <strong>区间dp</strong> ，以[i,j]这段长度上的回文子串<br>（1） 求最长回文子串长度<br>（2） 求具体的最长回文子串 ：不断判断某个区间是否是回文子串，如果是，则更新最大长度的左右下标值，之后通过该下标序号来截取具体的子串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <br>        <span class="hljs-comment">// 初始化二维动态规划表</span><br>        <span class="hljs-type">bool</span> f[n+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// 填充对角线为true，因为单个字符总是回文</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            f[i][i] = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>, maxLen = <span class="hljs-number">1</span>; <span class="hljs-comment">// 记录最长回文串的起始位置和长度</span><br><br>        <span class="hljs-comment">// 填充动态规划表</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; ++len) &#123; <span class="hljs-comment">// 长度从2开始</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i + len - <span class="hljs-number">1</span> &lt; n; ++i) &#123; <span class="hljs-comment">// i是子串的起始位置,j是右端点小于n</span><br>                <span class="hljs-type">int</span> j = i + len - <span class="hljs-number">1</span>; <span class="hljs-comment">// j是子串的结束位置</span><br>                <span class="hljs-comment">// 如果首尾字符相同，并且中间部分也是回文，则整个序列是回文</span><br>                <span class="hljs-keyword">if</span> (s[i] == s[j] &amp;&amp; (len &lt; <span class="hljs-number">3</span> || f[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>])) &#123;<br>                    f[i][j] = <span class="hljs-literal">true</span>;<br>                    maxLen = len;<br>                    start = i;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    f[i][j] = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 返回最长的回文子串</span><br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(start, maxLen);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a>10. 正则表达式匹配</h2><p>核心思想：动态规划</p><h2 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a>11. 盛最多水的容器</h2><p>核心思想：双指针（最短木板原理，因此两个指针所指向的板中较短的那个指针要向中心移动）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = height.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; <span class="hljs-type">int</span> r = n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> maxv = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>            maxv = <span class="hljs-built_in">max</span>(maxv,(r-l)*<span class="hljs-built_in">min</span>(height[l],height[r]));<br>            <span class="hljs-keyword">if</span>(height[l] &lt; height[r])&#123;<br>                l++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                r--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxv;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h2><p>核心思想：双指针＋set去重</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        set&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ret;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br> <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            <span class="hljs-type">int</span> x = -nums[i];<br>            <span class="hljs-type">int</span> l = i+<span class="hljs-number">1</span>; <span class="hljs-type">int</span> r = len<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>                <span class="hljs-keyword">if</span>(nums[l] + nums[r] + nums[i] &lt; <span class="hljs-number">0</span>)&#123;<br>                    l++;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[l] + nums[r] + nums[i] &gt; <span class="hljs-number">0</span>)&#123;<br>                    r--;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    ret.<span class="hljs-built_in">insert</span>(&#123;nums[i],nums[l],nums[r]&#125;); <br>                    l++; r--;<span class="hljs-comment">//在当前已经满足条件的情况下，只移动一个指针肯定不能够继续满足条件</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">ans</span>(ret.<span class="hljs-built_in">begin</span>(),ret.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a>17. 电话号码的字母组合</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h2><p>核心思想：<strong>栈的先进后出</strong>（注意栈是否为空时的一些边界情况）<br><img src="/../img/20.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    map &lt;<span class="hljs-type">char</span>,<span class="hljs-type">char</span>&gt; mp;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        mp.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>&#125;);<br>        mp.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>&#125;);<br>        mp.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>&#125;);<br>        stack&lt;<span class="hljs-type">char</span>&gt; st;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//剪枝提前返回</span><br>        <span class="hljs-keyword">if</span>(n % <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;(&#x27;</span> || s[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span> || s[i] == <span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                st.<span class="hljs-built_in">push</span>(s[i]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//如果读入了一个右括号而此时没有左括号在栈中，则一定不满足条件</span><br>                <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>() || mp[st.<span class="hljs-built_in">top</span>()] != s[i])&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125; <br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> st.<span class="hljs-built_in">empty</span>(); <span class="hljs-comment">//如果遍历完了整个字符串之后，还符合条件的话，栈肯定为空</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h2><p>核心思想：二分查找<br>tips:注意空数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">//找开始位置</span><br>        <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>            <span class="hljs-type">int</span> mid = (l+r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid] &gt;= target)&#123;<br>                r = mid;<br>            &#125; <br>            <span class="hljs-keyword">else</span>&#123;<br>                l = mid+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[l] != target) ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">else</span>&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(l);<br>        &#125;<br><br>        <span class="hljs-comment">//找结束位置</span><br>        l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>            <span class="hljs-type">int</span> mid = (l+r+<span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid] &lt;= target)&#123;<br>                l = mid;<br>            &#125; <br>            <span class="hljs-keyword">else</span>&#123;<br>                r = mid<span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[l] != target) ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">else</span>&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(l);<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h2><p>核心思想：<br>（1）递归+剪枝<br>（2）动态规划（d[n] &#x3D; d[n-1] + d[n-2]）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/*递归＋剪枝</span><br><span class="hljs-comment">    int st[50];</span><br><span class="hljs-comment">    int dfs(int i)&#123;</span><br><span class="hljs-comment">        if(i&lt;=1)&#123;</span><br><span class="hljs-comment">            return 1;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        if(st[i]) return st[i]; //剪枝操作，如果该数已经计算过了，就直接查找不需要再递归计算</span><br><span class="hljs-comment">        else&#123;</span><br><span class="hljs-comment">            st[i] = dfs(i-1) + dfs(i-2);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return st[i];</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">//dfs(n);</span><br>        <span class="hljs-type">int</span> f[<span class="hljs-number">50</span>];<br>        f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        f[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++)&#123;<br>            f[i] = f[i<span class="hljs-number">-1</span>] + f[i<span class="hljs-number">-2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> f[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h2><p>核心思想：</p><ol><li>移除数组元素：<strong>数组的元素在内存地址中是连续的，</strong> 不能单独删除数组中的某个元素，只能覆盖。</li><li>通过快慢指针来实现数组元素覆盖</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(r=<span class="hljs-number">0</span>;r&lt;n;r++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[r] != <span class="hljs-number">0</span>)&#123;<br>                nums[l] = nums[r];<br>                l++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//r最后所在位置为最后一个位置的下一位（因为r要遍历到此才会跳出for循环）</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r<span class="hljs-number">-1</span>;i++)&#123;<br>            nums[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二分图</title>
    <link href="/2024/05/22/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    <url>/2024/05/22/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h1><p>有两顶点集且图中每条边的的两个顶点分别位于两个顶点集中，每个顶点集中没有边直接相连接！</p><p>说人话的定义：图中点通过移动能分成左右两部分，左侧的点只和右侧的点相连，右侧的点只和左侧的点相连。</p><p><img src="/../../img/%E4%BA%8C%E5%88%86%E5%9B%BE.png"></p><h2 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a>染色法</h2><blockquote><p>判断给定图 是否是二分图<br>算法步骤：</p></blockquote><ol><li>循环对每个点进行染色（dfs或者bfs）</li><li>判断其相邻的点中，若未染色则将其染上和当前顶点不同的颜色。</li><li>若已经染色 且颜色跟当前点颜色一样的则说明不是二分图，如果没有则进行下一个节点的判断</li></ol><h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><blockquote><p>计算二分图的最大匹配数</p><p>二分图的匹配：给定一个二分图 G ，在 G 的一个子图 M 中，M 的边集 {E} 中的任意两条边都不依附于同一个顶点，则称 M 是一个匹配。</p><p>二分图的最大匹配：所有匹配中包含边数最多的一组匹配被称为二分图的最大匹配，其边数即为最大匹配数。</p></blockquote><p>算法思想：<br>find(x) : 左半边点x的某条边的右半边的另一个点<br>match[j] 右半边的点j所匹配的点</p><ol><li>对左半边图的节点进行循环<ul><li>循环该节点所有的边(find(x))，如果能够在右半边找到一个没有匹配过的点（match[j] &#x3D;&#x3D; 0），则进行匹配</li><li>如果找到的点已经匹配上了别的点了(match[j] !&#x3D; 0)，则看其匹配的点是否有别的备胎（find(match[j])）</li><li>有备胎则将匹配取消，让其去找备胎。</li><li>如果能够成功匹配则返回true （总匹配边数 res++）</li><li>如果无备胎，则返回false</li></ul></li></ol><p>tips:</p><ol><li>循环中找每个点对应右半边点前都要<strong>先重置st数组为false</strong></li><li>要用st数组来标记节点是否被访问过了</li></ol><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n1,n2,m;<br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx;<br><span class="hljs-comment">//st 标记节点是否递归找过， match[x]：和 x 编号的男生的编号</span><br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-type">int</span> match[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    e[idx] = b; ne[idx] = h[a]; h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-comment">//i指代的是下标为idx的边</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[x];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-comment">//递归的剪枝操作，如果没有的话会报MLE</span><br>        <span class="hljs-keyword">if</span>(!st[j])&#123;<br>            st[j] = <span class="hljs-number">1</span>; <span class="hljs-comment">//标记该节点已经找过了</span><br>            <span class="hljs-keyword">if</span>(!match[j] || <span class="hljs-built_in">find</span>(match[j]))&#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-type">int</span> a,b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-built_in">add</span>(a,b);<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> res;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n1;i++)&#123;<br>        <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(st));<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i))&#123;<br>            res++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>最小生成树算法</title>
    <link href="/2024/05/21/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/"/>
    <url>/2024/05/21/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h1><p>从具有n个节点的连通图中选择 n-1 条边，使得所组成的树的权值最小，即为最小生成树</p><p>即<strong>以最小的成本（边的权值）将图中所有节点链接到一起</strong></p><p><img src="/../../img/mintree.png"></p><h2 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h2><p>prim算法 是从节点的角度 采用贪心的策略 每次寻找距离 最小生成树最近的节点 并加入到最小生成树中</p><p><strong>选节点 -&gt; 加入 -&gt; 更新其他点距离</strong></p><ol><li>循环n次，找到集合（最小生成树中的节点所组成）外距离最近集合最近的点t</li><li>点t加入集合</li><li>用 t 更新集合外其他点到<strong>集合的距离</strong>（到集合中任意一点的最小距离）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx,w[M];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> d[N],st[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> value)</span></span>&#123;<br>    e[idx] = v; w[idx] = value; ne[idx] = h[u]; h[u] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; w[i] &lt; d[j])&#123;<br>            d[j] = w[i];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-type">int</span> u,v,w;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-built_in">add</span>(u,v,w); <span class="hljs-built_in">add</span>(v,u,w);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(d));<br>    <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(st));<br>    <br>    <span class="hljs-type">int</span> cur = <span class="hljs-number">1</span>;    <span class="hljs-comment">//初始节点设置为1</span><br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 我们只需要循环 n-1次，建立 n - 1条边，就可以把n个节点的图连在一起</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <br>        <span class="hljs-type">int</span> minv = <span class="hljs-number">1e9</span>; <span class="hljs-comment">//每次选新节点前都要重新赋值</span><br>        <br>        <span class="hljs-comment">//1. 选节点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; d[j] &lt; minv)&#123;<br>                minv = d[j];<br>                cur = j;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">//2.加入最小生成树</span><br>        st[cur] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//3. 更新距离</span><br>        <span class="hljs-built_in">dfs</span>(cur);<br>    &#125;<br>    <span class="hljs-comment">//d[1] 不用计算进来</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(d[i] &gt; <span class="hljs-number">10000</span>)&#123; <span class="hljs-comment">//图中涉及边的边权的绝对值均不超过 10000</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        res += d[i];<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆优化版Prim"><a href="#堆优化版Prim" class="headerlink" title="堆优化版Prim"></a>堆优化版Prim</h2><ol><li>使用小根堆来判断 d数组 里的最小值</li><li>记录被确认的点的数量，当队列为空后，判断点数量是否与总节点数相同来判断是否有最小生成树</li><li>无向图的初始化：边数的两倍（<code>const int M = 2e5+10</code>）; <code>add(a,b,w); add(b,a,w);</code></li></ol><p>tips:</p><ol><li><strong>M 数组来开小了，会超时</strong></li><li><code>if(st[cur]) continue;</code>  <strong>必不可少的剪枝，防止超时</strong> (不加会一直循环下去，如果非堆优化版本可以不加，因为它是通过n-1次的for循环来控制的)</li><li><code>const int M = 3e5+10;</code> &#x2F;&#x2F;边数不够的话，也会报TLE , <strong>无向图要开两倍（越大越好）</strong><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx,w[M];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> d[N],st[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res;<br><br>priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> value)</span></span>&#123;<br>    e[idx] = v; w[idx] = value; ne[idx] = h[u]; h[u] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; w[i] &lt; d[j])&#123;<br>            d[j] = w[i];<br>            q.<span class="hljs-built_in">push</span>(&#123;d[j],j&#125;);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-type">int</span> u,v,w;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-built_in">add</span>(u,v,w); <span class="hljs-built_in">add</span>(v,u,w);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(d));<br>    <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(st));<br>    <br>    <span class="hljs-type">int</span> cur = <span class="hljs-number">1</span>;    <span class="hljs-comment">//初始节点设置为1</span><br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-comment">// 我们只需要循环 n-1次，建立 n - 1条边，就可以把n个节点的图连在一起</span><br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>        <br>        <span class="hljs-type">int</span> minv = <span class="hljs-number">1e9</span>; <span class="hljs-comment">//每次选新节点前都要重新赋值</span><br>        <br>        <span class="hljs-comment">//1. 选节点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; d[j] &lt; minv)&#123;<br>                minv = d[j];<br>                cur = j;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">//1.选节点</span><br>        PII t = q.<span class="hljs-built_in">top</span>();<br>        cur = t.second;<br>        q.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">if</span>(st[cur]) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//必不可少的剪枝，防止超时</span><br>        <span class="hljs-comment">//2.加入最小生成树</span><br>        st[cur] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//3. 更新距离</span><br>        <span class="hljs-built_in">dfs</span>(cur);<br>    &#125;<br>    <span class="hljs-comment">//d[1] 不用计算进来</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(d[i] &gt; <span class="hljs-number">10000</span>)&#123; <span class="hljs-comment">//图中涉及边的边权的绝对值均不超过 10000</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        res += d[i];<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>; <span class="hljs-comment">//无向图，边数的两倍</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx,w[M];<br><span class="hljs-type">int</span> d[N];<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    e[idx] = b; w[idx] = v;<br>    ne[idx] = h[a];<br>    h[a] = idx;<br>    idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span>&#123;<br>    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; q;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>,cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">//定义在函数里的值一定要初始化，否则不会给它设置为 0 </span><br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(d));<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;); <span class="hljs-comment">//距离，节点编号</span><br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-comment">//不属于集合 &amp;&amp; 距离集合最小的点</span><br>        <span class="hljs-comment">/*朴素版</span><br><span class="hljs-comment">        int t = -1;</span><br><span class="hljs-comment">        for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="hljs-comment">            if(!st[i] &amp;&amp; (t == -1 || d[i] &lt; d[t]))&#123;</span><br><span class="hljs-comment">                t = i;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-comment">//堆优化版本</span><br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-type">int</span> ver = t.second;<br>        q.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">if</span>(st[ver]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">//把点t加到集合当中去，更新权值</span><br>        st[ver] = <span class="hljs-literal">true</span>;<br>        cnt++; <span class="hljs-comment">//不存在生成树即cnt != n</span><br>        <br>        <span class="hljs-comment">// res += q.top().first; //前面已经pop 了因此不能这样写</span><br>        res += t.first;<br>        <br>        <span class="hljs-comment">//更新其他点到 集合 的距离</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[ver];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span>(st[j]) <span class="hljs-keyword">continue</span>; <br>            <span class="hljs-keyword">if</span>(w[i] &lt; d[j])&#123;<br>                d[j] = w[i];<br>                q.<span class="hljs-built_in">push</span>(&#123;d[j],j&#125;); <span class="hljs-comment">//只有在确定最小值会被更新时，再push入队</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt != n) <span class="hljs-keyword">return</span> INF; <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-type">int</span> a,b,w;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;<br>        <span class="hljs-built_in">add</span>(a,b,w); <span class="hljs-built_in">add</span>(b,a,w); <span class="hljs-comment">//无向图</span><br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">prim</span>();<br>    <span class="hljs-keyword">if</span>(ans == INF) cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; ans;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h2><p><strong>kruscal的思路：</strong></p><p><strong>排序边 + 并查集</strong></p><ul><li><p>边的权值排序，因为要优先选最小的边加入到生成树里</p></li><li><p>遍历排序后的边</p><ul><li>如果边首尾的两个节点在同一个集合，说明如果连上这条边图中会出现环</li><li>如果边首尾的两个节点不在同一个集合，加入到最小生成树，并把两个节点加入同一个集合</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> l, r, val;<br>&#125;;<br><br><br><span class="hljs-type">int</span> n = <span class="hljs-number">10001</span>;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">father</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>; <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        father[i] = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> u == father[u] ? u : father[u] = <span class="hljs-built_in">find</span>(father[u]); <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    u = <span class="hljs-built_in">find</span>(u); <br>    v = <span class="hljs-built_in">find</span>(v); <br>    <span class="hljs-keyword">if</span> (u == v) <span class="hljs-keyword">return</span> ; <br>    father[v] = u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> v, e;<br>    <span class="hljs-type">int</span> v1, v2, val;<br>    vector&lt;Edge&gt; edges;<br>    <span class="hljs-type">int</span> result_val = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; v &gt;&gt; e;<br>    <span class="hljs-keyword">while</span> (e--) &#123;<br>        cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; val;<br>        edges.<span class="hljs-built_in">push_back</span>(&#123;v1, v2, val&#125;);<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(edges.<span class="hljs-built_in">begin</span>(), edges.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> Edge&amp; a, <span class="hljs-type">const</span> Edge&amp; b) &#123;<br>            <span class="hljs-keyword">return</span> a.val &lt; b.val;<br>    &#125;);<br><br>    vector&lt;Edge&gt; result; <span class="hljs-comment">// 存储最小生成树的边</span><br><br>    <span class="hljs-built_in">init</span>();<br><br>    <span class="hljs-keyword">for</span> (Edge edge : edges) &#123;<br><br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">find</span>(edge.l);<br>        <span class="hljs-type">int</span> y = <span class="hljs-built_in">find</span>(edge.r);<br><br><br>        <span class="hljs-keyword">if</span> (x != y) &#123;<br>            result.<span class="hljs-built_in">push_back</span>(edge); <span class="hljs-comment">// 保存最小生成树的边</span><br>            result_val += edge.val; <br>            <span class="hljs-built_in">join</span>(x, y);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印最小生成树的边</span><br>    <span class="hljs-keyword">for</span> (Edge edge : result) &#123;<br>        cout &lt;&lt; edge.l &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; edge.r &lt;&lt; <span class="hljs-string">&quot; : &quot;</span> &lt;&lt; edge.val &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>离散化</title>
    <link href="/2024/05/18/algorithm_know/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    <url>/2024/05/18/algorithm_know/%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h1><p>离散化就是把大而分散的一段段使用到的稀疏区间，整合映射到连续的一段较小的稠密区间里，然后就可以通过普通前缀和公式来计算连续一段的区间和，本质上就是化大为小，把稀疏离散化简为稠密连续的一段。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>双指针算法</title>
    <link href="/2024/05/18/algorithm_know/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
    <url>/2024/05/18/algorithm_know/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h1><p>tips:</p><ol><li>涉及到 <strong>重复</strong> 二字考虑用一个计数数组进行存储</li></ol><h2 id="左右指针"><a href="#左右指针" class="headerlink" title="左右指针"></a>左右指针</h2><p>思路：设立两个指针 i 和 j ; 分别指向数组两端，在不同条件下，向内部移动某个指针，直到两个指针交互。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=n<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>    <span class="hljs-keyword">if</span>()&#123;<br>        v = ...;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        v = ...;<br>        j--;<br>    &#125;<br>    res = <span class="hljs-built_in">max</span>(res,v);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>例题一: <a href="https://leetcode.cn/problems/container-with-most-water/description/">盛最多水的容器</a></p><p>例题二：<a href="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/description/">和为s的两个数字</a></p><h2 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h2><p>思想：<br>两个指针朝着同一方向前进，一个指针走得慢，一个指针走得快。</p><p>例题一：<a href="https://leetcode.cn/problems/middle-of-the-linked-list/submissions/532905013/">链表的中间结点</a></p><p>例题二：<a href="https://www.acwing.com/problem/content/description/801/">最长连续不重复子序列</a></p><h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a>209. 长度最小的子数组</h3><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">209. 长度最小的子数组</a></p><p>核心思想：快慢指针，</p><ol><li><p>当窗口内的和还小于目标值时，移动右指针增大窗口内子数组的和使其大于等于目标值</p></li><li><p>当窗口内的和已经大于目标值时，移动左指针缩小窗口大小找长度最小的子数组</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">1e9</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">s</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            s[i] = s[i<span class="hljs-number">-1</span>] + nums[i<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s[n] &lt; target) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;r&lt;n;)&#123;<br>            <span class="hljs-keyword">if</span>( (s[r+<span class="hljs-number">1</span>] - s[l]) &gt;= target)&#123;<br>                res = <span class="hljs-built_in">min</span>(res,r+<span class="hljs-number">1</span>-l);<br>                l++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                r++;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a>76. 最小覆盖子串</h3><p>核心思想：</p><ol><li>滑动窗口的双指针</li><li>unordered_map 哈希表存储字符和其对应个数，以此来比较是否覆盖了另一个子数组</li><li>下方解法会TLE</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; st,sw;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(string t,<span class="hljs-type">int</span> m)</span></span>&#123;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>            <span class="hljs-comment">//这里不是等于而是小于（如题意中的我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。）</span><br>            <span class="hljs-keyword">if</span>(sw[t[i]] &lt; st[t[i]])&#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>    <span class="hljs-function">string <span class="hljs-title">minWindow</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>(); <span class="hljs-type">int</span> m = t.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>            st[t[i]] ++;<br>        &#125;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">10010</span>; <span class="hljs-type">int</span> minl,minr;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;r&lt;=n;)&#123; <span class="hljs-comment">//这里r到n，是为了满足如果r最后移动到数组末尾时刚好check成功了，但无法更新的minr和minl；因此让它多循环一次</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(t,m))&#123;<br>                <span class="hljs-keyword">if</span>(r-l &lt; res)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    res = r-l;<br>                    minr = r;<br>                    minl = l;<br>                &#125;<br>                sw[s[l]] --;<br>                l++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(r == n) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//防止数组越界</span><br>                sw[s[r]] ++;<br>                r++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//check函数一次都没有true过 ，则代表无结果的情况，返回空串</span><br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-literal">false</span>)&#123;<br>            string s = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br><br>        string ans; <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=minl;i&lt;minr;i++)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(s[i]);<br>            idx++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深度学习中的梯度</title>
    <link href="/2024/05/17/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E6%A2%AF%E5%BA%A6/"/>
    <url>/2024/05/17/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E6%A2%AF%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习中的梯度"><a href="#深度学习中的梯度" class="headerlink" title="深度学习中的梯度"></a>深度学习中的梯度</h1><p><a href="https://blog.csdn.net/a910247/article/details/137354786">深度学习之详解常见梯度算法(概念、公式、原理、算法实现过程)</a></p><h2 id="什么是梯度"><a href="#什么是梯度" class="headerlink" title="什么是梯度"></a>什么是梯度</h2><p>梯度的提出只为回答一个问题：<br>函数在变量空间的某一点处，沿着哪一个方向有最大的变化率？</p><p>函数在某一点的梯度是这样一个向量，它的方向与取得最大方向导数的方向一致，而它的模为方向导数的最大值。</p><p><strong>梯度向量的方向是函数增长最快的方向，其大小是该方向上的变化率</strong></p><p>1）梯度是一个向量，即有方向有大小；<br>2）梯度的方向是最大方向导数的方向；<br>3）梯度的值是最大方向导数的值。</p><p><strong>在反向传播中，梯度是损失函数关于网络参数的导数，它指示了损失函数在参数空间中增加最快的方向。</strong></p><h2 id="为什么要做梯度下解"><a href="#为什么要做梯度下解" class="headerlink" title="为什么要做梯度下解"></a>为什么要做梯度下解</h2><p>既然在变量空间的某一点处，函数沿梯度方向具有最大的变化率，那么在优化目标函数的时候，自然是沿着负梯度方向去减小函数值，以此达到我们的优化目标。</p><h2 id="梯度反向传播"><a href="#梯度反向传播" class="headerlink" title="梯度反向传播"></a>梯度反向传播</h2><p><strong>反向传播传播的是损失函数关于每个权重和偏置的梯度</strong><br>梯度指示了如何调整参数以减少损失。</p><p>梯度反向传播（Backpropagation）是神经网络中用于训练模型的关键算法。在反向传播过程中，梯度会从输出层反向传递到输入层，用于更新网络中的权重。梯度反向传播涉及对网络中每一层的权重和激活函数进行微分，计算损失函数相对于每个权重的梯度。</p><p>梯度反向传播会经过多层反复相乘的原因与链式法则（Chain Rule）有关，这是微积分中用于求解复合函数导数的基本法则。在神经网络中，每个神经元的输出可以看作是输入、权重和激活函数的复合结果。因此，要计算损失相对于网络中某个权重的梯度，就需要应用链式法则，将损失对激活函数的导数与激活函数对权重的导数相乘。</p><p>以下是梯度反向传播中链式法则应用的一个简化示例：</p><p>假设一个神经网络包含多个层，每层有多个神经元，每个神经元的输出 ( y ) 可以表示为：</p><p>[ y &#x3D; f(z) ]</p><p>其中 ( z ) 是输入加权和 ( w \cdot x + b )（( w ) 是权重向量，( x ) 是输入向量，( b ) 是偏置），( f ) 是激活函数。</p><p>损失函数 ( L ) 相对于权重 ( w ) 的梯度可以表示为：</p><p>[ \frac{\partial L}{\partial w} &#x3D; \frac{\partial L}{\partial y} \cdot \frac{\partial y}{\partial z} \cdot \frac{\partial z}{\partial w} ]</p><p>这里：</p><ul><li>( \frac{\partial L}{\partial y} ) 是损失相对于输出 ( y ) 的梯度。</li><li>( \frac{\partial y}{\partial z} ) 是激活函数 ( f ) 相对于 ( z ) 的导数。</li><li>( \frac{\partial z}{\partial w} ) 是 ( z ) 相对于权重 ( w ) 的导数。</li></ul><p>在反向传播过程中，首先计算输出层的梯度 ( \frac{\partial L}{\partial y} )，然后使用链式法则递归地计算前面各层的梯度。每一步都涉及到对激活函数的导数和权重的导数进行乘法运算。</p><p>当神经网络很深时，即存在很多层，这些梯度乘积会沿着网络层级反复进行。如果激活函数的导数值（如sigmoid或tanh函数在接近饱和区的导数）很小，或者权重本身较小，那么经过多次乘法后，梯度可能会变得非常小，导致梯度消失问题。相反，如果梯度值在每一步都较大，那么它们在多次乘法后可能会变得非常大，导致梯度爆炸问题。</p><p>为了解决这些问题，研究人员已经提出了多种技术，如使用ReLU激活函数（其在正区间内导数为常数，可以缓解梯度消失问题），权重初始化策略，梯度裁剪，以及改进的优化算法等。</p><h2 id="梯度消失和梯度爆炸"><a href="#梯度消失和梯度爆炸" class="headerlink" title="梯度消失和梯度爆炸"></a>梯度消失和梯度爆炸</h2><p>梯度消失和梯度爆炸本质就是激活函数（的导数）和权重相互作用产生的联合效果</p><p>梯度消失和梯度爆炸的根源主要是因为<strong>深度神经网络结构</strong>以及**激活函数选择不当(函数的导数数值过小会导致梯度消失)**，目前优化神经网络的方法都是基于反向传播的思想，即根据损失函数计算的误差通过反向传播的方式，指导深度网络权值的更新。</p><p>在反向传播时对激活函数进行求导。如果在此部分大于1，那么随着层数的增加，求出的梯度的更新将以指数形式增加，发生梯度爆炸。如果此部分小于1，那么随着层数的增加求出的梯度更新的信息会以指数形式衰减，发生梯度消失。</p><p><strong>梯度消失：</strong> 即在反向传播过程中，由于梯度值逐层传递时逐渐变小，权重的更新将非常微小，导致较靠近输入层的层难以有效地学习到输入数据的特征和模式。</p><p><strong>梯度爆炸</strong> 在深度神经网络训练过程中，梯度值逐层传递时逐渐增大，并且可能超出网络的数值范围的问题。当梯度值变得非常大时，参数更新的幅度也会变得非常大，导致模型变得不稳定，甚至无法收敛。</p><p>梯度消失通常与以下几个因素有关：</p><ol><li><p><strong>激活函数的选择</strong>：某些激活函数，如Sigmoid或Tanh，在其饱和区（即输入值非常大或非常小的区域）的梯度非常小，这可能导致在反向传播过程中梯度值快速减小。</p></li><li><p><strong>网络的深度</strong>：在很深的网络中，由于梯度需要通过多个层进行传播，每个层的梯度乘积将导致最终的梯度值变得非常小。</p></li><li><p><strong>权重初始化</strong>：不适当的权重初始化可能导致梯度消失或梯度爆炸。</p></li><li><p><strong>学习率设置</strong>：过大的学习率可能导致梯度爆炸，而过小的学习率可能导致梯度更新过慢，相当于梯度消失。</p></li></ol><p><strong>具体例子：</strong></p><ol><li><p><strong>Sigmoid激活函数</strong>：<br>假设一个神经网络使用Sigmoid激活函数，其梯度为 ( \sigma’(x) &#x3D; \sigma(x)(1 - \sigma(x)) )。当 ( \sigma(x) ) 接近1或0时，梯度 ( \sigma’(x) ) 将接近0。例如，如果 ( \sigma(x) &#x3D; 0.9 )，则梯度 ( \sigma’(x) &#x3D; 0.9 \times (1 - 0.9) &#x3D; 0.09 )。在深层网络中，连续多个这样的梯度乘积将导致最终梯度非常小。</p></li><li><p><strong>深度网络</strong>：<br>考虑一个具有10层的神经网络，每层使用Sigmoid激活函数。如果每层的梯度乘积为0.1（这是一个合理的假设，因为Sigmoid激活函数的梯度通常小于1），那么经过10层后，初始梯度为1的梯度将减少到 ( 1 \times 0.1^{10} &#x3D; 1 \times 10^{-10} )，这几乎为零。</p></li><li><p><strong>长短期记忆网络（LSTM）</strong>：<br>LSTM设计之初就是为了解决传统RNN中的梯度消失问题。在标准的RNN中，梯度需要通过时间步进行传播，这同样会导致梯度消失。LSTM通过引入门控机制来缓解这个问题，允许梯度在时间序列中更有效地流动。</p></li></ol><h3 id="解决梯度消失的方法："><a href="#解决梯度消失的方法：" class="headerlink" title="解决梯度消失的方法："></a>解决梯度消失的方法：</h3><ul><li><p><strong>使用ReLU或其变种</strong>：ReLU及其变种（如Leaky ReLU）在正区间内具有恒定的梯度，这有助于缓解梯度消失问题。</p></li><li><p><strong>权重初始化</strong>：使用如He初始化或Xavier初始化等策略，可以更好地控制训练初期的梯度大小。</p></li><li><p><strong>梯度裁剪</strong>：在优化过程中限制梯度的更新幅度，以避免梯度爆炸，同时也可以减轻梯度消失的影响。</p></li><li><p><strong>使用残差连接</strong>：在网络中使用残差连接（如在ResNet中）可以帮助梯度直接流向前面的层。</p></li><li><p><strong>适当的学习率调度</strong>：通过学习率衰减或自适应学习率优化算法（如Adam）来调整学习率。</p></li></ul><p><strong>method</strong><br>1.正则化：通过 L1 或 L2 正则化来控制参数的大小，防止梯度值过大。<br>2.梯度剪裁（Gradient Clipping）：限制梯度值的范围，将超出阈值的梯度进行裁剪。<br>3.预训练：可以先使用无监督学习或其他方式进行预训练，提供一个比较好的初始参数，从而减小梯度消失和爆炸的可能性。<br>4.层标准化（Layer Normalization）或批标准化（Batch Normalization）：对层输出进行标准化，使其均值为0、方差为1，有助于缓解梯度消失情况。<br>5.参数初始化：合理选择参数的初始化方法，如使用 Xavier 或 He 等初始化方法，可以减小梯度消失和爆炸的概率。<br>6.更稳定的激活函数：使用 ReLU、Leaky ReLU 或其变体等激活函数，可以避免梯度消失，并且有助于缓解梯度爆炸。<br>7.Residual Connections（残差连接）：在网络中增加跨层连接，可以传递较浅层的梯度信息，缓解梯度消失和爆炸。</p><p><strong>Residual Connections</strong></p><blockquote><p>残差连接引入了一种跨层传递的机制，即在网络的某些层中，将前一层的输出直接加到后一层的输入中去。这种机制可以有效地传递一定的梯度信息，避免了网络深度增加时出现的梯度消失问题，同时也能够克服一些非凸优化问题，使得网络更容易优化。<br>具体而言，假设某一层的输入为 x，输出为 y，则残差连接的实现形式可以表示为：<br><code>y=F(x)+x</code><br>其中 F(x) 表示该层的非线性变换操作，即前向传播过程。在反向传播梯度计算时，则会将损失函数 L 反向传播到该层，生成梯度 ∂L&#x2F;∂y，并将该梯度传递到 x，从而计算 ∂L&#x2F;∂x，即该层输入 x 对损失函数的梯度。</p></blockquote><h2 id="梯度下降算法"><a href="#梯度下降算法" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h2><p>梯度下降（Gradient Descent）是一种优化算法，用于寻找最小化损失函数（或成本函数）的参数值</p><p>损失函数衡量了模型预测值与真实值之间的差异，而梯度下降则是用于更新模型的参数（例如权重和偏置），以最小化这个差异。</p><p><strong>对于非凸损失函数，梯度下降可能只能找到局部最小值而不是全局最小值</strong></p><p>以下是梯度下降算法的基本步骤：</p><ol><li><p><strong>初始化参数</strong>：随机初始化模型参数或使用预设的值。</p></li><li><p><strong>计算梯度</strong>：计算损失函数对每个参数的偏导数，这些偏导数构成了梯度向量。梯度指向损失函数增长最快的方向。</p></li><li><p><strong>更新参数</strong>：根据梯度和一个学习率（步长）来更新每个参数。参数更新的公式通常是：<br>[ \theta_i :&#x3D; \theta_i - \eta \cdot \frac{\partial J}{\partial \theta_i} ]<br>其中，(\theta_i) 是第(i)个参数，(\eta) 是学习率，(\frac{\partial J}{\partial \theta_i}) 是损失函数(J)对参数(\theta_i)的偏导数。</p></li><li><p><strong>重复迭代</strong>：重复步骤2和3，直到满足停止条件，如梯度足够小、达到预定的迭代次数或损失函数值不再显著减小。</p></li></ol><p>梯度下降算法有几种变体，用于提高性能和稳定性：</p><ul><li><p><strong>批量梯度下降（Batch Gradient Descent）</strong>：每次迭代使用整个数据集来计算梯度和更新参数。这种方法计算准确，但可能计算成本高，且在大数据集上效率低。</p></li><li><p><strong>随机梯度下降（Stochastic Gradient Descent, SGD）</strong>：每次迭代只使用一个训练样本来计算梯度和更新参数。SGD通常更快，但可能会有较大的噪声，导致训练过程不稳定。</p></li><li><p><strong>小批量梯度下降（Mini-batch Gradient Descent）</strong>：每次迭代使用一小部分数据（称为小批量）来计算梯度和更新参数。这是批量梯度下降和随机梯度下降的折中方案，通常在实践中效果较好。</p></li><li><p><strong>动量（Momentum）</strong>：在SGD的基础上增加了动量项，可以帮助梯度下降更快地收敛，同时减少震荡。</p></li><li><p><strong>AdaGrad</strong>：Adagrad（Adaptive Gradient Algorithm）是一种自适应学习率的优化算法，它通过将学习率分别应用于每个参数的梯度的平方来调整学习率，从而使得稀疏梯度的参数得到更大的更新，稠密梯度的参数得到较小的更新。Adagrad算法通常用于处理稀疏数据集和非凸优化问题。</p></li><li><p><strong>RMSProp</strong>：RMSProp（Root Mean Square Propagation）是一种自适应学习率的优化算法，它在Adam算法之前提出，通过计算梯度的平方的移动平均来调整学习率，从而加速收敛过程。RMSProp算法通常用于优化神经网络的训练。解决了AdaGrad学习率过快减小的问题。</p></li><li><p><strong>Adam</strong>：自适应矩估计算法，结合了随机梯度下降（SGD）和动量（Momentum）方法的优点，是目前非常流行的优化算法之一。</p></li></ul><h2 id="Adam算法的关键特性："><a href="#Adam算法的关键特性：" class="headerlink" title="Adam算法的关键特性："></a>Adam算法的关键特性：</h2><p>Adam（Adaptive Moment Estimation）是一种用于训练神经网络的梯度下解优化算法 以及 自适应学习率算法（lr会改变）</p><p>Adam 算法和传统的随机梯度下降不同。<br>随机梯度下降保持单一的学习率（即 alpha）更新所有的权重，学习率在训练过程中并不会改变。<br>而 <strong>Adam 通过计算梯度的一阶矩估计和二阶矩估计而为不同的参数设计独立的自适应性学习率。</strong></p><p><strong>自适应学习率：</strong> Adam算法能够为每个参数自动调整学习率，这是通过估计梯度的一阶矩（均值）和二阶矩（方差）来实现的。</p><p><strong>动量方法：</strong> Adam算法利用过去梯度的指数加权平均值来更新参数，这类似于动量方法，有助于加速收敛并减少震荡。</p><p><strong>计算效率：</strong> Adam算法在每次迭代中只需要计算一次前向和反向传播，这使得它在计算资源有限的情况下非常有效。</p><p><strong>内存效率：</strong> 与其他一些需要存储过去所有梯度的优化算法相比，Adam只需要存储一阶矩和二阶矩的估计值，因此内存使用更少。</p><p>梯度下降算法及其变体在深度学习中被广泛使用，它们通过有效地调整模型参数来最小化损失函数，从而训练出性能良好的深度学习模型。</p><p>应用：<br>Adam算法在许多深度学习任务中都非常流行，特别是在需要处理大量参数和复杂模型的场景中。它的优点包括：</p><p><strong>易于使用：</strong> 只需要调整少量超参数。<br><strong>快速收敛：</strong> 在许多情况下，Adam算法能够比传统的SGD更快地收敛。<br><strong>鲁棒性：</strong> 对学习率的选择不太敏感，因此在实际应用中更容易使用。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>夏令营机试</title>
    <link href="/2024/05/16/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E5%A4%8F%E4%BB%A4%E8%90%A5%E6%9C%BA%E8%AF%95/"/>
    <url>/2024/05/16/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E5%A4%8F%E4%BB%A4%E8%90%A5%E6%9C%BA%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6cede7f7238e5ec4a387e1b9db895d324ff5e45bf8e82f6dc4dcd9b354caa6b1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试问题问答</title>
    <link href="/2024/05/16/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%97%AE%E7%AD%94/"/>
    <url>/2024/05/16/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%97%AE%E7%AD%94/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="24e940988c7e13bef6459646d40945901afaedebe359c3386a592024a5d744e9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>医学图像处理</title>
    <link href="/2024/05/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <url>/2024/05/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="医学图像处理"><a href="#医学图像处理" class="headerlink" title="医学图像处理"></a>医学图像处理</h1><p><a href="https://blog.csdn.net/github_36597203/article/details/90638835">深度学习在医疗健康领域的应用概述</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>论文</title>
    <link href="/2024/05/13/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E8%AE%BA%E6%96%87-1/"/>
    <url>/2024/05/13/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E8%AE%BA%E6%96%87-1/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2994d8bf6233b701e84287a208061f9200eaeb58392646dc52aec550ac0ada6e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试总结</title>
    <link href="/2024/05/13/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2024/05/13/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c0d10fff6ff0a1c4e6946bce77ce7e468776e6f7479daba5220ea7766b2357ab">9ef5e081b4fe98a32076e025047ca199b8697f81cb35d436f11001bf982a82df5ab0c48ed9c5c873bca0e2865b24ad04a37ebd287328918fbbd9421c6f846de3ae95d58c0d94b9e1478cb8e3418f57360c93364defeaade1a64d3c9b0d20a98c250a6d9fa0f377b039614c9f798cdac78a0b8dabad11478594e0a66d7d41442cd78f5c8261b126cc5b375cdaa1d47411f71949107eec9485e49007f036678fae3639a4ce64ea1c00699706b421610d0c8ab76d26515cf5619ce8116c7a576b37a6aa80434424954d400061019f59b2efc7c2d14262264b7cc9b7e40292fe0588c652b5e135a6be3a2074db244da79e896840a9c12a355e27a646a023c15e3d8d2d69d306a17d5a4fdba2216cb65ed618a75aaf47af12bd2fa5b5b1aa9c0860bb3ccf109fb4d25b02dcf14139075756fd1259cb4df4fbc5b8eca9183338345fca53b785d67e3f6dee688b7c9e9889e6ce7090abac26aa5e31d8a5809c12d2156e4fd1dd69d3dac4c674c416f7ff0718a1fc780b41304e1bff091fbf75a6efbffa1e79dd7565b4cb107aa65f89c2af225be28c33dcfbc3c5ba9f43afe431656390e57cea92c9fedefc471251fad505cd11b923c1e801175aa3185c867d9c5285957d06a728e40d6de88f0fedc88060084b0953728e29daafe1aa277de16c1b929eefc6dac6abe8edb938e75eec9a72f8ca91017f545d1d4f44bc3e37edbf26b6137d3d7b391869da6bd3fa9b3eff173ffa4166e4bd2621c7fab4ab99a14916763cc45ecb508f38c8bdaa49549c3cc8a7690bf79afb5ca9ed0c87e7e5f399db0a38fed34a66e86f4383d10b0cc025594e8fcfadad4341274420acf4427f20fea2126ede3ac234a4b441b72b3715e3e5cdc5ab8ed1566328a931a0dd9eaa5f1c6bd0c8d3a03edbd8c09e8218c605f0d4c53132f599d02b1cf0a3dc822b44a8d259e7d355d9db4cb5eb6dfe0d8a6273a60c899354d2b61d5335a3c37600d8a38bc910136d4379c0622a4b24bea65e38ac511565acbca23639ae1848f5ef01989876368d9eb5b9372dca6b6bc2d44c07c9c24af53477314fb1990fcbb9af1145fc6b28bd8ab53c731445c7847116175b250052e550ba78125217a3f7376206fcc4e1edb636b933e7f8baccc75684a061b55c62b96bfff4094517c3bd774ff199d711974fd50394a8ff03d6b83e16a0f7db35038b6b0c037a2e34f370471b023f18b732444711dd58440121972b48eb7703839edf01022ca0fcdd0dc73d490ffbe55bbaec6e736bdd9e2af9a3889ef68db7c61dbb4337c497b8a5de34d67e870082915058674219bbd7300be65cc558537bb57556247ec0781bbfe032dc2231cf60fa549ea25375a83ae50afa41c740f71be67f3fbaade4bb8fa9ff57164a873bd60418fb9757071404339e3d8e6b0bc7b52f4420f2970689a9700099e43c9ddabe5c370623301422f295a452ba2fe632aaddd01735ba908818c190012e78aaf4bc591e8e827704b3e5b669b301b622b46af616b449f84f4d4a06a1f44dddd2cd66c8bf8b1883f32bd293a50206dddb61079cf35eca9297df4f03fb25c60f23245d09ccb556abf4c29ca17c604d7ed55b8707035e6a9ab4c74d63ff5d629e6109da8d7d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试准备</title>
    <link href="/2024/05/12/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <url>/2024/05/12/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2ca2fe6d252ff92da2fa2c17051ffeb5253a8ad73bbb0dd8418a141fcfa6483b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数学原理</title>
    <link href="/2024/05/12/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E6%95%B0%E5%AD%A6%E5%8E%9F%E7%90%86/"/>
    <url>/2024/05/12/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E6%95%B0%E5%AD%A6%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h1><h2 id="大数定理"><a href="#大数定理" class="headerlink" title="大数定理"></a>大数定理</h2><p>大数定理是概率论和统计学中的一个基本概念，它描述了当样本数量足够大时，样本均值会趋近于总体均值的性质。大数定理有两个主要的形式：</p><ol><li><p><strong>切比雪夫大数定理</strong>：如果随机变量的序列 (X_1, X_2, …, X_n) 具有相同的期望 (E(X_i) &#x3D; \mu) 和有限的方差 (Var(X_i) &#x3D; \sigma^2)，那么样本均值 (\overline{X} &#x3D; \frac{1}{n}\sum_{i&#x3D;1}^{n} X_i) 会以概率 1 收敛到 (\mu)，即随着 (n) 的增加，样本均值的分布越来越集中于 (\mu)。</p></li><li><p><strong>伯努利大数定理</strong>：特别地，当每个 (X_i) 都是独立同分布的伯努利试验（即只有两种可能的结果，成功和失败，且每次试验成功的概率为 (p)），则样本均值 (\overline{X}) 收敛到 (E(X_i) &#x3D; p)。</p></li></ol><p>大数定理在统计推断、机器学习、金融风险评估等领域都有广泛的应用。它为从样本推断总体提供了理论基础，尤其是在估计总体参数时。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git操作</title>
    <link href="/2024/05/09/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/git%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/05/09/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/git%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h1><ol><li>git clone</li></ol><blockquote><p>克隆仓库 <code>git clone https://github.com/cs-lb/lnnu_medicine_order.git</code><br>2. git checkout -b {分支名称}</p></blockquote><blockquote><p>在本地创建一个分支</p></blockquote><ol start="3"><li><p>在本地分支修改代码</p></li><li><p>提交本地修改，在远程仓库创建同名分支，并推送过去</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git add .<br>git commit -m <span class="hljs-string">&quot;commit message&quot;</span><br>git merge <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> push -u origin &#123;分支名称&#125;<br></code></pre></td></tr></table></figure></li><li><p>在远程仓库对应项目中请求合并<br>GitHub操作流程：进入Pull requests选项卡页面，找到New pull request按钮，填写相关信息，点击Create pull request按钮。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>语义分割</title>
    <link href="/2024/05/07/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    <url>/2024/05/07/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="语义分割"><a href="#语义分割" class="headerlink" title="语义分割"></a>语义分割</h1><h2 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h2><p>平均交并比 (Mean Intersection over Union, <strong>MIoU</strong> )：计算每一类的IoU，然后求平均值，是语义分割问题中常用的评价指标</p><p><img src="/../../img/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>国家级大创</title>
    <link href="/2024/05/03/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E5%9B%BD%E5%AE%B6%E7%BA%A7%E5%A4%A7%E5%88%9B/"/>
    <url>/2024/05/03/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E5%9B%BD%E5%AE%B6%E7%BA%A7%E5%A4%A7%E5%88%9B/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5d31177e4b8c5b2bac801c8a10ef0c5d64c90459889cca16a252d69fcbddf257">9ef5e081b4fe98a32076e025047ca199b8697f81cb35d436f11001bf982a82df0f2e145d0299816675f1a838ab97e492131b8d6268943df49588620c0f569569f59ed0203bf291ecc36cc39fa657242a608f98976db5734550c54c32c21c75539f97a0817f52aefd1dc0350ae53b8c0bfc142f6d2dfea8c205257dac2b530a45bf6e1e7c7626d10c141d28677e57649d3056ab3425fa7b5dcc335a9877ac563f46bea071e8724b609bd85fd0cfa52bfc3255d9fe1abf8d6ae625b5633e4c2d5e6c18acad0d2b4b0380b24f7046c5fa04b778b36bb45e0cce20841bb36972f3e1be59aed0a4cc5300edb72689253287d71f2a2f8ecd641df716c06f6df53fc2903023271d9d025c73893aec78fc315e5fb72a2fe7e2eef9568492b891a1f9463100788deb19d035b3e162c023d704bb5f688eb97f0c92578e39c89f2286d9239bfd91580281355237c6a06dfc3dd52527c26e5b53f28c246a6e7f9ccc05d704797c77ab3f11e1867bdc8e961ed086df246009054eb08dd124b3598adbba3f7518ed8b6a429f22d37f440fd531b08c53c7c858a8f43fb614ddcdddde7e786c1d216082bfe7fb3eb8e22d3f753e1bd0ff7f987ea4042f5d1f8232e4099ff19a8e8f76aa644bccb6312af2496fd67d2359887fefe5dce34d750f32882a265704e9ba6dcb9c2bf87e3d7f6c6a2d8495a4eef180ca01f1e2a1374a839a572903392805a94f31f5c07c86de5953feff6a177099253676ce9301ad548aa23b983c0bbcd66cad0032208698403e467167f0ab0905c1e77e5c9f5ea4d36d242f9f6bb4588255228ff4dae2bbf62cfe0a3ed31aeac3e33d21bb609afe220b3d13a52f59edc4d78a6c7c837e22a5456e2c013062a02fd13a6e109b42655abaa3a17c4521770a53dabcfecbca6c0f92c75b6b35e50e330675a793637753729d563867ce0f1502ea123e4bac5389c72ce894555c72769ed4234118303f791f055470724745a1db8ea433198d694ca94fd42349af075d8d2de251d51af2f90ff71cc9a9d54e32a8c3c4e1b31f9cf388964b42fe9364acf3c7a34b57b7c5ad246d14cf3f70b1bfea92fee6430456f6b437be10d68eeb5537d15a06b56078bea94fae3c93cb52530b8918dbfd3299bce3f153e453266bbdd6fad9b0f073c30cfc62e792b73fbebd93aa5f1e44dcd8937fcdd721dba62e01d0a3973df68524deb61d06e19579d399686d885b0a3bcb9973fafd528347d4c87b6eaa223a5a57ec7229e7f9bb36c43f4004e6779e1a7b3ef4e95e18eac0f8415d3d56484dabcc8444066ce60d8bc1ab995b77c01f43d7df5f6ee2665329844914039b17872fb0c6659dfb10997c555a3747ce0c84dbfc3283faada7273ed456c4756faba0178326da9059225bfbaa15fc54d5b03e955f1c1aada88dab14a802756806262b4cd4d514b01cf8c38048890ae618f75e1ff36681b86ba8c9dd621be8af0d80c30a63b64152ebb7c45a907d9984c4ee22fc1be2e7a17fb8720db8ff21b66ca9112f1d5896975c917954e2ace9bda28bf88371088e81d00d263af4d7c757d463cfd15f215bacb9a24c0c1c930b24a466a4844502859902a46cad31a0ed40a56647bae5cb41dbf4d9f33289086f6ef9a63f117ec8f7cd3846ee1fe4f04b9863049f77fa50f84af678d2b24f45bc87cc9f1f6088f1d4edfcfd10b32382f9bd0895b07be3e4663a0167225983eaad35ed5c193a6356557d50b371a77153639cae2bec8639d387dfba66fb9779e83e8409447168403c07cf63dda04022f6cdc42e1eee8c6fe5edb12c4ba65f5729b3e17a9f309d71f79e8f16b5284ec7902b1320db1e915221ee7dd266e99fcd3282bf9d695895586c0d431d6d12816c7a4934050ef57905f7e6e4899cf47adedeab7c0253ecd18ffb1111af53c3e1fbf64a61183e5bfa3d1376c46ffd2d9ec4f25b75e8d93050477f9cf180372dae0bcc52c0bfadcd1b736630359b37b9d671a5017b9970efcb482e8ea852275fcdad52e12363685e09d52d12b2f23dab4e15716010311f4299225e51e84c04c9d7a2c05877b94d4a12f0695cf9d031819f55324f0b31d04bfe270b84bd7e26c27a9d839f3893ec0348c22434b057e8eb3ff80fe845df21c76d52d85a3c315b16b6e1fad6fda194aa304e0dba802b0f570619dd0fd9b21ff205d417bfd5c58727d3913f7898a8b6cdf832d28dcf858fd7cf25d059d7a781df1b17be9eb59bf829bdc15981def101ea8ce108590cfc9212ad463ba08948c519bce6ec3be0aa6346eaa5227c897df7bf886e753b7e3da4f4fb914bc8e71ce4569e966d0d9b593b23e3b2f2a37796910880ecc42edf2ca8a0da6a647fde2655dc9d2655740d9a6578e00dce67faae4b66ea80ba3f5d06be38b1856e18fa08fa539aac10f357fe2960fa87f84c226dd52c757b3880b59046928485dc2c6b0a016ff9eded68ec89e8c359cc8c67b45b46ffd1aebc95d0c8d3533dab8adeaeeee07317d1b3db096853314be05ff866fb1f9d82858d5c85fe44fff7c577f75f02eeacebe4b6a5a218d44bb4cf9b7cd305270b891eb8350fb89fa9d7173fc19836676701cf4d7c4256efa4edd43887e5775dbbba9836e0218b02d47741668405fffcd9c0b23061a4a3fbec88b78e288d4f85999840c7017399b8c86a67a3f95e493c8eb3559e70d393b749490c096a19b99d2b495801945dde63738fac21fe471eb4f2ac5cd368a18a6c44262cd2fb04f46134db658e1d035dd94ff19564f22a64cc6756f6575f3dc9a7f02bd85e079c3690d026c5a0102f3f143df450cc56d3f56ae4b6e5faffab3e03aae57351620eb45d94f78dcac4b0a0c972051e244a5e0a16416378737d8218b4b10034861b3798b790a42e05001ef5e4f26b2abcabc2d3b5aa901e4d94537bdfcce9419d2e6387e6a0a7d6b2605b9d13411eda311776df7ba5a8a9a12b96d50b1a8baf799970af0013db513a1b6d50253ddd8c85fbe5d94530040c84fb176f8e0a8690775044a9ab458222d909c4db18147a101a7d6cdcddd061f5cdc6fac5297356e6dbd81960e8b7f20abb426dee83c9e8d81dc7382d243f43791d4a843e0d6e8a51af80257b44ab268f01b115cfda7b2ce5a0ca2125afab2edfbce920030490140474daeea29d4c7dbff65d792136fe8b8a9706a3007692d1abd575afc1bea52e39c26e2330c8d8589222928eb5c373c1c0dd57bfa87cf5073c68411c9106b533d456fee19b5da19ebe3d5cf4f410eece1007b86aa717170c3032e2c0e55542119b8bacfc899decbcd2512e67a8cd5c6460d746295de5437d5723e5eed1f30fab4a63105e79aa3a7c0ecb33e09067c2b0b4566be680200f527acd1139337861eacfb6723a3fa861725f907a3e39e6c136edbcdf8f3de80bc99626ecd475482ae88cf3e236c5013ed110e6e7b35ec17b17b0643e36e21b6b1711ebd9d1844fc01404b7bce572d3d7fb0e321679fafb31db6b0299c4492068d787e77fe27e48618005f87b5909cd6ae073a9bc2eb3198567249595e133888f7866aff2c9356ea69662e6c94caa4dcec73e0d910d7d71baba8e2519df56450aab17411896a18151cb9b9dd4a96552f93037b8ea5829939f88058bffe479a45ee349c6e16c047f90308ac45d29bfcca396da0a23f4a29a82d7c15130a1db60c91e7bb2c1927bcb922faae368b323b63f85bf6976f64473a2e044c64121f7ec936bc7749b4168dd790d03e9c44a6142b9676b9edf58caf188abf7ed22b192e516fb1e33121185262ff05aadaa6c3399b0d278d7f7b5f2d76ed47be8d974e08c554d3cbfc1132d25c4003b1721248c8c687a0d20ef15ec8a2c9bab8590ac29d6a03e9c810c47c64a657583d7396a85f3afdfb4453fc4e0f9a5b3e8fcff0bf14ebb05f8e95927a2b3aa2935fcd9f54ebe59754961d2c9c5da7fc33b3d5c70c7a6de0f652bc0e5a295d6f9c60c7fd01e29dfb4155d38cf82e3a51f55c51c78789d1adb9839487f82cfed22799f1d75ef2afc158b0c2722f02f3b63785062efc4e54774bc11412e96c1a28151a9b35904e1fe18fc89c1ae8c616e6954933aa60ba7a9f2fef3eda8cc7a5a35b3c0a21c234754ad22de4bd750bb0226f4f600ac634a72bd9e31e8e400452cecb9feb6d3284bd0bc06e74c11b970463793dfad816fb1d8a195c3051e0631738712116b5a74983ea5963d308f6a83fe5411c1cc529922a4f17269b230111ab39155695cfb88e10b7d4aec6dfad920cabc6ab9fea2af23505573f3a15faf4c6b0853de6c34918623d74168ae435e50e5074d558500ffe35c92c659e44aeaed51b12b5e4938d10b641d8cd9a51dea5ef1de9fece950c090519bbcbf582062d83afb8a524180644fb322331e4a4b6d44498c382bd159e3a911ed261f20a2ad040cf8fc2baeeb1da9832bb00caf35e7f3aba8348abe1dd2cc41f627781011d35794a498d97a81d793390a3428f26256261c34a4f698</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Swin-transformer</title>
    <link href="/2024/04/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Swin-transformer/"/>
    <url>/2024/04/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Swin-transformer/</url>
    
    <content type="html"><![CDATA[<h1 id="Swin-transformer"><a href="#Swin-transformer" class="headerlink" title="Swin-transformer"></a>Swin-transformer</h1><h3 id="mask-作用"><a href="#mask-作用" class="headerlink" title="mask 作用"></a>mask 作用</h3><p>swin采用了滑动窗口的机制</p><p>好处是之间被分割的小窗口只能在窗口内部通信，大窗口滑动后能够使得曾经不能在一起通信的图像像素现在能互相计算了。</p><p>大窗口滑动后，将被移出去的图像又对称性得移动到大窗口中来。此时为了限制原始图像时不是挨着的窗口 就算移动后现在挨着了也不能相互通信，因此采用mask方式来限制（即给想要丢弃的部分赋值为无穷或者-100，使得其softmax之后为0）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>注意力机制</title>
    <link href="/2024/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
    <url>/2024/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="注意力机制"><a href="#注意力机制" class="headerlink" title="注意力机制"></a>注意力机制</h1><p>注意力机制相关介绍链接</p><p><a href="https://blog.csdn.net/qq_52785473/article/details/125804579">深度学习中一些注意力机制的介绍以及pytorch代码实现</a></p><h2 id="注意力机制的种类"><a href="#注意力机制的种类" class="headerlink" title="注意力机制的种类"></a>注意力机制的种类</h2><ol><li><p>聚焦式注意力和显著性注意力</p><ul><li>聚焦式注意力：</li><li>显著性注意力：</li></ul></li><li><p>通道注意力（Channel Attention），空间注意力（Spatial Attention），分支注意力（Branch Attention），自注意力（Self Attention）和交叉注意力（Cross Attention）</p></li><li><p>软注意力和硬注意力<br><strong>软性注意力机制</strong> 可以理解为表示的是所有输入向量在注意力分布下的期望<br>而硬性注意力关注某一个输入向量。</p></li></ol><p>硬注意力实现：选取最高概率的一个输入向量</p><p><strong>硬注意力缺点：</strong> 最终的损失函数与注意力分布之间的函数关系<strong>不可导</strong>，不能反向传播来训练，需要使用强化学习训练。</p><h2 id="注意力机制的计算"><a href="#注意力机制的计算" class="headerlink" title="注意力机制的计算"></a>注意力机制的计算</h2><p><strong>注意力机制的计算</strong>可以分为两步：<br>一是在所有输入信息上计算注意力分布<br>二是根据注意力分布来计算输入信息的加权平均</p><p>卷据、池化、全连接都是只考虑不随意线索<br>而注意力机制考虑随意线索。</p><ul><li>随意线索被称为查询（query）</li><li>每个输入是一个值（value）和不随意线索（key）的对</li><li>通过<strong>注意力池化层（最大汇聚）</strong> 来有偏向性得选择某些输入</li></ul><p>注意力就是从一堆线索中根据指定的规则挑选出需要的线索。类似于池化层去降维的感觉，可以节省计算资源。将注意力集中到有用的信息上，不要在噪声中花费时间</p><p><img src="/../../img/attention%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><ol><li>根据 queay 和 key 计算两者的相似性或者相关性</li><li>对1的原始分数进行 softmax 归一化处理</li><li>根据权重系数对 value 进行加权求和</li></ol><p>$$<br>f(q) &#x3D; \alpha(q,k_1)v_1 + \alpha(q,k_2)v_2 + \alpha(q,k_3)v_3 &#x3D; \sum_{i&#x3D;1}^3\alpha(q,k_i)v_i<br>$$</p><p>$\alpha(q,k_i) &#x3D; softmax(a(q,k_i))$<br>注意力权重 &#x3D; softmax(注意力分数)</p><p>注意力分数可以通过以下几种模型计算出来<br><img src="/../../img/%E6%B3%A8%E6%84%8F%E5%8A%9B%E5%88%86%E6%95%B0.png"></p><p>vit中的自注意力机机制采用的就是缩放点积注意力模型</p><p><img src="/../../img/attention%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B.png"></p><h2 id="vision-transformer中Attention是怎么计算的"><a href="#vision-transformer中Attention是怎么计算的" class="headerlink" title="vision transformer中Attention是怎么计算的"></a>vision transformer中Attention是怎么计算的</h2><p>Vision Transformer (ViT) 是一种将 Transformer 架构应用于图像分类任务的模型。Transformer 架构最初是为自然语言处理任务设计的，它的核心是自注意力（Self-Attention）机制，ViT 将这一机制扩展到了视觉领域。</p><p>在 Vision Transformer 中，图像首先被划分为多个小块（称为 Patch），然后这些小块被线性投影到一个固定维度的嵌入空间中。随后，这些嵌入被送入 Transformer 模型中进行处理。</p><p>Attention 机制的计算可以概括为以下几个步骤：</p><ol><li><p><strong>查询（Query）、键（Key）、值（Value）的计算</strong>：</p><ul><li>对于输入的每个 Patch 嵌入，模型会分别计算其对应的查询（Q）、键（K）和值（V）。这通常通过三个不同的线性层实现。</li></ul></li><li><p><strong>注意力分数的计算</strong>：</p><ul><li>使用查询（Q）和键（K）计算注意力分数。具体来说，对于每个查询，模型会计算它与所有键的相似度，这通常通过点积（dot product）来实现：<br>[ \text{Attention Score} &#x3D; \frac{Q \cdot K^T}{\sqrt{d_k}} ]<br>其中，( Q ) 和 ( K ) 分别是查询和键的矩阵，( K^T ) 是 ( K ) 的转置，( d_k ) 是键的维度，分母中的 ( \sqrt{d_k} ) 是为了稳定训练过程中的梯度。</li></ul></li><li><p><strong>Softmax 归一化</strong>：</p><ul><li>计算得到的注意力分数通过 Softmax 函数进行归一化，使得所有分数的和为 1，这样可以得到每个查询对于每个值的注意力权重：<br>[ \text{Attention Weights} &#x3D; \text{Softmax}(\text{Attention Score}) ]</li></ul></li><li><p><strong>加权值（Value）的计算</strong>：</p><ul><li>使用归一化的注意力权重对值（V）进行加权求和，得到最终的输出：<br>[ \text{Output} &#x3D; \sum (\text{Attention Weights} \cdot V) ]</li></ul></li><li><p><strong>多头注意力（Multi-Head Attention）</strong>：</p><ul><li>在 Transformer 中，通常会使用多头注意力机制，即上述过程会被复制多次（头数），每个头学习到的是输入的不同表示。最后，所有头的输出会被合并起来，通常是通过拼接（concatenation）和再次线性变换来实现。</li></ul></li><li><p><strong>位置编码（Positional Encoding）</strong>：</p><ul><li>由于 Transformer 架构本身不具备捕捉序列顺序的能力，因此在 Vision Transformer 中，需要为图像的每个 Patch 添加位置编码，以提供位置信息。</li></ul></li><li><p><strong>层归一化（Layer Normalization）和残差连接（Residual Connection）</strong>：</p><ul><li>在每个注意力块之后，通常会使用层归一化和残差连接来促进深层网络的训练。</li></ul></li></ol><p>Vision Transformer 通过这种注意力机制能够捕捉图像中不同区域之间的关系，从而实现有效的图像表示学习。这种模型在多个视觉任务中展现出了与卷积神经网络（CNN）相比拟或更优的性能。</p><h3 id="层归一化和残差连接的作用"><a href="#层归一化和残差连接的作用" class="headerlink" title="层归一化和残差连接的作用"></a>层归一化和残差连接的作用</h3><p>层归一化（Layer Normalization）和残差连接（Residual Connection）是深度学习中两种常用的技术，它们在提高网络训练效率和性能方面起着重要作用，尤其是在深度网络中。</p><p><strong>层归一化（Layer Normalization）</strong></p><p>层归一化是一种归一化技术，旨在在网络的每一层对输入进行归一化处理。与传统的批量归一化（Batch Normalization）不同，层归一化是在单个数据样本的层面上进行归一化，而不是在整个批次上。</p><p><strong>作用</strong>：</p><ol><li><strong>减少内部协变量偏移</strong>：层归一化通过规范化处理，减少了网络内部的协变量偏移问题，这有助于加速收敛速度。</li><li><strong>提高模型稳定性</strong>：由于归一化减少了不同层间的尺度差异，这有助于网络训练过程中的稳定性。</li><li><strong>允许更高的学习率</strong>：由于层归一化减少了梯度消失或爆炸的问题，因此可以使用更高的学习率进行训练。</li><li><strong>简化网络初始化</strong>：归一化层使得网络对初始化不那么敏感，从而简化了网络的初始化过程。</li></ol><p><strong>残差连接（Residual Connection）</strong></p><p>残差连接，也称为跳跃连接（Skip Connection），是一种允许网络中的信号绕过一层或多层直接传递的技术。</p><p><strong>作用</strong>：</p><ol><li><strong>缓解梯度消失问题</strong>：在深层网络中，梯度可能会随着层数的增加而迅速减小，导致深层网络难以训练。残差连接通过直接连接层，帮助梯度直接流向前面的层，从而缓解了梯度消失问题。</li><li><strong>提高模型容量</strong>：残差连接允许模型学习残差函数，这意味着模型可以学习到恒等映射（即直接传递输入到输出），这增加了模型的容量。</li><li><strong>网络深度的扩展</strong>：残差连接使得可以训练更深的网络结构，因为它们减少了随着网络深度增加而性能下降的问题。</li><li><strong>提高训练速度</strong>：残差连接有时可以加速模型的训练过程，因为它们允许网络更快地收敛。</li></ol><h3 id="在-Transformer-架构中的应用"><a href="#在-Transformer-架构中的应用" class="headerlink" title="在 Transformer 架构中的应用"></a>在 Transformer 架构中的应用</h3><p>在 Transformer 架构中，层归一化和残差连接被广泛使用：</p><ul><li><strong>层归一化</strong>通常应用于多头自注意力机制和前馈网络的输出上，以稳定训练过程并提高性能。</li><li><strong>残差连接</strong>则被用于连接自注意力层和前馈网络的输入与输出，确保信息可以在网络中直接流动。</li></ul><p>这两种技术的结合使得 Transformer 架构能够有效地处理长距离依赖问题，并在多种任务中取得了显著的性能提升。</p><h3 id="为什么要使用缩放点积"><a href="#为什么要使用缩放点积" class="headerlink" title="为什么要使用缩放点积"></a>为什么要使用缩放点积</h3><p>点积之后方差为 $ d_k $</p><p><a href="https://blog.csdn.net/ytusdc/article/details/121622205">为什么在进行softmax之前需要对attention进行scaled</a></p><h3 id="多头注意力计算"><a href="#多头注意力计算" class="headerlink" title="多头注意力计算"></a>多头注意力计算</h3><p>是的，多头注意力机制（Multi-Head Attention）在每个头内部独立进行注意力计算。这种机制是 Transformer 架构的关键组成部分，它允许模型同时从不同的表示子空间中捕获信息。</p><p>以下是多头注意力机制的一般步骤：</p><ol><li><p><strong>线性投影</strong>：输入序列首先被分割成查询（Query）、键（Key）和值（Value）三个部分，并且每个部分都通过独立的线性层（即一维卷积）进行投影，以生成不同头的输入。</p></li><li><p><strong>分割为头</strong>：每个部分（Q、K、V）被分割成多个头，每个头处理输入序列的一部分信息。</p></li><li><p><strong>并行处理</strong>：每个头独立地计算自注意力，即在每个头内，使用 Query 和 Key 计算注意力分数，然后这些分数用于加权 Value。</p></li><li><p><strong>拼接头</strong>：所有头的输出被拼接在一起，形成一个较长的序列。</p></li><li><p><strong>最终线性投影</strong>：拼接后的序列通过另一个线性层进行投影，以生成最终的输出。</p></li></ol><p>在数学上，如果我们有 ( L ) 个头，每个头的注意力计算可以表示为：</p><p>[ \text{Attention}^l(Q, K, V) &#x3D; \text{softmax}\left(\frac{QW^Q_l K^T W^K_l}{\sqrt{d_k}}\right) W^V_l V ]<br>[ \text{Output} &#x3D; W^O \left[ \text{head}_1; \text{head}_2; …; \text{head}_L \right] ]</p><p>其中，( W^Q_l, W^K_l, W^V_l ) 是第 ( l ) 个头的线性层权重，( d_k ) 是 Key 的维度，( W^O ) 是最终输出的线性层权重。</p><p>多头注意力机制的主要优点</p><ol><li>它能够使模型<strong>在不同的表示子空间中捕获信息</strong>，增强了模型的表达能力。</li><li>每个头可以学习到序列的不同方面，例如，一个头可能专注于捕捉短距离依赖，而另一个头可能专注于长距离依赖。最终，所有头的信息被整合，以<strong>获得全面的序列表示。</strong></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>激活函数</title>
    <link href="/2024/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    <url>/2024/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><p><a href="https://blog.csdn.net/hy592070616/article/details/120616475">机器学习中的数学——激活函数：基础知识</a></p><h2 id="sigmoid"><a href="#sigmoid" class="headerlink" title="sigmoid"></a>sigmoid</h2><p><strong>Sigmoid函数：</strong> Sigmoid函数将输入值映射到0和1之间，具有平滑的S形曲线。其数学表达式为 [<br>\sigma(x) &#x3D; \frac{1}{1 + e^{-x}}<br>]<br>，适合用于二分类问题输出概率值</p><p>特点：它能够把输入的连续实值变换为0和1之间的输出，特别的，如果是非常大的负数，那么输出就是0；如果是非常大的正数，输出就是1.</p><p>由于所有隐藏层的输入输出都为0—1之间，这个值所对应的sigmoid导数值为0.2到0.25，着意味着每反向传播一层，就会缩小4到5倍。从而导致梯度消失的问题</p><p>缺点：</p><ol><li>容易造成梯度消失和梯度爆炸</li><li>耗时（数学表达式含有幂运算）</li></ol><h2 id="Tanh（双曲正切）"><a href="#Tanh（双曲正切）" class="headerlink" title="Tanh（双曲正切）"></a>Tanh（双曲正切）</h2><p><strong>Tanh函数：</strong> Tanh函数是双曲正切函数，将输入值映射到-1和1之间。其数学表达式为 $f(x) &#x3D; (exp(x) - exp(-x)) &#x2F; (exp(x) + exp(-x))$ ，比Sigmoid函数范围更广，常用于隐藏层的非线性变换</p><p>优点：解决了Sigmoid函数的不是zero-centered输出问题</p><h1 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h1><p>ReLU函数其实就是一个取最大值函数<br><strong>ReLU（Rectified Linear Unit）函数：</strong> ReLU函数将所有负的输入值设为0，而正的输入值保持不变。其数学表达式为 $f(x) &#x3D; max(0, x)$ ，简单且易于计算，被广泛应用于深度学习网络中</p><p>优点：<br>1） 解决了gradient vanishing问题 (在正区间)<br>2）计算速度非常快，只需要判断输入是否大于0<br>3）收敛速度远快于sigmoid和tanh</p><p>ReLU也有几个需要特别注意的问题：<br>1）ReLU的输出不是zero-centered<br>2）Dead ReLU Problem，指的是某些神经元可能永远不会被激活，导致相应的参数永远不能被更新。</p><p>有两个主要原因可能导致这种情况产生: (1) 非常不幸的参数初始化，这种情况比较少见 (2) learning rate太高导致在训练过程中参数更新太大，而接近于 0(这时在下一样本的计算中该神经元的值就会趋于为 0，随着而来的是权重的梯度为 0，权重无法更新，导致该神经元的值恒为 0)，那么这个神经元将永远处于死亡状态。</p><p>解决方法是可以采用Xavier初始化方法，以及避免将learning rate设置太大或使用adagrad等自动调节learning rate的算法。</p><p><strong>Leaky ReLU函数：</strong> Leaky ReLU函数在ReLU的基础上稍作修改，当输入值为负时不再直接变为0，而是乘以一个小的斜率值。其数学表达式为 $f(x) &#x3D; max(0.01x, x)$ ，<strong>有助于解决ReLU函数在负值区域的死亡神经元问题</strong></p><h2 id="奥卡姆剃刀"><a href="#奥卡姆剃刀" class="headerlink" title="奥卡姆剃刀"></a>奥卡姆剃刀</h2><p>神经网络方面，「奥卡姆剃刀」原则可以概括为「如无必要，勿增实体」，即在保证性能的情况下，训练使得模型的有效参数尽量少</p><p>ex. 理论上来讲，Leaky ReLU有ReLU的所有优点，外加不会有Dead ReLU问题</p><p>但是在实际操作当中，并没有完全证明Leaky ReLU总是好于ReLU</p><h1 id="softmax函数"><a href="#softmax函数" class="headerlink" title="softmax函数"></a>softmax函数</h1><p>Softmax激活函数是一种在机器学习和深度学习中常用的函数，特别是在处理多分类问题时。它将一个向量或一组实数转换成概率分布，使得每个元素的值都在0到1之间，并且所有元素的和为1。这使得Softmax成为分类问题中输出层的理想激活函数。</p><h3 id="Softmax函数的定义："><a href="#Softmax函数的定义：" class="headerlink" title="Softmax函数的定义："></a>Softmax函数的定义：</h3><p>Softmax激活函数在处理多分类问题时。它将一个向量或一组实数转换成概率分布，使得每个元素的值都在0到1之间，并且所有元素的和为1。这使得Softmax成为分类问题中输出层的理想激活函数。</p><p>给定一个向量 ( z )，其中 ( z_i ) 是向量中的第 ( i ) 个元素，Softmax函数 ( \sigma(z) ) 定义为：</p><p>[<br>\sigma(z_i) &#x3D; \frac{e^{z_i}}{\sum_{j&#x3D;1}^{K} e^{z_j}}<br>]</p><p>其中，( K ) 是类别的总数。</p><p>Softmax函数与正常的max函数不同：max函数仅输出最大值，但Softmax函数确保较小的值具有较小的概率，并且不会直接丢弃。我们可以认为它是arg max ⁡ \argmaxargmax函数的概率版本或“soft”版本。Softmax函数的分母结合了原始输出值的所有因子，这意味着Softmax函数获得的各种概率彼此相关。</p><p>Softmax激活函数的特点：</p><p>在零点不可微。<br>负输入的梯度为零，这意味着对于该区域的激活，权重不会在反向传播期间更新，因此会产生永不激活的死亡神经元。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li><p><strong>归一化输出</strong>：Softmax函数的输出是一个概率分布，每个类别都有一个概率值，这些值的总和为1。</p></li><li><p><strong>多分类适用性</strong>：Softmax函数适用于多分类问题，可以为每个类别输出一个概率，使得模型可以区分多个类别。</p></li><li><p><strong>数值稳定性</strong>：在计算过程中，由于指数函数 ( e^{z_i} ) 可能非常大，直接计算可能导致数值溢出。为了提高数值稳定性，通常会从 ( z ) 中减去 ( \max(z) )。</p></li><li><p><strong>梯度下降</strong>：在训练过程中，<strong>Softmax函数与交叉熵损失函数结合使用，可以方便地通过反向传播算法计算梯度。</strong></p></li></ol><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><ul><li><strong>多分类问题</strong>：在需要模型输出多个类别概率的场景中，如图像分类、文本分类等。</li><li><strong>神经网络的输出层</strong>：在构建深度学习模型时，通常在输出层使用Softmax激活函数，以便模型能够输出每个类别的概率。</li></ul><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>假设有一个简单的分类问题，有三个类别，模型的输出层有三个神经元，对应的 ( z ) 值分别为 ( z_1 &#x3D; 2 )，( z_2 &#x3D; 1 )，和 ( z_3 &#x3D; 0 )。使用Softmax函数，我们可以计算出每个类别的概率：</p><p>[<br>\sigma(z_1) &#x3D; \frac{e^2}{e^2 + e^1 + e^0} \approx 0.7310586<br>]<br>[<br>\sigma(z_2) &#x3D; \frac{e^1}{e^2 + e^1 + e^0} \approx 0.24472847<br>]<br>[<br>\sigma(z_3) &#x3D; \frac{e^0}{e^2 + e^1 + e^0} \approx 0.02421296<br>]</p><p>这样，模型就可以为每个类别输出一个概率值，这些值可以用于最终的决策过程。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深度学习超参数的介绍</title>
    <link href="/2024/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%B6%85%E5%8F%82%E6%95%B0%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%B6%85%E5%8F%82%E6%95%B0%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习超参数的介绍"><a href="#深度学习超参数的介绍" class="headerlink" title="深度学习超参数的介绍"></a>深度学习超参数的介绍</h1><h2 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h2><p><a href="https://blog.csdn.net/a910247/article/details/137590886">深入理解神经网络学习率(定义、影响因素、常见调参方法、关键代码实现)</a></p><p>深度学习中的学习率（Learning Rate）是一个至关重要的超参数，它决定了模型在训练过程中更新权重参数的速度与方向。在使用梯度下降法（Gradient Descent）或其变种（如随机梯度下降，Stochastic Gradient Descent, SGD）优化模型时，学习率扮演着核心角色。</p><p>具体来说，在每次迭代过程中，模型计算损失函数关于各个参数的梯度，这个梯度指示了参数应当朝着哪个方向调整以最小化损失。学习率就是这个调整过程中的“步伐”大小，即参数更新的量。数学表达式通常是这样的：</p><p><img src="/../../img/lr.png"></p><p>如果学习率<strong>设置得过大</strong>，那么在每一步迭代中，模型参数可能会跨过最优解，导致震荡或者发散，这被称为“振荡现象”或“不稳定性”。相反，如果学习率<strong>设置得太小</strong>，模型收敛到最优解的速度将会非常慢，而且可能会陷入局部极小点，而不是全局最优解。</p><h2 id="过拟合和欠拟合（Overfitting-and-underfitting）"><a href="#过拟合和欠拟合（Overfitting-and-underfitting）" class="headerlink" title="过拟合和欠拟合（Overfitting and underfitting）"></a>过拟合和欠拟合（Overfitting and underfitting）</h2><p>过拟合和欠拟合是导致模型泛化能力不高的两种常见原因，都是模型学习能力与数据复杂度之间失配的结果。<br><strong>“欠拟合”</strong> 常常在模型学习能力较弱，而数据复杂度较高的情况出现，此时模型由于学习能力不足，无法学习到数据集中的“一般规律”，因而导致泛化能力弱。<br><strong>“过拟合”</strong> 常常在模型学习能力过强的情况中出现，此时的模型学习能力太强，以至于将训练集单个样本自身的特点都能捕捉到，并将其认为是“一般规律”，同样这种情况也会导致模型泛化能力下降。</p><h3 id="Overfitting"><a href="#Overfitting" class="headerlink" title="Overfitting"></a>Overfitting</h3><p>过拟合（over-fitting）也称为过学习，它的直观表现是算法在训练集上表现好，但在测试集上表现不好，泛化性能差<br><strong>cause</strong></p><blockquote><ul><li>训练集的数据太少或者缺乏代表性；</li><li>训练集样本存在的噪音干扰过大，导致模型拟合了噪音的特征，反而忽略了真实的输入输出间的关系；</li><li>参数太多，模型复杂度过高；</li></ul></blockquote><p><strong>method</strong></p><ol><li>增加数据量</li></ol><ul><li>从数据源头获取更多数据；</li><li>通过数据增强对数据进行扩充：对图像进行翻转、裁剪、缩放、平移、添加噪声等。</li></ul><ol start="2"><li>正则化<br>在进行目标函数或代价函数（损失函数）优化时，在函数后面加上一个正则项，一般有L1正则、L2正则等。</li></ol><blockquote><ul><li><strong>L1正则化：</strong> L1正则化是通过在目标函数中加入L1范数惩罚项来实现的。L1范数是指权重向量W中的各个元素绝对值之和，因此L1正则化的目的是使模型参数尽可能地稀疏。L1正则化可以促使模型参数向零值收缩，进而减少特征的数量。</li><li><strong>L2正则化：</strong> L2正则化是通过在目标函数中加入L2范数惩罚项来实现的。L2范数是指权重向量W中的各个元素的平方和开根号，因此L2正则化的目的是通过约束模型参数的平方和，使得它们的值不会过大。L2正则化可以帮助避免模型的权值过拟合，并使得模型更具有鲁棒性和泛化能力。</li></ul></blockquote><blockquote><p><strong>区别：</strong> L1正则化减少的是一个常量，L2正则化减少的是权重的固定比例；使用L1可以得到稀疏的权值，使用L2可以得到平滑的权值；实践中L2正则化通常优于L1正则化。</p></blockquote><ol start="3"><li>Dropout<br>Dropout 是一种常用的正则化技术，用于减少深度神经网络的过拟合现象。Dropout 在训练过程中随机地丢弃一部分神经元的输出，从而强制模型去学习其他特征的表示。</li></ol><p>欠拟合（Underfitting）是指模型在训练数据上的表现就不够好，无法捕捉数据的基本趋势和模式，导致模型的预测或分类能力较差。以下是欠拟合的原因和一些解决方案：</p><h3 id="欠拟合的原因"><a href="#欠拟合的原因" class="headerlink" title="欠拟合的原因"></a>欠拟合的原因</h3><ol><li><p><strong>模型太简单</strong>：如果模型结构过于简单，可能无法捕捉数据的复杂特征和关系。</p></li><li><p><strong>训练数据不足</strong>：过少的训练样本可能导致模型无法学习到足够的信息。</p></li><li><p><strong>特征选择不当</strong>：如果重要的特征被忽略或未被正确使用，模型可能无法学习到数据的真实结构。</p></li><li><p><strong>训练时间不足</strong>：模型可能需要更多的迭代次数来充分学习数据的特征。</p></li><li><p><strong>学习率过高</strong>：如果学习率设置得过高，可能导致模型在训练过程中震荡，无法收敛到最优解。</p></li><li><p><strong>正则化过度</strong>：过度的正则化可能会限制模型的复杂度，导致模型无法拟合数据。</p></li><li><p><strong>数据预处理不当</strong>：如数据未归一化或标准化，可能导致模型训练效果不佳。</p></li><li><p><strong>错误的模型选择</strong>：选择了不适合当前数据分布和问题的模型。</p></li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p><strong>增加模型复杂度</strong>：增加模型的层数或神经元数量，使模型能够捕捉更复杂的特征。</p></li><li><p><strong>获取更多数据</strong>：增加训练数据量，提供更多的信息供模型学习。</p></li><li><p><strong>特征工程</strong>：通过特征选择、特征提取或特征构造等方法，增加模型的预测能力。</p></li><li><p><strong>延长训练时间</strong>：增加迭代次数，让模型有更多的机会学习数据。</p></li><li><p><strong>降低学习率</strong>：适当降低学习率，确保模型能够稳定地收敛。</p></li><li><p><strong>减少正则化强度</strong>：减少L1或L2正则化项的系数，或使用其他类型的正则化方法。</p></li><li><p><strong>数据预处理</strong>：确保数据被正确地预处理，如归一化、标准化或去噪声。</p></li><li><p><strong>选择合适的模型</strong>：根据数据的特点和问题的需求，选择合适的模型类型。</p></li><li><p><strong>使用集成学习</strong>：通过组合多个模型的预测结果，提高模型的整体性能。</p></li><li><p><strong>调整训练策略</strong>：如使用不同的优化算法或调整其他超参数，可能会改善模型的训练效果。</p></li><li><p><strong>模型解释性</strong>：使用模型解释性工具来理解模型的预测，识别模型未能捕捉的特征。</p></li><li><p><strong>交叉验证</strong>：使用交叉验证来评估模型在不同数据子集上的表现，确保模型的泛化能力。</p></li></ol><p>通过这些方法，可以提高模型的拟合度，使其在训练数据上能够更好地捕捉数据的基本趋势和模式。在实际应用中，通常需要通过实验和调整来找到最佳的解决方案。</p><h2 id="损失函数、代价函数、目标函数"><a href="#损失函数、代价函数、目标函数" class="headerlink" title="损失函数、代价函数、目标函数"></a>损失函数、代价函数、目标函数</h2><p>当然，以下是对损失函数、代价函数和目标函数的总结，包括它们的定义和区别：</p><table><thead><tr><th>术语</th><th>定义</th><th>区别与联系</th></tr></thead><tbody><tr><td>损失函数（Loss Function）</td><td>衡量模型预测值与实际值差异的函数，用于训练过程中评估模型性能。</td><td>通常是代价函数的具体实现，关注单个样本的预测误差。</td></tr><tr><td></td><td>例如：均方误差（MSE）、交叉熵损失（Cross-Entropy Loss）</td><td></td></tr><tr><td>代价函数（Cost Function）</td><td>衡量模型整体性能的函数，通常是损失函数对所有样本的累积或平均。</td><td>比损失函数更广泛，可以包含正则化项等，用于选择最优模型参数。</td></tr><tr><td></td><td>例如：正则化的均方误差、总交叉熵损失</td><td>通常是训练过程中优化的目标。</td></tr><tr><td>目标函数（Objective Function）</td><td>用于优化问题的函数，通常结合了代价函数和其他考虑因素。（经验风险+结构风险）</td><td>可以包含代价函数，也可以包含其他优化目标，如公平性、可解释性。</td></tr><tr><td></td><td>例如：带有约束的目标函数</td><td>用于指导模型训练和评估，是最终优化的目标。</td></tr></tbody></table><h3 id="详细说明："><a href="#详细说明：" class="headerlink" title="详细说明："></a>详细说明：</h3><ul><li><p><strong>损失函数</strong>：</p><ul><li>用于衡量单个样本的预测误差。</li><li>常见的损失函数有：<ul><li><strong>均方误差（MSE）</strong>：[ \text{MSE} &#x3D; \frac{1}{n} \sum_{i&#x3D;1}^n (y_i - \hat{y}_i)^2 ]</li><li><strong>交叉熵损失</strong>：[ \text{Cross-Entropy Loss} &#x3D; -\frac{1}{n} \sum_{i&#x3D;1}^n [y_i \log(\hat{y}_i) + (1 - y_i) \log(1 - \hat{y}_i)] ]</li></ul></li><li>损失函数的选择取决于问题类型（如回归或分类）。</li></ul></li><li><p><strong>代价函数</strong>：</p><ul><li>通常指代整个数据集上的损失函数的总和或平均。</li><li>可以包含正则化项来防止过拟合，如：<ul><li><strong>L1正则化</strong>：[ \text{Cost} &#x3D; \text{MSE} + \lambda \sum_{j&#x3D;1}^m |w_j| ]</li><li><strong>L2正则化</strong>：[ \text{Cost} &#x3D; \text{MSE} + \lambda \sum_{j&#x3D;1}^m w_j^2 ]</li></ul></li><li>代价函数是训练过程中需要最小化的函数。</li></ul></li><li><p><strong>目标函数</strong>：</p><ul><li>综合了代价函数和其他优化目标（如约束条件）。</li><li>可以是多目标优化问题的一部分，考虑多个不同的目标，如：<ul><li><strong>准确性</strong>：模型的预测准确性。</li><li><strong>公平性</strong>：模型在不同群体上的表现。</li><li><strong>可解释性</strong>：模型决策的透明度。</li></ul></li><li>目标函数是最终优化的目标，指导模型的训练和评估。</li></ul></li></ul><p>在实际应用中，这些术语有时可以互换使用，但它们在概念上有所区别。理解这些区别有助于更准确地描述和优化机器学习模型。</p><h2 id="监督，无监督，半监督，弱监督学习"><a href="#监督，无监督，半监督，弱监督学习" class="headerlink" title="监督，无监督，半监督，弱监督学习"></a>监督，无监督，半监督，弱监督学习</h2><p>在机器学习和人工智能领域，这些术语描述了不同的学习模式和方法：</p><ol><li><p><strong>监督学习（Supervised Learning）</strong>：</p><ul><li>监督学习是一种机器学习类型，其中模型从标记的训练数据中学习。这些数据包括输入特征和相应的输出标签。</li><li>模型的目标是学习一个函数，能够从输入特征映射到正确的输出标签。</li><li>常见的监督学习任务包括分类（如垃圾邮件检测）和回归（如房价预测）。</li></ul></li><li><p><strong>半监督学习（Semi-Supervised Learning）</strong>：</p><ul><li>半监督学习是监督学习的一种变体，其中训练数据包含一部分标记样本和一部分未标记样本。</li><li>这种方法通常用于标签获取成本高昂，但未标记数据容易获得的情况。</li><li>半监督学习模型利用未标记数据来提高学习性能，同时利用标记数据来指导学习过程。</li></ul></li><li><p><strong>弱监督学习（Weakly Supervised Learning）</strong>：</p><ul><li>弱监督学习涉及到使用不精确或不完整的标签进行学习。这种标签可能是噪声较大的、部分正确的或非常粗略的。</li><li>与监督学习不同，弱监督学习不要求精确的标签，而是允许一定程度的错误或模糊性。</li><li>这种学习模式适用于标签获取困难或成本高昂的情况，例如从文本描述中自动提取信息。</li></ul></li><li><p><strong>无监督学习（Unsupervised Learning）</strong>：</p><ul><li>无监督学习是一种机器学习类型，其中模型从未标记的数据中学习，没有提供任何输出标签。</li><li>模型的目标是发现数据中的结构和模式，例如通过聚类或降维技术。</li><li>常见的无监督学习任务包括聚类（如市场细分）和关联规则学习（如购物篮分析）。</li></ul></li></ol><p>这些学习模式各有优势和适用场景，选择哪一种取决于具体问题的性质、数据的可用性以及所需的输出类型。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深度学习模型微调</title>
    <link href="/2024/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/"/>
    <url>/2024/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习模型微调（Fine-tuning）"><a href="#深度学习模型微调（Fine-tuning）" class="headerlink" title="深度学习模型微调（Fine-tuning）"></a>深度学习模型微调（Fine-tuning）</h1><p>由于在很多任务场景下，所能够使用到的数据集往往样本较少，这个时候就会思考能不能使用一些在较大数据集（如ImageNet）上训练好的模型，对其进行微调，进而运用在自己的领域任务上，即迁移学习和模型微调</p><ol><li>微调时通常使用更强的正则化、更小的学习率、更少的数据迭代</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python数据分析</title>
    <link href="/2024/04/25/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%A4%84%E7%90%86/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <url>/2024/04/25/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%A4%84%E7%90%86/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="python数据分析"><a href="#python数据分析" class="headerlink" title="python数据分析"></a>python数据分析</h1><h2 id="相关的库"><a href="#相关的库" class="headerlink" title="相关的库"></a>相关的库</h2><h3 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h3><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h3><h3 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h3><p>Matplotlib是一个用于绘制数据图表的库。它提供了各种绘图函数和工具，可以用于创建各种类型的图表，如折线图、散点图、柱状图等。以下是使用Matplotlib绘制折线图的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 创建数据</span><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>y = [<span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br><br><span class="hljs-comment"># 绘制折线图</span><br>plt.plot(x, y)<br><br><span class="hljs-comment"># 添加标题和标签</span><br>plt.title(<span class="hljs-string">&quot;折线图示例&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;X轴&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Y轴&quot;</span>)<br><br><span class="hljs-comment"># 显示图表</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>线性代数</title>
    <link href="/2024/04/24/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    <url>/2024/04/24/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><ol><li>矩阵SVD分解</li><li>矩阵能够相似对角化的充要条件</li><li>讲一讲SVM的原理</li><li>对特征值和特征向量的理解</li></ol><h3 id="1-线性变换"><a href="#1-线性变换" class="headerlink" title="1. 线性变换"></a>1. 线性变换</h3><p><strong>定义</strong>：<br>线性变换是指一个函数 ( T: V \rightarrow W )，它将一个向量空间 ( V ) 中的向量 ( v ) 映射到另一个向量空间 ( W ) 中的向量 ( w )，且满足以下两个条件：</p><ul><li>加法保持性：对于任意向量 ( u, v \in V )，有 ( T(u + v) &#x3D; T(u) + T(v) )。</li><li>标量乘法保持性：对于任意向量 ( v \in V ) 和任意标量 ( a )，有 ( T(av) &#x3D; aT(v) )。</li></ul><p><strong>几何意义</strong>：<br><strong>线性变换可以看作是一种在空间中的“拉伸”或“压缩”，甚至可以是“旋转”或“反射”。</strong> 在二维空间中，线性变换可以想象为一个网格被均匀地拉伸或压缩，而不会发生撕裂或折叠。</p><h3 id="2-特征值和特征向量"><a href="#2-特征值和特征向量" class="headerlink" title="2. 特征值和特征向量"></a>2. 特征值和特征向量</h3><p><strong>定义</strong>：<br>对于一个给定的线性变换 ( T )，如果存在一个非零向量 ( v ) 和一个标量 ( \lambda )，使得 ( T(v) &#x3D; \lambda v )，那么 ( v ) 就是 ( T ) 的一个特征向量，而 ( \lambda ) 就是对应的特征值。</p><p><strong>几何意义</strong>：<br><strong>特征向量：是线性变换下保持方向不变的向量，</strong><br><strong>特征值：则表示这个方向上的伸缩比例。</strong> 在二维空间中，可以想象一个线性变换将一个向量“拉伸”或“压缩”成另一个向量，而特征向量就是在这个过程中方向不变的向量。</p><p><strong>计算</strong>：<br>特征值和特征向量的计算通常通过求解特征方程 ( T(v) &#x3D; \lambda v ) 来完成，即：</p><p>[ (T - \lambda I)v &#x3D; 0 ]</p><p>其中，( T ) 是线性变换的矩阵表示，( I ) 是单位矩阵，( \lambda ) 是特征值，( v ) 是特征向量。</p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><ul><li><strong>机器学习</strong>：在机器学习中，特征值和特征向量被用于主成分分析（PCA）等降维技术，以及谱聚类等聚类算法。</li><li><strong>深度学习</strong>：在深度学习的卷积神经网络中，卷积核可以看作是一种线性变换，其参数（权重）可以通过特征值分解来优化。</li><li><strong>物理学</strong>：在经典力学中，特征值问题与系统的固有频率相关，特征向量则与系统的振动模式相关。</li></ul><p>理解线性变换、特征值和特征向量对于深入学习数学、物理以及相关工程领域非常重要，它们提供了一种强大的工具来分析和理解复杂系统的行为。</p><p>学完之后学习降维算法</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch</title>
    <link href="/2024/04/24/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/PyTorch/"/>
    <url>/2024/04/24/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/PyTorch/</url>
    
    <content type="html"><![CDATA[<h1 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h1><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>pytorch 计算图<br>pytorch 自动求导的原理？<br>pytorch detach()方法 clone()方法 load save方法</p><h2 id="两大法宝"><a href="#两大法宝" class="headerlink" title="两大法宝"></a>两大法宝</h2><ol><li>dir 打卡工具箱 <code>dir(torch.cuda)</code></li><li>help 查看具体函数的使用方式 <code>help(torch.cuda.is_available)</code></li></ol><h2 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h2><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><blockquote><p>提供一种方式去获取数据及其label，以及数据集的大小</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image <span class="hljs-comment"># 图像操作（open、show）</span><br><span class="hljs-keyword">import</span> os  <span class="hljs-comment">#文件操作</span><br><br><span class="hljs-comment"># 继承Dataset类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-comment"># 通过定义一个特殊的__init__方法，在创建实例的时候，把所需要的属性绑上去</span><br>    <span class="hljs-comment"># 和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self</span><br>    <span class="hljs-comment"># __init__方法的第一个参数永远是self，表示创建的实例本身</span><br>    <span class="hljs-comment"># 因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,root_dir,label_dir</span>):<br>        self.root_dir = root_dir<br>        self.label_dir = label_dir<br>        self.path = os.path.join(root_dir,label_dir)<br>        self.img_path = os.listdir(self.path) <span class="hljs-comment">#返回指定path路径文件夹中图片名称组成的列表</span><br><br>    <span class="hljs-comment"># 当实例对象做P[key]运算时，就会调用类中的__getitem__()方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img_name = self.img_path[idx]<br>        img_item_path = os.path.join(root_dir,label_dir,img_name)<br>        <span class="hljs-built_in">print</span>(img_item_path)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        img.show()<br>        label = self.label_dir<br>        <span class="hljs-keyword">return</span> img, label<br><br>    <span class="hljs-comment"># 当使用len(p)时，就会调用类中的__len__()方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img_path)<br><span class="hljs-comment"># 有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去</span><br><br>root_dir = <span class="hljs-string">&#x27;D:\ADNI_classify _v-3.0\ADCNMCI\\train&#x27;</span><br>label_dir = <span class="hljs-string">&#x27;AD&#x27;</span><br>ad_dataset = MyData(root_dir,label_dir)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(ad_dataset))<br><br></code></pre></td></tr></table></figure><h3 id="tensorboard"><a href="#tensorboard" class="headerlink" title="tensorboard"></a>tensorboard</h3><blockquote><p>可视化训练过程的数据</p></blockquote><ol><li><code>add_image()</code></li><li><code>add_scalar</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 参数：title；y轴数值；x轴数值</span><br>writer.add_scalar(<span class="hljs-string">&quot;y=2x&quot;</span>, <span class="hljs-number">2</span>*i, i)<br><br><span class="hljs-comment"># tag：是保存图的标题</span><br><span class="hljs-comment"># img_tensor：图片变量名,图片的类型要是torch.Tensor, numpy.array, or string这三种</span><br><span class="hljs-comment"># global_step：第几张图片</span><br><span class="hljs-comment"># dataformats=‘CHW’，默认CHW，tensor是CHW，numpy是HWC</span><br>writer.add_image(tag,img_tensor,global_step,dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="Dataloader"><a href="#Dataloader" class="headerlink" title="Dataloader"></a>Dataloader</h3><blockquote><p>为后面的网络提供不同的数据形式</p></blockquote><h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><h2 id="tensor"><a href="#tensor" class="headerlink" title="tensor"></a>tensor</h2><p>PyTorch 是一个开源的深度学习框架，它提供了张量作为其核心数据结构。在 PyTorch 中，张量类似于 NumPy 中的数组，但是拥有额外的功能，特别是与 GPU 加速计算有关的功能。以下是 PyTorch 中张量的一些介绍：</p><ol><li><p><strong>创建张量：</strong> 你可以使用 torch.tensor() 函数创建张量，也可以使用一些特殊的函数如 torch.zeros()、torch.ones() 来创建特定大小的张量，还可以从 Python 列表或 NumPy 数组中创建张量。</p></li><li><p><strong>张量属性：</strong> 张量有很多属性，比如形状（shape）、数据类型（dtype）、设备（device，表示张量所在的设备，如 CPU 或 GPU）、布局（layout，表示张量的存储方式，如连续存储或分块存储）等。</p></li><li><p><strong>张量操作：</strong> PyTorch 提供了许多张量操作函数，包括数学运算、逻辑运算、索引和切片等。你可以对张量进行加法、乘法、指数运算等操作，也可以使用索引和切片来访问张量的特定元素或子集。</p></li><li><p><strong>自动求导：</strong> PyTorch 的一个重要功能是自动求导，它可以自动计算张量的梯度。你可以通过 tensor.requires_grad&#x3D;True 将张量设置为需要求导，然后进行计算，PyTorch 会自动构建计算图并计算梯度。</p></li><li><p><strong>张量和神经网络：</strong> 在深度学习中，张量是神经网络的基本数据结构。神经网络的输入、输出和参数都表示为张量，而神经网络的前向传播和反向传播也是基于张量的运算实现的。</p></li></ol><p>总的来说，PyTorch 的张量是一种灵活、强大的数据结构，它为深度学习提供了高效的数值计算和自动求导的功能。</p><h3 id="tensor函数"><a href="#tensor函数" class="headerlink" title="tensor函数"></a>tensor函数</h3><ol><li><code>torchvision.transforms.ToTensor()</code><br>在使用 transforms.ToTensor() 进行图片数据<strong>转换过程中会对图像的像素值进行正则化</strong>，即一般读取的图片像素值都是8 bit 的二进制，那么它的十进制的范围为 [0, 255]，而正则化会对每个像素值除以255，也就是把像素值正则化成 [0.0, 1.0]的范围<br><strong>意义：</strong>将图片表示为数字化的数据，方便神经网络进行处理和学习</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库学习</title>
    <link href="/2024/04/24/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/04/24/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="badf294387f7412f0af4635ffd70d5e8d9899d5e383aa5196136ed342fbbffc5">9ef5e081b4fe98a32076e025047ca199b8697f81cb35d436f11001bf982a82df385c81029bf9e3150c23458b797522971530bd64e26ab2611c5dfd5d08d3dd2db2b46e080c19fb827407fe3108b4f9c22caf07af70661e15a50f136f7818396e64ea0044cb5d46c5f20f25c5588f191f6f9a2bb3dfa3032df58c717a4d01a2300f56101f2da31d14e02b52d1e4f4939916dbffa9c845b7f953989ce0e9a93365db15cbf11684ee5cf4e134e6c95f83e727ffe1b583c611f42b1068398876d9b40d8774a973761cb925b6739529ffd67308d51559b43d4ebd05499da32668e6a877980afcd7bde4f054e48df529bdd63507858eb0309f3f46ea461f4f7cd20498ed65ac46eb6770473ccf6f8e0e0ae58bcf6a468bfbb5b9daef7ac7353c3fbdae09d26f19a2cf162590f265332b7bc30c502a2f5900cf9c095aac1649c3956b54cd69db56641cc3cdc336388d68ccf49584da5542e6af668fde4cebc5bd8bf8d45a249547c082594779f5d2606961659e88280efa7ab0dd8c58f612d141cd631dfd1a06ede2525963f8c6ddb511ec69b24c4579b731d1d752bd9377f28dfd15e856462b7ceda162f5050dde80b7e91cab700cd4d21e7940d1f08384c1fb40da897204e467d114815d769c6a07ddd11d3f445f7123ceda6f00ffefb91d1061e18b6bd943625315294a287a414d1fa87ba75e72fd118d9ec0da605e78aac2b40ad6fcd1007a01ee0e0fc376621d6af24d2a9fd7c497fd76fccadfba083d30506de15844d6b5dcde775502f4c0a1bf314a005457539c2bfdd9b949798bb39040660e73a7d7f687fb0c864b8ef64c09d67a60d4e0432a3ea70e0845fce914aaa1236fcc267370df1f81f5c011558f501c42b23837364d5d9bdd348b4112838566060d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>联系导师经验总结</title>
    <link href="/2024/04/23/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E8%81%94%E7%B3%BB%E5%AF%BC%E5%B8%88%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2024/04/23/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E8%81%94%E7%B3%BB%E5%AF%BC%E5%B8%88%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a9d6a092d5a36880c1c999bf8b78feb7665c7c040284c10467b5783db79d02b4">184d5613b7d1f40c9857b7bf904a8fe384dc586addb4cd4cfc68c98a0f1df306</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>夏令营经验贴总结</title>
    <link href="/2024/04/23/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E5%A4%8F%E4%BB%A4%E8%90%A5%E7%BB%8F%E9%AA%8C%E8%B4%B4%E6%80%BB%E7%BB%93/"/>
    <url>/2024/04/23/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%96%99/%E5%A4%8F%E4%BB%A4%E8%90%A5%E7%BB%8F%E9%AA%8C%E8%B4%B4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="aee1338abe606b8e134805bc2e181176d5129582429422b5472ac97c6e596e04">9ef5e081b4fe98a32076e025047ca199b8697f81cb35d436f11001bf982a82df4bd6aad46c32d9abbb4fe2d6530c5460cc50579502fd05f3c6e47bb6e86860de1bc81183e32b226ecafac31a21ab7e6ba155e39154a962ac847ae252a4b34e78a98d79dd35ea0057ce88fae752429812e5921f0fe1e460f3530412c6f1606db7303e0e299a75509818427eb7feba1e16c5edf230977553fa22f693a3b0eb364975077963954b1e95a74bfd74db273e5d0a0c683175f8daa0333964142446b2294a4d17ad04c1187cad40ba62eba8432b5b10a8b1c02f30e657b7992723b8932b6bb93c2ee2c739175235a15d39788c32e2deb020eda639ae72d7d7bf2afe83776a56a9513b0885af50f8454ae9549a92349f6de71c4ce0c0f22f600443a9e2ad77700072175da0839c382e1489425f89b0cbc37f09e05f6e210fc842db4aa929ed19afee76f45e86877ec3eedb9574aab6a3be89622204ebca1a783ee63fc70018d75b55f6ea1e16ec76f765eb80696096cc7c7d548e33501e70c940ba69f79c45061476e721063365e177f9beab93904b5fdd87c681757a9a804f0e88da79f3af927c6afbe10928de57f18c6b64d04aa5390a5b8038bb3adf43e475879f5d30dddb36d055a8dc71d296363eab120963b4292c1ff06cc707802f138e27c9c6ee45f34431514d3b89a0dc1eeb55dbddf515adfc46665b87441eecd9c753e734f4ab110cd5e691d699b8bf55151ad2207413906751f3f6b3af311dda288aacdbf687366519282ec8b566a1e406154bddf0b74d1426da9e61e8bac64418f4872e9ec56e8df55d33ef81a66617f29afea62c262155cf6238a16c424455dabc4a011ef7f3d3c37ca82bcbe031e4fa16d671f6e2cef2e9ee28acf14c27939162d95c5a571e8d29d004fa505e69e2ed913d599895c7cca4c70506c0e2d960baccf779306098895b52db2940c705a7905b777064abb4c6a22550b9ad71629072f2ecf4cc9d2eb97f61363deef16dc114582ec29705d43584160d7fc43a0da0ae55d8ef8be0d7ff373f2b8d39205ace2555806d47e65d619a1dcc83d8d8a5270ae129d8b64b681697f6b3db9254bdc515c91c1dd16c351d56dd64c8788e885bd3fe9a5b96651b3568461695cdbe4fdb698b0b9727bbb906601e4097e3e8cc0a16da8c79f1c71e1929740267018bb4f6019ec7b4dae6ff4aae01c69de3dede1d8bf7105c31816c6fc2ab89b685bde37ab877ec434083e9abfa712ba5a430241e986921eb09877252afd343945e12b7688747f3d8b9682405a6af841ed4f87909eb31ff98fc403e35f736a1607880043e1a4ab3bee013c9636bc3b265eb9139eab9bc3c5fc44fa18e293e2c929ca83ba29b3e34f0f60a8f3d6a386ea918dee8f79035327d304a42cb802abe3d10b648761d421f6c06239e49de81ba0d5fe4ee983714b74ff9bb1d6fa31619747402e869a66853142dd1cf9c54495c5698d74dd3f5477e4c78fc63010043f1c1ab00d01647133e9336aafecf229549fefe7a38a3949e7af1226f9a58c1bc37602146ed928546866bf6df03f3b487e54d17d3a2bc55a572f78667808c0a7838bd04519bce9a127754faca3b8596376241dbdf7ab0ffd59fcab61a49a9047d7219a7da6bd1eac07172ef8631c9a1b005106282bc1832b0f6ff1217372bfcdac86f40f54176a549d680da802e54cf3d704838abdea5cbb5f17bd6864c8cb3987e728de0921b2f9d634b332c11a87008356e24a5b10c3415684b2eaed9d103b65cb23206935e549c7c8a8fb1ff48c91a692a509ba23b0a443cd6a0d34003e84f866a1947fdc9b936d9c5419682cfe9f1347fef1660e5d318bbbc784f0308e891bbf74a549ebb61078d14a19aa040a382b8b8780fb8e389dca9db1e492ab2894e7736b228a835db4aa2d2e205cd197467cc7bd4d590d95599fd9966ac6c305639e87b2ab4188b1d9e250532080ab424aa83898f40015bf5c6ffa5f8308095fc58ce7ba237e3e914c3ae207c0f0cad07beff6faa3b48289917c40918ea96882ac587d5354be3b6bb7e12f772e0a9f4f34afb34ea9c375bfa43cb80231075f61f890d7b658c3efaf5dfdc51f204d96a514181e4fb96103a0062751fb9560f0f6c7850ba5bb9e98934861a0a526a1a7ac90b8259823f182689e6d7d3fceb2d7aec92dc4b58e5a095635ee163c61311137f8a2eb19875973d8e9b3d7ec315a3f775ac6177d639878e75d446e633c66fd642ffca3adc96bb3e0b9aa5c3760bb98b2b23723c790c7743588b84b1603c042b09a406cf0a9ac43ecaff15e3edb2c1eb6024ead343b4307a0e18df5f0824a3de158c3f8a69909ea44c60539d01b2f02bcb6eac354d9b3e8afa97b41341cde19361bba24118e7260d08dcc13ae9b2a6c27076b4b947ebd1a1d080977912b3eb417ae370a70be1693982239561a8144b821a28713e60caa45110c14d0d506ad8db8df3bb105b33f2ce6544b38905b7bcd41e13cca5be06684bf7b61685bdecfd82358b69b954f0141767034067536a23188582bddbb5874628def9eec4c4ff403414ac3bdecc0928c95f959ff25b02686c77906d8d37a133165ce701e6ba4e93e3b367ccb41179c6457e6ce33e33bc627f263fdf5558400295bda78ea3a8407727556c369b018caad0967d507c1918399d901e2aa8789077b430ac6bf14c92b2dac181350b31522a0ef394df4e76e4033413bf61007fbcdbed8c685ce07724d511fdcea8e3d2c00c396c0ab3e4d3a9ea1080a7aa61f0be928032309ef353bbf5e04f42c5f2ef87093327f5fe30f7ebfa7af9399b70d8f39b512d723aee0b3f29b101a3b242be7651e64186d3a8c49bd7e11714588fe3990c5d2541112b737dbf3184bf2a25031e58fb37549d80bfe4c751018b2acb671dd8c4d64df2666b609f6b6fb4c5ac79f2abac6234e37414119913de002ed26f429ebb94e8e36d7c6deda6c1dedb43eb22c11176729a0ebc6c5aaff3646fc4c82944f20a70e2f6828142c194500ccfc24ef4b8637e9f591e94e5bd188aacfd3aa1a12cdcd943d27fbbca9665c141dab28d696ffca1d60d8e21199fb2caa484c04e2652648f0155ef6ab0f77a8c613d0b6544b5e80b25c0328860308006a2c9480fb6cc74056610cc62047e35c245ebe35c214c2846603c282620da42629a63e05e4a69c64ae51291bc99ba071004a8e6e944071b0695abde3ef5c62abc0db1ecd26c194298a839c45b66ab1330acad3b89a1f82dcf1e3d1aa0c1ded0fda5074f56adc7964c0f9b4f115c85d193c776c0adac65f69982aa8d558166248a058bfa98c3e751a07057833f9219e8ccd2314904849f0e4b471163d6fa58d9c3f7bc74f3a778ab7047500f3268f252b740c93333bd05b059877aff7bc59316b3f7d6486b674364f0234154c152679077fb85623848651f23efc49bcab3e5be483e8ebf0af3afc9c9d4187952679b1456a31d79e7d38c24a463203e0064f6b91fd9a83a3c922f8727dc9db4deafa19d68167f96e97d3f23a2a0628471748aa62b9057914c61187a81895e027ace088af5d579bbc496c1111a9e5834770260d4be06cd01b1740b2cbb7b52b67fa1e818b24992516799c2db3ebaf417de0e320fd920655f91a5af70a1f9f1e1a56dd3104e7f58cbde302c8dda2e4f877d2c4e80270c3de44b75b2ff7315752a50faf2301f21f0f361a403371f8ad657a61d21b4fed95fbf02ca56e3184cfff99a57dd7c9f5b76f2c1c8ce774b9b12885c9389dd3b32e6a94df0fcc31b74d994ad5b799bd88982425816e6f9ffa09314d7a2e8ccbda368bdcdbb7bb33f07c25025cb5e97e1a47d8d12d8f910c0802578b6cbc6e5fb95b4502f3497f1f5bc0cfa87b16da5bfe3321dfaa5d5cae4c2e64a928f50ec980419f185959a659483160840859d39c5e970520029e503c6f64fc468509999cbb926301d1dd1a838b762aca001d7561431750854019a1bc3e1cdd403716ae0500e205b90a61aeb49098ca782a1b6da24de75e00c531e0e47c36930c11c89ce3fb8f6ff067e0bdba41c5676dfca140c24f822320927adde2e7bdd76f80b90869f88360e3c03a83fd094ea616056c2879236eee7b48e646321bcc77878d242f6f80ea2a768856c0de2bbd3ee3f2075d88035b09f69adcec290f2f38a96df326029f89a9b818ad92ec1abfd01e74099cff9abb52a4d88903dae381b4b98370e02552b5d37b6f4d4629f37024e5f0e36d1e8606c2b359f09d21065f4a2e6023280555002aaeda4324d96d83336c26ce6cfc76cb7a9dc9bfa5ab175f7c12cf92f2991211765c501fee03dea5fa69754a09fc8fa046bbdc0577666f11f341df1ff5133b2f0270d70866dc43c8db27d43ae44aacdc6c5ff666259c99540e346b5e7ac3204b2ee442b559a106f88bc8caabc739ff15dca373ecfeb98a31093d151b94b1b7528110435d5fdeef3b76ac73c4bb1ea967b9c652f62c651edbf76c6fadc9c1605b3533373af6617b0f2f4381e90462fa749e0e25f031b6eb68794b5bf345b5e6a86e37d65d5634985c94eff6cc7a306113d60af42385ce10bf27c59e1a9d108aeea53742dfcf33b5981660fbef2b8159c914188bfe4f262804759d63c8668c98b79a3ab2659b8c782dabb882c29be32c825206b3a39e33984380f8ad2849f83d2cf7a5a5706fdeffebe008e3a9025e15d8b3073fedbe99eb0b4888ad9b0fa6f928b28d4186f29424fa6e5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小程序开发问题汇总</title>
    <link href="/2024/04/22/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2024/04/22/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="小程序开发遇到的问题"><a href="#小程序开发遇到的问题" class="headerlink" title="小程序开发遇到的问题"></a>小程序开发遇到的问题</h1><blockquote><ul><li>通过slider改变自动播放的间隔时间时，即使没有打开自动播放，也会使得轮播图开始自动播放</li></ul></blockquote><h2 id="页面下拉刷新"><a href="#页面下拉刷新" class="headerlink" title="页面下拉刷新"></a>页面下拉刷新</h2><blockquote><p>1.开启下拉刷新 ，在页面的<code>.json</code>文件中将enablePullDownRefresh 设置为true<br>2.监听页面的下拉刷新事件：onPullDownRefresh<br>3.停止下拉刷新效果：调用wx.stopPullDownRefresh()函数即可</p></blockquote><h2 id="页面上拉触底"><a href="#页面上拉触底" class="headerlink" title="页面上拉触底"></a>页面上拉触底</h2><blockquote><p>1.下拉触底刷新事件：onReachBottom<br>2.通过.json文件的<code>onReachBottomDistance</code>属性来配置上拉触底的距离（默认是50px）</p></blockquote><h2 id="小程序生命周期"><a href="#小程序生命周期" class="headerlink" title="小程序生命周期"></a>小程序生命周期</h2><blockquote><p>onLoad-&gt;onShow-&gt;onReady-&gt;onHide-&gt;onUnLoad</p></blockquote><h2 id="小程序常用API"><a href="#小程序常用API" class="headerlink" title="小程序常用API"></a>小程序常用API</h2><blockquote><p>显示消息提示框 wx.showToast({title:’ ‘, icon:’ ‘,duration:’ ‘})<br>显示对话框： wx.showModel<br>显示loading提示框：wx.showLoading, 关闭loading提示框：wx.hideLoading<br>页面路由API</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++复习</title>
    <link href="/2024/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA408/C-%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/"/>
    <url>/2024/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA408/C-%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="444a4f565112ae414d400289229f876993f82b445c3942a88c773494f97d4dbf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2024/04/22/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/Vue/"/>
    <url>/2024/04/22/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/Vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p><strong>初识Vue：</strong><br>1.想要Vue工作，就必须要创建一个Vue实例，且要传入一个配置对象<br>2.demo容器里的代码任然符合html规范，只不过加入了一些Vue语法<br>3.demo容器里的代码被称为【Vue模板】<br>4.Vue实例和容器是一一对应的<br>5.真实开发中只会有一个Vue实例，并且会配合着组件一起使用<br>6.中的xxx要写js表达式，且xxx会自动读取到data里的所有属性<br>7.一旦data中的数据发生改变，那么页面中用到该数据的地方都会自动更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;初识Vue&lt;/title&gt;<br>    &lt;!-- 修改页签icon logo --&gt;<br>    &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;../images/vue.png&quot;&gt;&lt;/link&gt;<br>    &lt;!-- 引入vue --&gt;<br>    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    // 准备一个容器<br>    &lt;div class=&quot;demo&quot;&gt;<br>        &lt;h1&gt;今天是&#123;&#123;date&#125;&#125;,这是&#123;&#123;name&#125;&#125;的第一个vue程序&lt;/h1&gt;<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示<br>        console.log(Vue.config)<br>            //创建Vue实例<br>        new Vue(&#123;<br>            el: &#x27;.demo&#x27;,<br>            data: &#123;<br>                date: &#x27;2022/8/11&#x27;,<br>                name: &#x27;jyd&#x27;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h3><blockquote><p>用于解析标签体内容<br>写法：,xxx是js表达式，且xxx会自动读取到data里的所有属性</p></blockquote><h3 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h3><blockquote><p>用于解析标签（包括：标签属性，标签体内容，绑定事件…）<br>举例：v-bind:href&#x3D;”xxx” 或 简写为 <strong>:href&#x3D;”xxx”</strong> ,xxx同样要写出js表达式的形式<br>Vue中有很多指令，都是v-xxx</p></blockquote><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>Vue中有两种数据绑定的方式：<br>1.单向绑定（v-bind）：数据只能从 data 流向页面<br>2.双向绑定（v-model）：数据不仅能从data流向页面，还可以从页面流向 data</p><blockquote><p>双向绑定一般只应用在表单类元素上（如：input, select）<br>v-model:value 可以简写成 <strong>v-model</strong> ，因为v-model默认收集的就是value值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-<span class="hljs-attr">model</span>:value=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="el和data的两种写法"><a href="#el和data的两种写法" class="headerlink" title="el和data的两种写法"></a>el和data的两种写法</h2><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><blockquote><p>通过一个对象代理对另一个对象中的属性的操作（读&#x2F;写）<br>1.Vue中的数据代理：通过 vm 对象来代理data中属性的操作<br>2.Vue中数据代理的好处：更加方便地操作data中的数据<br>3.基本原理：<br>    通过<strong>Object.defineProperty()</strong> 把data对象中的所有属性都添加到vm上<br>    为每一个添加到vm上的属性，都指定一个getter&#x2F;setter<br>    在getter&#x2F;setter 内部去操作（读&#x2F;写）data中对应的属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>何为数据代理<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">100</span>&#125;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> obj2 = &#123;<span class="hljs-attr">y</span>:<span class="hljs-number">200</span>&#125;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 给obj2添加了x属性，实际指向obj.x</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 通过修改obj2.x的值达到修改obj.x的值</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 这就是数据代理，obj2成为了obj的代理对象</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj2,<span class="hljs-string">&#x27;x&#x27;</span>,&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-keyword">return</span> obj.<span class="hljs-property">x</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    obj.<span class="hljs-property">x</span> = value</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><blockquote><p>事件的基本使用：</p><ul><li>1.使用v-on:xxx 或 <strong>@xxx 绑定事件</strong> ，其中xxx是事件名</li><li>2.事件的回调需要配置在 <strong>methods 对象</strong>中，最终会在vm上</li><li>3.methods 中配置的函数 ，不要用箭头函数！ 否则this就不是vm了</li><li>4.methods 中配置的函数 ，都是被Vue所管理的对象，this的指向是vm 或 组件实例对象</li><li>5.@click&#x3D;”demo” 和 @click&#x3D;”demo($event)” 效果一致，但后者可以传参</li></ul></blockquote><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><table><thead><tr><th>事件修饰符</th><th>作用</th></tr></thead><tbody><tr><td>prevent</td><td>阻止默认事件</td></tr><tr><td>stop</td><td>阻止冒泡</td></tr><tr><td>once</td><td>事件只触发一次</td></tr><tr><td>capture</td><td>使用时间的捕获机制</td></tr><tr><td>self</td><td>只有event.target是当前元素时才触发事件</td></tr><tr><td>passive</td><td>事件的默认行为立即执行，无需等待事件回调执行完毕</td></tr></tbody></table><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>1.Vue常用按键别名：</p><table><thead><tr><th>按键</th><th>别名</th></tr></thead><tbody><tr><td>回车</td><td>enter</td></tr><tr><td>删除</td><td>delete</td></tr><tr><td>退出</td><td>esc</td></tr><tr><td>空格</td><td>space</td></tr><tr><td>换行</td><td>tab</td></tr><tr><td>上</td><td>up</td></tr><tr><td>下</td><td>down</td></tr><tr><td>左</td><td>left</td></tr><tr><td>右</td><td>right</td></tr><tr><td>2.Vue中未提供别名的按键，可以使用原始的key值去绑定，但是部分键位要把key值转换为kebab-case（短横线命名），如（CapsLock &#x3D;&gt; caps-lock）</td><td></td></tr><tr><td>3.系统修饰键（用法特殊）：cltr、alt、shift、meta</td><td></td></tr><tr><td>(1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发</td><td></td></tr><tr><td>(2).配合keydown使用：正常触发事件</td><td></td></tr><tr><td>4.Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以自定义按键别名</td><td></td></tr></tbody></table><h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性(computed)"></a>计算属性(computed)</h3><blockquote><ul><li>定义：通过已有属性计算得来</li><li>原理：底层借助了Object.defineProperty()方法提供的getter和setter</li><li>getter函数执行时机：初次读取执行一次 和 当依赖的数据发生改变时会被再次调用</li><li>优势：与methods相比内部有缓存机制（复用），效率更高，调试方便</li><li><ul><li>计算属性最终会出现在 vm 上，直接读取即可</li></ul></li><li><ul><li>如果计算属性要被修改，那必须写set函数去响应修改，在set中将计算属性所依赖的那些data数据进行相应改变</li></ul></li></ul></blockquote><h3 id="监视属性-watch"><a href="#监视属性-watch" class="headerlink" title="监视属性(watch)"></a>监视属性(watch)</h3><blockquote><ul><li>当被监视的属性变化时，回调函数handler自动调用，进行相关操作</li><li>监视的属性必须存在，才能进行监视</li><li>监视的两种方法</li><li><ul><li>new Vue()时传入 watch 配置</li></ul></li><li><ul><li>通过 vm.$watch 监视（<strong>要加引号</strong>）</li></ul></li></ul></blockquote><table><thead><tr><th>配置对象</th><th>作用</th></tr></thead><tbody><tr><td>immediate</td><td>初始化时回调函数自动调用一次</td></tr><tr><td>deep</td><td>深度监视</td></tr></tbody></table><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><blockquote><ul><li>Vue自身可以监视对象内部值的改变，但Vue提供的watch默认不可以</li><li>在监视对象中配置 deep:true 可以监视对象内部值改变</li></ul></blockquote><h3 id="计算属性与监视的区别"><a href="#计算属性与监视的区别" class="headerlink" title="计算属性与监视的区别"></a>计算属性与监视的区别</h3><p>1.computed能完成的功能，watch都可以完成<br>2.watch可以完成异步操作（如定时器），但computed不行（因为computed要有return返回值，而return不能写在回调函数里）</p><h3 id="Vue中的this"><a href="#Vue中的this" class="headerlink" title="Vue中的this"></a>Vue中的this</h3><p>1.所有被Vue管理的函数，最好写成普通函数，这样this的指向才是Vue 或 组件实例对象<br>2.所有不被Vue管理的函数（定时器函数、ajax的回调函数、Promise的回调函数）最好写成箭头函数，这样this的指向才是Vue 或 组件实例对象</p><h2 id="绑定CSS样式"><a href="#绑定CSS样式" class="headerlink" title="绑定CSS样式"></a>绑定CSS样式</h2><p><strong>1.class样式：</strong></p><blockquote><p>:calss&#x3D;”xxx” ,xxx可以是字符串，对象，数组</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;style&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;changeMood&#x27;</span>&gt;</span>Vue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示</span></span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;.demo&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">mood</span>: <span class="hljs-string">&#x27;happy&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">style</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">border</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">text</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">position</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">changeMood</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;happy&#x27;</span>, <span class="hljs-string">&#x27;sad&#x27;</span>, <span class="hljs-string">&#x27;upset&#x27;</span>]</span><br><span class="language-javascript">                    <span class="hljs-keyword">let</span> index = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">3</span>)</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mood</span> = arr[index]</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2.style样式</strong></p><blockquote><p>:style&#x3D;”{fontSize:xxx}”,xxx是动态值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleArr&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;changeMood&#x27;</span>&gt;</span>Vue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;.demo&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">mood</span>: <span class="hljs-string">&#x27;happy&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">styleObj</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;40px&#x27;</span> <span class="hljs-comment">//这里对象里的key要用驼峰写法</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">styleArr</span>: [&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;20px&#x27;</span></span><br><span class="language-javascript">                &#125;, &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;orange&#x27;</span></span><br><span class="language-javascript">                &#125;]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p><strong>1.v-if</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;n===1&quot;</span>&gt;</span>html<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n===2&quot;</span>&gt;</span>css<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n===3&quot;</span>&gt;</span>javascript<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-else</span>&gt;</span>Vue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><blockquote><p>v-if可以和v-else-if、v-else 一起使用，但要求结构不能打乱<br>v-if：不展示的DOM元素直接被移除，适用于切换频率较低的场景<br><strong>2.v-show</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div v-show=<span class="hljs-string">&#x27;n===1&#x27;</span>&gt;v-show&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>v-show：不展示的DOM元素不会被移除，仅仅是样式被隐藏，适用于切换频率较高的场景</p></blockquote><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><blockquote><p>v-for用于展示列表数据<br>语法：v-for&#x3D;”(item,index) of xxx” :key&#x3D;”yyy”<br>可遍历：数组，对象，字符串，指定次数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) of filPersons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>    &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="key作用与原理"><a href="#key作用与原理" class="headerlink" title="key作用与原理"></a>key作用与原理</h2><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><h2 id="Vue监视数据原理"><a href="#Vue监视数据原理" class="headerlink" title="Vue监视数据原理"></a>Vue监视数据原理</h2><p>Vue会监视data中所有层级的数据<br><strong>监测对象中的数据：</strong></p><blockquote><ul><li>Vue是通过setter实现的监视，且默认Vue只监视new Vue()时传入的数据</li><li>Vue 不允许动态添加根级响应式属性</li><li>如需给后加的属性做响应式，需要使用如下API：</li><li><ul><li>Vue.set(target, propertyName&#x2F;index, value)</li></ul></li><li><ul><li>vm.$set(target, propertyName&#x2F;index, value)<br>三个参数如下：<br>{Object | Array} target<br>{string | number} propertyName&#x2F;index<br>{any} value</li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">vm.$set(vm.<span class="hljs-property">userProfile</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">27</span>)<br>vm.$set(app.<span class="hljs-property">list</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;lemon&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><strong>Vue.set()&amp;vm.$set() 不能给vm 或 vm的根数据对象（vm._data）添加属性</strong><br><strong>监测数组中的数据：</strong></p><blockquote><ul><li>Vue2是通过object.defineproperty()来劫持数据，无法直接劫持数组</li><li>数组中的每一项是没有自己的get，set的</li><li>通过包裹数组更新方法实现，本质上就是做了两件事：</li><li><ul><li>调用原生所对应的数组方法对数组进行更新</li></ul></li><li><ul><li>重新解析模板，进而更新页面</li></ul></li><li>Vue修改数组的方法：</li><li><ul><li>push()、pop()、shift()、unshift()、splice()、sort()、reverse() （这些数组方法会对原数组进行改变）</li></ul></li><li><ul><li>Vue.set()&amp;vm.$set()</li></ul></li></ul></blockquote><blockquote><p>向其所在的节点中渲染文本内容<br>与插值语法的区别：v-text会替换掉节点中的内容，而不会</p></blockquote><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><blockquote><p>向指定节点中渲染包含html结构的内容<br>v-html有安全性问题，在网站上动态渲染任意HTML是非常危险的，容易遭到xss攻击</p></blockquote><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><blockquote><p>本质是一个没有值的特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性<br>使用css属性配合v-cloak可以解决网速慢页面展示出的问题</p></blockquote><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><blockquote><p>v-once 所在节点在初次动态渲染后，就视为静态内容了<br>以后数据的改变不会引起v-once所在结构的更新，可用于性能优化</p></blockquote><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><blockquote><p>可以跳过所在节点的编译过程<br>可利用它跳过没有使用指令语法和插值语法的节点，会加快编译</p></blockquote><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p><strong>函数式：</strong></p><blockquote><ul><li>函数式指令调用时机：</li><li><ul><li>指令与元素成功绑定时（一上来）</li></ul></li><li><ul><li>指令所在模板被重新解析时<br>参数为（DOM元素，绑定对象）</li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>放大10倍的值: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-big</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>      </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>n++<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;.demo&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">n</span>: <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">directives</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-title function_">big</span>(<span class="hljs-params">e, binding</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e, binding)<span class="hljs-comment">//e是DOM元素，binding是</span></span></span><br><span class="language-javascript"><span class="language-xml">                    e.<span class="hljs-property">innerText</span> = binding.<span class="hljs-property">value</span> * <span class="hljs-number">10</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>对象式：</strong><br>配置对象中常用的三个回调函数<br>(1).bind:指令与元素成功绑定时调用<br>(2).inserted:指令所在元素被插入页面时调用<br>(3).update:指令所在模板结构被重新解析时调用<br><strong>总结：</strong></p><blockquote><p>函数式即为对象式的简写<br>分为全局指令和局部指令 Vue.directive(指令名，回调函数&#x2F;配置对象)<br>指令定义时不加v-,但使用时要加v-<br>自定义指令里的 this 是 window<br>指令名如果是多个单词，要使用kebab-case命名，不要用camelCase命名</p></blockquote><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>Vue 在关键时候调用的一些特殊名称的函数<br>生命周期函数的名字不可更改，其中的 this 指向是vm 或 组件实例对象<br>常见的生命周期钩子：<br>1.mounted：发生ajax请求，启动定时器，绑定自定义事件，订阅消息【初始化操作】<br>2.beforeDestroy：清除定时器，解绑自定义事件，取消订阅消息【收尾工作】</p></blockquote><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>Vue中使用组件的三大步骤：</p><blockquote><ul><li>1.定义组件（创建组件）</li><li>2.注册组件</li><li>3.使用组件（写组件标签）<br>一、如何定义组件？</li><li>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别：</li><li>区别如下：<br>   - 1.el 不要写 —— 因为最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器<br>   - data 必须写成函数 —— 避免组件被复用时，数据存在引用关系，防止data中的数据被修改时会引起所有引用该组件的模板里的数据都被修改<br>简写方式：const 组件名 &#x3D; options（配置对象）<br>二、如何注册组件？<br>1.局部注册：靠new Vue 的时候传入components选项<br>2.全局注册：靠Vue.components(‘组件名’,组件)<br>三、编写组件标签    <br>    &lt;组件名&gt;&lt;&#x2F;组件名&gt;<br>    &lt;组件名&#x2F;&gt;</li></ul></blockquote><h3 id="VueComponent-构造函数"><a href="#VueComponent-构造函数" class="headerlink" title="VueComponent 构造函数"></a>VueComponent 构造函数</h3><h3 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h3><blockquote><p>VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype<br>让组件实例对象（vc）可以访问到 Vue原型对象上的属性，方法</p></blockquote><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><h1 id="vue-脚手架笔记"><a href="#vue-脚手架笔记" class="headerlink" title="vue 脚手架笔记"></a>vue 脚手架笔记</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><p> |—— node_modules<br> |—— public<br> |   |—— favicon.ico: 页签图标<br> |   |—— index.html: 主页面<br> |—— src<br> |   |—— assets: 存放静态资源<br> |   |   ㆐—— logo.png<br> |   |—— components: 存放组件<br> |   |   ㆐—— HelloWorld.vue<br> |   |—— App.vue: 汇总所有组件<br> |   |—— main.js: 入口文件<br> |—— .gitignore: git版本管制忽略的配置<br> |—— babel.config.js: babel的配置文件<br> |—— package.json: 应用包配置文件<br> |—— README.md: 应用描述文件<br> |—— package-lock.json: 包版本控制文件</p><h2 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><span class="hljs-title function_">render</span>(<span class="hljs-params">createElement</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;html标签&#x27;</span>,<span class="hljs-string">&#x27;标签里的内容&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><blockquote><ul><li>1.被用来给元素或子组件注册引用信息（id的替代者）</li><li>2.应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;h1 v-text=<span class="hljs-string">&quot;msg&quot;</span> ref=<span class="hljs-string">&quot;title&quot;</span>&gt;&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showDom&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点我输出ref属性<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SchoolName</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sch&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><blockquote><p>让组件接受外部传过来的数据<br>一、传递数据<br><Demo name="xxx"><br>如果是数字传入时要用 :age&#x3D;””(数据绑定的写法，<strong>这样的形式代表将引号中的东西看作一个js表达式来处理</strong>)<br>二、接收数据<br>1.只接收<br>props:[‘name’]<br>2.限制类型<br>props:{<br>    name:String<br>}<br>3.限制类型、限制必要性、指定默认值<br>props:{<br>    name:{<br>        type:String, &#x2F;&#x2F;类型<br>        required:true, &#x2F;&#x2F;必要性<br>        default:’jyd’ &#x2F;&#x2F;默认值<br>    }<br>}<br><strong>props是只读的</strong>，若确需修改，那么将props中的内容复制到data中一份，然后去改造data中的数据。</p></blockquote><h2 id="mixin（混入）"><a href="#mixin（混入）" class="headerlink" title="mixin（混入）"></a>mixin（混入）</h2><blockquote><p>可以帮多个组件共用的配置提取成一个混入对象<br>一、定义混合（在一个新的js文件中）<br>{<br>    data(){<br>    },<br>    methods(){<br>    }<br>}<br>二、使用混入<br>(1).全局混入：Vue.mixin(xxx)<br>(2).局部混入: mixins:[xxx]</p></blockquote><h2 id="插件（plugins）"><a href="#插件（plugins）" class="headerlink" title="插件（plugins）"></a>插件（plugins）</h2><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><p>1.组件化编码流程</p><blockquote><ul><li>(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突</li><li>(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：<br>  - 一个组件在用：放在组件自身即可<br>  - 一些组件在用：放在他们共同的父组件上（状态提升）</li><li>(3).实现交互：从绑定事件开始<br>2.props适用于：<br>(1).父组件&#x3D;&#x3D;&gt; 子组件 通信<br>(1).子组件&#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）<br>3.使用v-model时要切记: v-model绑定的值不能是props传过来的值，因为props是不可以修改的<br>4.props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做</li></ul></blockquote><h2 id="浏览器本地存储"><a href="#浏览器本地存储" class="headerlink" title="浏览器本地存储"></a>浏览器本地存储</h2><p>sessionStorage&#x2F;localStorage 的常用方法和属性：</p><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>setItem()</td><td>保存数据</td></tr><tr><td>getItem()</td><td>读取数据</td></tr><tr><td>removeItem()</td><td>删除数据</td></tr><tr><td>clear()</td><td>清除数据</td></tr><tr><td>length</td><td>数据长度</td></tr><tr><td>注意事项：</td><td></td></tr></tbody></table><blockquote><p>localStorage需要手动清除才消失，sessionStorage随着浏览器的关闭而消失<br>如果getItem(xxx)对应的value获取不到，返回值为null<br>JSON.parse(null)的结果为null</p></blockquote><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li>一种组件间通信的方式，适用于：子组件 &#x3D;&#x3D;&gt; 父组件</li><li>适用场景：A是父组件，B是子组件，B要给A传数据，那么就在A中给B绑定自定义事件（回调函数写在A中 ）</li><li>绑定自定义事件：</li><li>触发自定义事件：</li><li>解绑自定义事件：</li><li>组件上也可以绑定原生DOM事件，需要使用native修饰符</li><li>注意，通过 <code>this.$refs.std.$on('jyd',callback)</code> 绑定自定义事件时,回调函数要么配置在methos中，要么使用箭头函数，否则this指向会出问题</li></ol><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><blockquote><ul><li>一种组件间通信的方式，适用于任意组件通信</li><li>全局事件总线是一个独立存在的部分，要想实现组件间的相互通信，又是自定义事件，那就要满足两个条件<br>  - 满足所有组件都能访问得到全局事件总线<br>  - 可以调用 $on ,和 $off 和 $emit<br>一、实现全局事件总线<br><code>main.js：</code></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span>h (<span class="hljs-title class_">App</span>)<br>    <span class="hljs-comment">//beforeCreate中模板未解析，且this是vm</span><br>    <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//安装全局事件总线</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>二、绑定全局事件总线</p><blockquote><p>谁要接收数据，自定义事件就绑定在谁身上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&#x27;自定义事件名&#x27;</span>,callback)<br>&#125;,<br></code></pre></td></tr></table></figure><p>三、触发全局事件总线</p><blockquote><p>谁要传递数据，谁就触发事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">methods：&#123;<br>    触发事件方法名()&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$emit(<span class="hljs-string">&#x27;自定义事件名&#x27;</span>,传递参数)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>四、在销毁前解绑事件，提高性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 销毁对应自定义事件</span><br><span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$off(<span class="hljs-string">&#x27;自定义事件名&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h2><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><p>1.语法: <code>this.$nextTick(callback)</code><br>2.作用: 在下一次DOM更新结束后执行其回调函数<br>3.例子：使得input框在创建的时候自动获得焦点</p><h2 id="过渡和动画"><a href="#过渡和动画" class="headerlink" title="过渡和动画"></a>过渡和动画</h2><h2 id="Vue配置跨域"><a href="#Vue配置跨域" class="headerlink" title="Vue配置跨域"></a>Vue配置跨域</h2><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p><strong>1.概念</strong><br>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信<br><strong>2.作用</strong><br>多个组件需要共享数据时<br><strong>3.搭建vuex环境</strong><br><strong>4.流程</strong><br><img src="https://vuex.vuejs.org/vuex.png" alt="流程图"><br>5.getter(类似于计算属性)</p><blockquote><p>用于将state中的数据加工<br>注意要使用其前要先在 new Vuex.Store 中添加</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getters = &#123;<br>    <span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>) &#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6.mapState &amp; mapGetters</strong></p><blockquote><p>写在计算属性里，用于简便快速生成计算属性的<br>使用前要在组件中<strong>先引用</strong> (<code>import &#123;mapState&#125; from 'vuex'</code>)<br>key-value形式：<strong>key指的是模板中的写法，value指的是store中的写法</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>:&#123;<br>    <span class="hljs-comment">//传统写法</span><br>    <span class="hljs-comment">/*sum()&#123;</span><br><span class="hljs-comment">        return this.$store.state.sum</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-comment">//对象写法</span><br>   <br>    ...<span class="hljs-title function_">mapState</span>(&#123;<span class="hljs-attr">sum</span>:<span class="hljs-string">&#x27;sum&#x27;</span>&#125;)<br>    <span class="hljs-comment">//数组写法</span><br>    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;sum&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>7.mapActions &amp; mapMutations</strong></p><blockquote><p>mapActions 用于生成于actions对话的方法<br>mapMutations用于生成于mutations对话的方法<br><strong>8.namespace</strong></p></blockquote><h2 id="route路由"><a href="#route路由" class="headerlink" title="route路由"></a>route路由</h2><blockquote><p>vue-router:vue的一个插件库，专门实现SPA（单页）应用<br>一、对SPA的理解：<br>1.整个应用只有一个完整的页面<br>2.点击页面中的导航链接不会刷新页面，只会做页面的局部更新<br>3.数据需要通过AJAX请求获取<br>二、路由的理解：<br>1.一个路由就是一组 key-value 的映射关系<br>2.key 为路径，value 可能是component（前端，用于展示页面内容）&#x2F; function（后端，用于处理客户端请求）<br>三、路由的注意点：<br>1.路由组件通常存放在pages文件夹，一般组件通常放在components文件夹<br>2.通过切换，”隐藏”了的路由组件，默认是被销毁的，需要的时候再去挂载<br>3.每个组件都有自己的 <strong>$route</strong> 属性，里面存储着自己的路由信息<br>4.整个应用只有一个router，可以通过组件的 $router属性获取<br>四、路由在模板中的使用：<br><router-link>路由的组件名</router-link> :路由的跳装链接<br><router-view></router-view> :路由在模板中的位置</p></blockquote><h3 id="多级路由"><a href="#多级路由" class="headerlink" title="多级路由"></a>多级路由</h3><blockquote><p>在父路由中使用children配置项</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>: [&#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/subject&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Subject</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/students&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Students</span>,<br>            <span class="hljs-attr">children</span>: [&#123; <span class="hljs-comment">//在路由中通过children配置子路由</span><br>                    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;lb&#x27;</span>, <span class="hljs-comment">//此处一定不要加&#x27;/&#x27;</span><br>                    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Lb</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;jyd&#x27;</span>, <span class="hljs-comment">//此处一定不要加&#x27;/&#x27;</span><br>                    <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;Jyd&#x27;</span><br>                &#125;<br>            ]<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>命名路由</strong></p><blockquote><p>作用：简化路由的跳转路径<br>1.给路由命名</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hello&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/students&#x27;</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Students</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.简化跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;router-link to=<span class="hljs-string">&quot;/students&quot;</span>&gt;&lt;/router-link&gt;<br> ==&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span> （此时这里面不要再写path）<br></code></pre></td></tr></table></figure><h3 id="路由的-query-参数"><a href="#路由的-query-参数" class="headerlink" title="路由的 query 参数"></a>路由的 query 参数</h3><p>1.传递参数<br><strong>to 要加 ：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in p&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;`/students/lb/msg?id=$&#123;item.id&#125;&amp;title=$&#123;item.title&#125;`&quot;</span>&gt;</span><br>          &#123;&#123; item.title &#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 对象写法 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;router-link</span><br><span class="hljs-comment">        :to=&quot;&#123;</span><br><span class="hljs-comment">            path:&#x27;/students/lb/msg&#x27;</span><br><span class="hljs-comment">            query:&#123;</span><br><span class="hljs-comment">              id:item.id</span><br><span class="hljs-comment">              title:item.title</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;&quot;&gt;</span><br><span class="hljs-comment">        &#123;&#123;item.title&#125;&#125;</span><br><span class="hljs-comment">        &lt;/router-link&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.接收参数</p><blockquote><p>$route.query.属性</p></blockquote><h3 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h3><p>1.配置路由声明接收参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/students/:id/:title&#x27;</span>, <span class="hljs-comment">//使用占位符  </span><br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Students</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>2.传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;router-link to=<span class="hljs-string">&quot;/students/666/你好&quot;</span>&gt;&lt;/router-link&gt;<br> <span class="hljs-comment">//对象写法</span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span></span></span><br><span class="hljs-tag"><span class="language-xml"> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">    name:&#x27;hello&#x27; //当使用的是params参数时，对象写法里只能写成name属性，不能使用path</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">    params:&#123;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">        id:666,</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">        title:&#x27;你好&#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">    &#125;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml"> &#125;&quot;</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h3><blockquote><p><strong>让路由组件更方便的收到参数</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hello&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/students/:id/:title&#x27;</span>,  <br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Students</span>,<br>    <span class="hljs-comment">//第一种写法(不常用)：会把对象中的每一组key-value值通过props传给组件</span><br>    <span class="hljs-attr">props</span>:&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">900</span>&#125;<br>    <span class="hljs-comment">//第二种写法：props为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给组件</span><br>    <span class="hljs-comment">//（只有params能用）</span><br>    <span class="hljs-attr">props</span>:<span class="hljs-literal">true</span><br>    <span class="hljs-comment">//第三种写法：props为函数，会把函数返回的对象中的每一组key-value值通过props传给组件</span><br>    <span class="hljs-title function_">props</span>(<span class="hljs-params">route</span>)&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">id</span>:route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>,<br>            <span class="hljs-attr">title</span>:route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="replace属性"><a href="#replace属性" class="headerlink" title="replace属性"></a>replace属性</h3><blockquote><p>作用：控制路由跳转时操作浏览器历史记录的模式<br>历史记录有push和replace两种写入方式，push是追加（默认），replace是替换当前记录<br>如何开启replace模式：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;router-link replace to=<span class="hljs-string">&quot;/students&quot;</span>&gt;&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><blockquote><p>作用：让不展示的路由组件保持挂载，不被销毁</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//如果有多个——  :include=&#x27;[&#x27;组件名&#x27;,&#x27;&#x27;]&#x27;</span><br>&lt;keep-alive include=<span class="hljs-string">&#x27;组件名&#x27;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br>&lt;/keep-alive&gt;<br></code></pre></td></tr></table></figure><p>这段代码写在不想被销毁的组件的父路由上</p><h3 id="路由中的生命周期钩子"><a href="#路由中的生命周期钩子" class="headerlink" title="路由中的生命周期钩子"></a>路由中的生命周期钩子</h3><blockquote><p>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态<br>1.<code>activated</code>:路由组件激活时触发<br>2.<code>deactivated</code>:路由组件失活时触发</p></blockquote><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><h3 id="hash-history"><a href="#hash-history" class="headerlink" title="hash &amp; history"></a>hash &amp; history</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>服务器部署</title>
    <link href="/2024/04/20/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/04/20/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="前端程序员如何在宝塔面板部署Vue-nodejs前后端项目"><a href="#前端程序员如何在宝塔面板部署Vue-nodejs前后端项目" class="headerlink" title="前端程序员如何在宝塔面板部署Vue+nodejs前后端项目"></a>前端程序员如何在宝塔面板部署Vue+nodejs前后端项目</h1><p><img src="https://www.bigneck.top/#/article/ca66d3b6-ac5c-44d7-b1a8-464def149ff5" alt="前端程序员如何在宝塔面板部署Vue+nodejs前后端项目"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络</title>
    <link href="/2024/04/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/04/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f898ae34ff7f38905be3f967fdc9e07ef8555e0866d8a09f8dcde9bf62290b91"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vision transformer</title>
    <link href="/2024/04/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/vision-transformer/"/>
    <url>/2024/04/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/vision-transformer/</url>
    
    <content type="html"><![CDATA[<h1 id="Vision-Transformer"><a href="#Vision-Transformer" class="headerlink" title="Vision Transformer"></a>Vision Transformer</h1><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p><img src="https://blog.csdn.net/zhishi0000/article/details/139795459" alt="一文彻底搞懂 Transformer（图解+手撕）"></p><h2 id="自注意力机制（self-attention）"><a href="#自注意力机制（self-attention）" class="headerlink" title="自注意力机制（self-attention）"></a>自注意力机制（self-attention）</h2><p><img src="/../../img/self_attention.png"></p><p>计算注意力分数使用的是缩放点积模型。<br>Scale（缩放）的作用：由于进行点乘后的数值很大，导致通过的softmax后梯度变得很小</p><p><a href="https://blog.csdn.net/weixin_43312117/article/details/122922513">自注意力机制手写讲解</a></p><h2 id="多头注意力机制（Multi-Head-Attention）"><a href="#多头注意力机制（Multi-Head-Attention）" class="headerlink" title="多头注意力机制（Multi-Head Attention）"></a>多头注意力机制（Multi-Head Attention）</h2><p><img src="/../../img/Multi-Head%20Attention.png"></p><p>tips:</p><ol><li>每个Patch数据通过映射得到一个长度为768的token向量，即[16, 16, 3] -&gt; [768]</li></ol><h2 id="VIT-和-transformer的区别"><a href="#VIT-和-transformer的区别" class="headerlink" title="VIT 和 transformer的区别"></a>VIT 和 transformer的区别</h2><p>Vision Transformer（ViT）是一种将Transformer架构应用于计算机视觉领域的模型，它与传统的Transformer模型在某些方面有所不同。以下是ViT与标准Transformer的一些主要区别：</p><ol><li><p><strong>输入数据结构</strong>：</p><ul><li><strong>Transformer</strong>：通常用于处理序列数据，如文本，其中输入是一系列离散的标记或单词。</li><li><strong>ViT</strong>：专门用于处理图像数据，将图像分割成固定大小的块（patches），然后将这些块作为序列数据输入到Transformer中。</li></ul></li><li><p><strong>位置编码</strong>：</p><ul><li><strong>Transformer</strong>：在NLP中，位置编码用于保持序列中单词的顺序信息，因为Transformer本身不具备捕捉序列顺序的能力。</li><li><strong>ViT</strong>：同样使用位置编码，但是是为了在图像块的序列中保留空间位置信息，因为图像块在原始图像中的位置对于理解图像内容是重要的。</li></ul></li><li><p><strong>应用领域</strong>：</p><ul><li><strong>Transformer</strong>：最初设计用于NLP任务，如机器翻译、文本摘要、语言建模等。</li><li><strong>ViT</strong>：主要应用于计算机视觉任务，如图像分类、目标检测等。</li></ul></li><li><p><strong>架构</strong>：</p><ul><li><strong>Transformer</strong>：由编码器和解码器组成，常用于序列到序列的任务。</li><li><strong>ViT</strong>：通常只使用编码器部分，因为许多视觉任务（如图像分类）不需要解码器。</li></ul></li><li><p><strong>注意力机制</strong>：</p><ul><li><strong>Transformer</strong>：在编码器中使用自注意力机制来处理序列内的依赖关系。</li><li><strong>ViT</strong>：在处理图像块序列时也使用自注意力机制，但这些块之间的关系与文本中的单词关系不同，它们代表了图像中的局部区域。</li></ul></li><li><p><strong>训练策略</strong>：</p><ul><li><strong>Transformer</strong>：在NLP中，Transformer模型通常在大规模文本语料库上进行预训练，然后在特定任务上进行微调。</li><li><strong>ViT</strong>：在视觉任务中，ViT也可以在大规模图像数据集上进行预训练，以学习丰富的视觉特征。</li></ul></li></ol><p>ViT证明了Transformer架构不仅在处理文本数据时有效，也可以在图像识别等视觉任务中取得优异的性能。通过将图像分解为序列化的块，并利用Transformer的自注意力机制，ViT能够捕捉图像的全局和局部特征，从而在多个视觉任务中实现先进的性能。</p><h2 id="为什么许多视觉任务（如图像分类）不需要解码器"><a href="#为什么许多视觉任务（如图像分类）不需要解码器" class="headerlink" title="为什么许多视觉任务（如图像分类）不需要解码器"></a>为什么许多视觉任务（如图像分类）不需要解码器</h2><p>在视觉任务中，尤其是图像分类任务，通常不需要解码器的原因与这些任务的性质和目标有关。以下是几个关键点来解释为什么许多视觉任务不需要解码器：</p><ol><li><p><strong>任务定义</strong>：</p><ul><li>图像分类任务的目标是识别图像中的主要对象并将其分类到预定义的类别中。这是一个直接的映射过程，从输入图像到输出类别标签，不需要生成或重建图像。</li><li>相比之下，序列到序列的任务（如机器翻译或文本摘要）需要解码器来生成或重建序列。解码器在这些任务中用于将编码器的输出转换为有意义的输出序列。</li></ul></li><li><p><strong>模型结构</strong>：</p><ul><li>对于图像分类，可以使用单个流的网络结构，其中输入图像通过一系列层（如卷积层、池化层、全连接层或Transformer编码器层）直接映射到类别标签。</li><li>解码器通常用于需要从固定大小的表示中重建或生成数据的任务。在图像分类中，不需要从图像中重建或生成任何内容，因此不需要解码器。</li></ul></li><li><p><strong>输出形式</strong>：</p><ul><li>图像分类的输出是离散的类别标签，这可以通过 softmax 层直接从模型的最终层输出得到。</li><li>解码器在生成任务中用于产生连续的输出，如文本或时间序列数据。在图像分类中，不需要这样的连续输出生成过程。</li></ul></li><li><p><strong>计算效率</strong>：</p><ul><li>在图像分类中，省略解码器可以减少模型的复杂性和计算成本，因为不需要额外的网络层来处理输出序列。</li><li>解码器的引入通常会增加模型的参数数量和计算负担，这对于图像分类这样的简单映射任务来说是不必要的。</li></ul></li><li><p><strong>自注意力机制</strong>：</p><ul><li>在使用Transformer或ViT等模型时，编码器中的自注意力机制已经能够捕捉图像中的全局和局部特征，足以进行有效的分类。</li><li>解码器在自注意力模型中通常用于处理序列生成任务，如语言模型或机器翻译，这些任务需要考虑序列的顺序性和上下文信息。</li></ul></li><li><p><strong>任务复杂性</strong>：</p><ul><li>图像分类通常被认为是一个相对简单的任务，至少在不需要详细理解图像内容（如物体之间的关系或场景的复杂性）的情况下。</li><li>更复杂的视觉任务，如图像描述生成或视觉问答，可能需要解码器来生成详细的输出。</li></ul></li></ol><p>总的来说，图像分类等视觉任务不需要解码器，因为它们的目标是识别和分类，而不是重建或生成图像内容。这使得模型可以专注于从图像中提取特征并进行分类，而无需额外的解码过程。</p><h2 id="MLP"><a href="#MLP" class="headerlink" title="MLP"></a>MLP</h2><h3 id="Transformer-Block中的MLP"><a href="#Transformer-Block中的MLP" class="headerlink" title="Transformer Block中的MLP"></a>Transformer Block中的MLP</h3><p>在自注意力机制之后，通常会有一个简单的MLP，其作用是对自注意力机制的输出进行进一步的非线性变换。</p><p>这个MLP通常包含两个<strong>线性变换（FC），</strong> 它们之间有一个激活函数（通常是GELU激活函数）。MLP的输入是自注意力机制的输出，输出是经过MLP变换后的特征，这些特征将被送入下一个Transformer块或最终的分类头部。</p><h3 id="分类头部中的MLP"><a href="#分类头部中的MLP" class="headerlink" title="分类头部中的MLP"></a>分类头部中的MLP</h3><p>在ViT的末尾，特征图经过一个分类头部来生成最终的分类结果。在ViT的早期版本中，分类头部可能仅仅是一个线性层，它将Transformer的输出特征映射到类别数量的维度上。然而，现代的ViT变体通常在分类头部使用一个或多个MLP层，以提供更复杂的非线性变换能力。</p><p>这些MLP层允许模型在最终的分类决策中捕捉更高层次的特征交互，有助于提高分类的准确性。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构复习</title>
    <link href="/2024/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    <url>/2024/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="97cf0f9849d806753560b741de47e5c72403a04e4b92afdc3791f80d30d7e5b8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>408</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>408</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理复习</title>
    <link href="/2024/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/"/>
    <url>/2024/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5005be7b7aeb98493606b4ae7a379c65363ff592580bcd3f54eec6cee5d189cd">9ef5e081b4fe98a32076e025047ca199b8697f81cb35d436f11001bf982a82df1540b2db49809a81782455749a9e21cc82e906a04daf954a529bc9003cceb4abc0b75a9fee60cd225b11d39f33865546bc55ad27f4e56cd47c97dbf545e47e7987fd7df1285b5db059eb8f8255681e4cacc94da9da81f90dea245f1b3aabd7a833b16f9c6961a540ae6c10b167718ca44c86b4832d6040c6e442f52828ef8f4134318e89818e2aae01d93993a28be69dda61fc0c927a7148fd89d357c10675fa3eba87a8d3ee26908bb77f41add27c88bc591159ed7d77c5249dbac1f8ee5c106e006f8d987143c64ea48633db9401718c7e8f771449be90158f2d5a4bb780bd79ff50c934ca49db494ffdb3ccf4bd76268162a7492d44cf487a34fc66ac09421a9e1e8a7a0c5d068a0f6ef936cb805f78ae8d689eb6953fcc245d45c770ecdd6201d3000832c3169ec0934c3c5f327569817df6bb491113f8978b30b0db3bc73ed41d1f808d1e9d709f1d23c6ae65d184881b1f26301169178c36a96c9c538ca7f239612fc47c0bdd35f54c4632c0f059a1a6b8238b3d902454040f6b369a31207e9e59fbbb2d905450defb3fb7a17c4dfe7276227442c2a07fc162348badb8f58ad07c3c9aefff571fea40eae335b3873293eed33ef81d0fb984f21ccac624490835265c0e1d4cfc890b8c0aeb0901</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>408</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>408</tag>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统复习</title>
    <link href="/2024/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/"/>
    <url>/2024/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d840be8bda052786f7ea794adacf2497e005bf34f16834a0b5599df17dd9df31">9ef5e081b4fe98a32076e025047ca199b8697f81cb35d436f11001bf982a82df57a2840fcb71090bf4ea3802a85cb36f85d0e2dfdb10ac848557a364f8f4d83acfc988df3b86068aee93c4f9dd76b83c4af01a094405abb758e3a21f2e7713ca4251dcf715cb5ae3eae4d6c9addcc159549eb645dbb5fe6fd128eb3c73c8beba8702c18db01e33d04014b5aa87e45d107ea853da2a765a0bf6ab6f766d1813c5e931d5c4a178cba4c6d50492269951e90b89639f56993f4e45ccf66504f7ab13147bed686f865d46818685057f3c277696463db58220600694752b194302de4528b941f1cc21c79190a6c5b0bf9b9250e8f981727c5fa7d4abe6117bbbd928b7fdaf5fa30195ab2f82374857b39b01e373564dade22216b8612f89a7c3bf036080183e4553cf417be4b405389c4108734f4e4644f2ac68a0832d6f0302519985d3d6e488f5d38a64d5f8f329363909ef26bfcb7a34754f6095c2027b9fc770de07a95e3c7440bc4e0fe54d708cd42d4bfccc784cd17fe36a4fab1db716c27ee6b4b8b93f3da151ec3e28aa03700a0b01c7e99f8a4acd3438fbaf10a888892dd8992cb6700937c98f659fb91800cf867404873565c4ded9d0569b27b44de919d313c6f88c3e8ded826e7663c3ea73180941805dab87f412d8a3d229409a9750a3d027eff2b6c9abb0df6c27f7378cd9f5f7d1008b4e1746840e0e3f14774b31851a1d0796e685335325f5200b67bbdc3ad4846f6292fbd51e13611cf715d52ec77118408e3d5b7ac3cce2491a19ff223df68f4a2feb15171756afc04afde8dbd979d99fd752e7b8d72f7214f7e64f6b9e8e1e1ba5ed84ebb9fc0dbe0a4c9a1229b1a915c15db5f9832047d16eed9830e31220c645ff34aabf3c9c699a9a2b42bb3e67647a5e6bd7caa649a062726814300ca73b16ec6bccbaa8a76a2293e67f98429f7a40b18d101960d292d4b266211421877ace47df10cf996c92a9af66c5dbf1922ff682e9ef3490860a56e230889ca4e6d83807d0e4fb9c0afd9fd992bf9fa5a24bb65fa98a77d63f624e4a23e272655b06f1eb6b89622d859b30af5d253edcc0cdf8ab8245f599ea014c4d13cb35afaf551ebc7456ded6af2f1a0edb0f03fe8d8be70304922ca361ded74ffd21b56ed4c1845dd4d8dd2559251d6da398cb1f34188f5aa22f75e4ce03e197f137e6e5766970bd745afec8b103a63bda5d91e717d311dba8150ab86e7f1c07c870b9be5aa2180ca607dc38d89bd442b300112b4e4a2c7343bec393f43b80b4d287d6fcbd4d60249d03082bd9c3b29e2c0fbed34f20a77db849f8835679336fd56f8855b467839444fe699dc6dc634e24432de2daff2bc118a360a4cf40711b6d446ee8aaa5d945b9af392d9d005abb79c814818a42efb6fea2b24f18b66c5d0dc45dc2b75df7d4293710565cd3448c73c7f04a9bddcecc20611df9f8128e318bff9eba1176ca46c8309a0be031937f091f663bc1199657b936904307c234dc596a0c81a0a0cfbdbd53ff239114d8eadc4de0e66e8b065036e675b68db80d772337f1eb79af176e824765efae2f50eeae9e8118f545b0ca9e1bb11145de0c7a47179220bbb1252777da05aabda7d3f867538376ba41364793fe6913a4e9a3a4cbccc67e6360b5940037251db107dbefc587958b8ffdef355e4bfddf3fd7ce4299edd45a0eaf0c182a3af2152be887a85bd3610f95bd024f4732d6cf0993356528e741e132ac6f0588f97a14be435fa8b2635dac04e6c6f6d165eca85437f3e898e11e8b52ad10e8d537d3b14a8d9a7a9d2694ce74d6c26efc61ee6c54b2f378b85f5a3f5ec123563a88067acf8afa26ce869031fa9b0ff75c92b19acd7371cee54465b84f22b57a35a65b756c221e0cbe3d170abe27bc7a04f5b24c8be3afd71119d6e04acc304aba073c32968e1edd0dd8258c755d6e4112fb24f9920f45e243c70ba51a0fd55507bd1f9e0dd9d2fd71ac63d9f01115e911e130c770539f2aa79dd6c91a1839a019caa2f9daf607636573a25e8451a7c5e3656fd9c6d5d4d528ab05b00b4eaf293a9ed9990c1ea9787099270525044f6ffdd4411ea40129a4db85830ae72dc7660383cffa411bb531a2c8f9fb84463c5f4f432ce6a4d952392a7e1ee514cf60cc8f62bfee7012f8e43b6a45b8ff6da97140aa72f99ad3b7021e3bd3a038ac7a0bc6f38c6575b9621e7cccf95df899d0e22ef83168d89b2dcee55a867b25490cea8f75e0eb837188b71a2b8fbe608d4d619a674288e1b3397b645045e235942ea173c617107d1328fe80f031eff3b4b4bc8b95e816ec9365f0698d036ca056fc34220a5394c2b6f411f932a4fa622584ad3dcc21f51f8096789a5b8f46d02aae34134db1a3309764af0e0ddac5964011c3459f721317cc85a25dd500f2ce560730ee34e5f8d2fca8d864ef1f91bfad655113dcda4f405484f8e4b8e87773cafa93b26e3e7da52eca9159c4109e4db18530f1198609ea31505f4f10ba888b61da43015b9e3f2a8a9aa9229bd910e454cf7bf327831cf3a5bd710b6df98553c1e7ef4168bdd0ebbb4a3c3af599894500ae5326094f836ac7e4d23b0c863bb8fccd3eaf2dfd398b4eb84289ee4013f8c1cd78750e30a6d45f706f996f971ac7f192393c2c9af9d856668d87cbae82bdcabb04182d1f63547e4989bb9f63164f8b02ccff9745ef531286fb2367d884ace950e0dcc0606e67e3ea42ddb10b6c460fbe9b8e786e60a1c5a403899d385889342bd5060fb603b6f42d92f2ec86fa910d5c401bf06123a0d21c1bfd6e994a06321b3dce6f4f3b630a82b6ef836960a279fbd7b314d9692503d469e63235a50d7a01be4e286ffa9be4a90568d9ddcf56a0efb88ea6ccb1a5bb395e0278b14e6a1d56691420dd99bbfa34c48ecd1e0e84c2e7da56cfc5de4ebafd3920a88621e39500491663c3c2b09c52a04d14a233647280f56a4faa0d3fe4dd189be4fd827656576758aba20950e64ceb7082a64ecca715312ada6a8188eb8f05b9e9c95ec8d6b9832f95a90f179da058639b46578a9aec18ab4e75342f07ddc71eebadaa117c379ab92e0b1a7a8d7f9d66c537f33fd7b23fffa640fef94183f8ce9c9102cc87b7fd9be89a56b8470d6fce8154768ff505e4a948dcee0f308319d3e23379fb547f5779a182d08435a2a3dcb86222e761a41ade0d389c1e258454d653bd15d69a32353b3f9a0835209716931c0f1030ff6c93b924a79f333edfb2367ea4fd75f30e2d04377a8d619eb7b217042cbf7aa6b19498c2e4f37eb251744d6ee9fd6558fec4dd6146944e471451844c8b9760e1c920b5c68f63bafa4f1dd8a29b1210a14d4e02268a8b4e001cdb6b726664d845dd7bde553b14b4b72de12ce3c3d3f67c1d31e16311dbcb7d6033883387ced4e01b631e78b0b5563530c2411cd904591c63076a165d5d2d22c705986bb1a773fecbe01a990f2dbf61e268fdd5525bb7ea9900c0c864fe6f31b755d8daca901944037a2bc419cf4f25ed44e82a0d57a1911982fa8f0cf18d503aa954cac675577a094067de8d67f29b026479344e95b63c66b3ff3d74fb93b93302c7e8f71bbd06c3958e00c44c7bd0f9bf262d6ea0464501cefb564a0799ce1a9358f9c363b3c4a2cfa64de4c67a9906c16bdbc00304a199a3943ce2ad9f663d923dc06d2239da57139b5e17f3d2db894bf33da83be3b7f24761fe040382757ad9c577604a431a417d454c7d68d588fee0535919143477beae494221d3b5474c3429c3bfa942592b703453a84030ea7c5c59b3af43aeca54131d4592969f138912ede324bb9e75104ec45980a01944fe76fc80dee71fbd11671b04dd2eb306bce020beefb9d9f87882e848a9b4a8d86e1ba9fa3f179381dd88a5c0f28db83a8e373cdf0b7654646fc6468eccf4fabd27bb5aa8159ce7e946834a27de3e26dc8cfd3fc257dc479913984399b4c17954e5c5604d7c86225075e19dc238a827ab6349d822f0dcb27c7c35b8c18b72efdcbe8341df4f0d864cf242d0a5c219b0c32de372d5e0a7900b2eff5cb3eeefa12c93ffa5f8e8b4786ecd20deed7b806a87c6cb16831b7d25f3dfa3549dad45bde394055f64ab971f75c1c41b88095fee00f95df527e8d53460739648c88ffa1f70829b81602034b1c27c0a8cdb06f0a878798ef67cb9322ffe2f42de7c813764bc9544ed61ef33199a749aed1439138f2fcbe8545e7cda47382e4316433ebc404c191ec08c9573a83768402a7a45f2681993d3910b57ef6da4b14541d178ee7f871253e858278395f5c2d467ed21c234181ba241139e6f06231a7c4e21a9cf2ed160f8dd9e8ef325276f0062da43907b9bd700690644a80b2f0bf49b6960f5e09363ca154353372d45a8d4c15368361f3526cf159329b62e699f1f32e1144085026a8191224f60625d261dd3e5735b92c5ad20d5588be9b236a84ea742f6973261fb6965afdd908954e5f24416d33f30520e10f609b8ebb59bb97333b105f939c4bd706431673a1e3151cbfbf2a8dec014719c01a601e49185fa0d3f85f267e719231c7a08efb1282dd040f5e379deba3f906b7b529b216a2166a951520eef1631c3d67971bb80ba04c832ebe0ef9da73940e547b98400dfb7cd00aab66f17bfde504b239d808d8f2807e4c6244fd60b6572e55886952d2494fe8cf56044c3fdee5578e390923fcf1e8acf2e194f615fccbb1ad0d92f23e6d5e9fcc632952b7165db8cb09dadf2b6ba1a55596b8fa52d6b2ac3d8f8a7dd6f43dc49ab7f2d0e60f47e5580185117809889235b8f01d7c5b00d74617901b47bba7896bade58f332cf214576968c10dc30849e688e99ea9a29f81b334bbbea1a536d1ec1d9b383249fe40b5a17c41b2b89c69ae533773d0f77efaa7dd117d0662707dc76dd4b6a1293e2de836450408b403101102f3c20dc8066e662339e08cedeefe36e9a75603b8df845bfa52c9d3fdc58e2bfb86792e092a58d89803cef520df73dafffe20f0c053eb56f261b12acb49b843979f2849c9bbdd4fac4f199ef1d50708ac3681e455ae9175d62c910b2e56fccdb6c0f756c148ad4ccad0a713567ca51c7a09b9bbc5c38d58ed1f0799065e313d4c253b2ced5e7f39bf6a04db19123f489ac70f9cae0c5e45694205cdf89dd3311ea59b2717577db8874aaf71d6a759622e22b9e2e15fd453d91e22b2ad4ae414a8d01bdfa80233a0fa37c882f1a9badcb50594dea233786cebae3ee19178d0da70c181b2d36361bc9416c0d0dd6a0f9a323e9171b02598f47a3ef5e265b7b1e0a097892193f9cef09602d108ce95eef64f4b22e529cefa1d536c5938461b3e9936c01fe4e0c56656288c8ced9ca62a4db004cfcbc3c0ef4c66d2d4b228e8ae49824c335b4f9faa195d69fa3c685755fa6982b23954b7f1fbf82cf205216e7fe2b083f6adcae01ebb7158ecfd23075f59e128d798e80db255bc053b4f266dd8c156b956ac98492f33ece07827ceae391e79e9c4c42a80733421161b5575bd408732681310aa6d385bb5660cffb3d2e9d843a402b14d71b2fac02ee0193b0935f6ae094b9b3394887a8bcb00d31667a9f981103ceb6226b2a10377b8d6823aabb7f444a25f6fff358ea4c8eff518fce539e5ecfb8bd19cd476b3b242fefcfcbe2913054301ae404e59088c6d33f5b1c16b92f451d9d614bf34fc48f7c2c30cd7f27e38d7eae339a8c405df00f1755afddd9bff508d3f7ea7661a2125adc810d452070d647c9e16f7c695f88a52dcfa04e2d3c3009d268d7a2fbbb820476dcd90603c2766f587bde002c4111d1f989aee2478b8a294491943795af00f13c08c7fed718e948b15e108fd120eb2284f473d5373b75791a04e594d03d35c0d1b533a9a8eb25fc5f99760a831ebc2bb5d28167ea17edc334eb3ffd6248d4d984601b743e75f69e0409edab890ded29514f6b7b546d15f171529c8693f7092dd62f2e66232984f56c14bf1c730ce863ccdfe53dea68541d173c7b814993c74facea1ec678664bd022048d1ab36e3b9a633ca1dc53653f486c0db114a73ad86bcf0d49782e7badaf606ea65c98fefdde14130d389b3cf7f55bac9dd8d3e40f08c18f5d4fa92459d8d9fd4209baafa6ee38b0f603cb25f8d90637c28b9831b14bbfb936bd16d84c26fbf07c3b7d9dda21ed0efce9fa5f1067d7a2f93cc20909141e20cc0791cf1caf69f3312613c5891a38a909b6d16f87961a0f58bddfe8aa21bac024cf2620160c1f9146c609415cdf51ab323ba1708c8bf8ae5a3d33a08068043a6730ea2b08da39cb5de2bcae95c4b750c5072e129f601c0493647a54c553288778edbeefeea1169ad3d09fad94ecadafbdc88a90fb8b376f988844c67f4979135f49005561c756bba245b8cb69bf31f20fb76bb4547bf6e79f3d047e19c01dd2103dd4e7953c5028bc52b77351c7ab1cff3c13ff2716336313feaffa2273c0069bda5dc5ba007b502786093db0c2c676f9fb230e0c76f9c3d5b49a62a46115f4216b1935fcf7eec5be0de776fcdf578c39b6dfbb537c660ea2d138c98068d6bcb09581607e2a0c0cbf7e531c3be303ffcfb81c45eeab6068b98b6f3a6b4375a231a9c3796575381778da462d5e20bee7dec0cdf037addaa270546315662ab71b1a008ed6332bea38fd3e2518f2ce1e00c4a559e120ea45b6bffea853e383dcffbad9c757c543de63bba2b736e8f1a73d47e5b75d42e33919c07160e60cdeeb396ea378e5f12bc38ad6598fb7ccea17a630d162c4760b1320964091828d4f015fd9adf65e524c2150d267ed92587437bda857a344175d87900a5944502c08f2827bb3f74ef1dd929ebbe0e364ab3bd07334fae98348a3a706f3e8bb2c3a60f4e81115bf914069bc16406e3c927f9fbf50483a03f4a99e7b2475f5a8c0f8dfdb5752c16fa2365c455ec5b3f8d5272fde60ef3ff8c2c703b92c9861fd3135794a8aa44eb4b1df5130079a249b9e9a3bd2735a189cc0ae3fd535b89d53cea6b572df96d0b115938f9c1447f8117ae43eb212780db586b23f0415a5f6c4eb77248aaa5221a2576ea5c8a9648d71801b8ef6c17251b5b04a717225f1a19aa0d15b941404642750758f2e44ae5a571a877ee9983c7929e91393a64f3d23264f603055589351deae31d299cc0684f86c6ed640ca37962c193fa45d639f1c6ad0bd6c21f614bc3cb65ecd110482f973dac3a7fee6a30effac5e8c5bceed4bb72f08148133d3567344956aac37a0050ffbe99e2c28f920470aa296973f8e1febc01348578e85cf8d174e0ca59d12d7ddda982202fe175db1d8a19c16b925c0463fccd1335adfb67ca7f98b3053420ebaaf0e7211e3210f4292619c3d018b4be8b8dae4148eebc8aec70ba40b20443f375f4ea65b50ba9fc6694214ecbd931ace6a9d48470b299f64232e1f6d33bd4de7735bd4c582d02e8d4ec6b5144a259aca18012d412bb3fb4ae0af3e16b93daaddb774dc2a3387190e91991874599cc8db1a33740aaf872bfcc9fa0f0907845e4b53b73bd563f514827e42e26251d8a9552973dd520ccbc18fa10a70cdec0e037908c275be3b34b71ae9ea686779b4ae098ee0510acda1abda54baa295fbe014579f3cadf11bad772dc33e8d9a8ca6a6c68c5c3e917cf98a0ab31423b0d40f7254a211a725e3f6b2693b3704d83ed3e1bf0cd1c6bf7753598e2bd5002b2a3292f6dd2e824385c0365e6a6c2346c35efcfd47b05441f297f95dee679b531c295debca9b5bc7143ba79e7326b6e4395ed917d108e0123e512d5c21717ea1afc9431b1b7fb54c802a18c5a7e719a9064df14ed770ff7ef8e7396d0d062b7482d14e08e78e43951cb93f5d20b841cd95d38795a67b28b161d2b36774c4bd003e549e89dac927744f44e3ffa108b7e101addabd334d04d6ad922050052adb59e7048c60a50106f5ceb9e99f139be00aa7ba891c7f37cf1577e95db560a2e918c3f5e870085793bd29fddec653bcd1e4fdb333098336c98eb23bcc6a20dd64a4e938857c63430d44411dcf07a91f081285878a144d238d512b4ad15f8b068b182c7f978129cd70627f229519186c05c640e5a57b2101616433c4fdf1a2727b4d10166c00d8432340f1aa0f9a7ef219b0cff1963c9d6a3d0b0d10af335a8c61c93180a36843afbbcc6404378674319104abf23869c40967210ea8813a54275c90b75df1211f0e799b62c70c3138d0730f711eb11aa02649395110ecfa66e81f4c6dc0a0ac417d77ae920dacfeb9de936294bcce6f510e4b956ef95cf0638774b4251331b4796ae348820ef29ed92fbf70ea5243adab6122fe78cb9aca95435583d004b6e57a3827a03ea35990d03003c9bcd32cad2217664a01ed0f7cedb5af9c270885ffbddeed8340239c078b787b86161f686b7d37c97f533a9a952b50c50f453119677fd85b447701349cbd3f25e940507bbd7a263fd912e73d72379513a90392e643ef077850c57988362a84a7c236662645276024b655a900fafbd4046c966071402598ecec5fbc95d74760ed8f124a98c70fb46dbbc92c54900fc2dc05e4554fc86c364feb1f513c355a357baf510a17edc18e6b242ee847ffb6e508c81f53a51b666c620f3e1b79cc6584b1d943b66ec040553805393926fc6b38bc3f66e4bc3cad60c0cfdcbffd5de825fea1a846a13e15329620346260591e674fe1d0c35925f71345b8dff85fde7be07ed8e1b18d58eaadb5a78cb9460e937f7b253053ac27db61985ea760fee5c4f0f4912fb3d66a958df61ad822ef69610fb48e1483077832f13b6215a2d78333ee8f8d27f3fbabf1c8326e5f15ba84d2a33f523bd4ec4fe5114649c851e5a8599d185739c5398ddbb27fd086dc6d6441243e66293727644f3d630974160b1b504a44c62f8f137c1f7b7b55d894252748cbfd59052843ea79e925a2c4b39491bd20dd4dc29a338b690d4f87c95a695afaedadce35b8efdad17f624793de005cdb816b400245f28d98790a28a88e91443e16b93fcff09e89c569bf410803ddfbb364f0b2187a80f1b1513939e32750efa61182076f6f2080bcfcd8b577f7c08cd150afa263041e968f17d232745616fa1bff7e56454360cbdbbe13519d5ca3bd9f72fa98954908032a75f4fa20b11f554f640c528696342c3fbe3de1e63b17842cbfae909237cee436e313ad17cccbbc0629a908832b0e5080eea85b0b6bcfb94902b6bac6ea447cbfec6093e51aa452c0c9fe319ca165b6ade82b471f6f35b0cd9c83a27d9e99c79ed8591248274304d903c46214ca22a7e85a877a80d7a8b7784df18258261b3d1c60fcddad3fcb6d734ebc9c9181a01607356d9489f4a603ad606f732db291721546800b29b6a4f7dcc23f323fe6813de209169c6bc972b469ed8febdfbbf9ad5c0fb2444a9b5987a3315e86ad15b749e499e2c389a3f4ea3e9dcfdfc8fe5c47cc121bda9053b382920e28478e6bb7d4ef8213ccb886d00565a265f7e8c5e54ea29a957d981ff3b52b05c0fb89b3588e95434c50937c897cb5f1a0d4c15d3f6b0e345a29f2e65d3fddff18445538d75130ee297af8f27b8ccd7600ed1e5326cf03810cf05776c59dfda590ddd5b5b6797a67cef261b14093700ec4efe3a8b4aa4dc507440061597d1b778e3c86dae3e6a7fbf3989b07f9526267f15c509dc7a3c3ced2204442fb9db0a2c573689e479d9235853559289f3f7d44ae18094620990a1a8a81b16264c8c85e4c5799663a9878a6ad5829587dbe6fa586c4000350de2a76cedd6f401afab698e02add6342df4ae48a5426691a3ec5622f09443c90f4af1cc9b3d0d8789ea63c60d8fbe24229269eef32e2cbcdc17777fda93cd03305e406e3f59b056eaa20154636f3874db293469b66bc712b80df2f626eaf1b8cda00b506f8728e8bdadf813f6fba256aebed4c878cfdd2698f6f0defad83c2f36e76dfdb9f6ce76e1b3c9ebed4c37c65f0904dc9027ba607d5ac862266efda201cfb14cf87f4b3ad1d2eb8dc55f96d2710ed60ab955d7722b2789bcd0b46b0e555b6d9ab93a8ba0018981edc18d15612728d0c962b98d9aaf9e884121d7ee5de087039866f649cc964e5e9da1906e079c6fef7ad6ea21661e22bd2b3f0af222112b55dd3c4eb12a1a1387c0377210063979c1b05eec4e3b38eb75fdbeaf3dc4baae0b15450d85731dcb8d274cfa28710f69c945656cfd4259504b766f9c9dc85e809e48ec25a99405c5e47edd0c9879bda11d54dd77acaddba0d8da3e22ea9dfc4b0ede71b7c84080f41cd3f5412a072537e29d5626f763be7ff4ac9682141e89278d73adde387e120e6d85207153d7d8e3b28a40081ba73b19d48a6ed33c460e941c279e6f231dd24932f5477607f365955a30f624a3d72c8df76f7ac6f913c21ef6e841f4f8aff3d3b65bfff3d3732786c9a5856142e15770e51d7a9e73f8c512fbd60c50c9be2431c4c0de9aa0e966a19f54ade509bc339c0d50757acad0943a4dfca369a232e36caa14d837e64155623f7260a49d63a104e003e0c3cbfb730e32e0fe5a37c98c46a5e197e63970ed4d797d5b0abebff99e9a04dffa872fa34a91bfe225556e16ba1fba64eed0060f3a59dd90ffabeac54bd140b2a3c19f3eab3a1948053635dc9b2fd04d0f94ef0bd61271c5628a5f86b4baa2729663f84636ff86b84a1c85417dee0d2d45c91783ba9a64534feb83ba5ecdce4b2d33766821b39548ecd1f56b4113f8031042cd3c61928a0e24927a99a307cc28abeb986ac6cb310b24ba1ae4378c427b34d4fac64491c0897f5463423f17befb940bf327c97f2d69bf94ef52e9a73f5646f1a1ec4fa9de47ed2e9e562b9cde028d360fb7c27eb11c32c21e25c54c776e74ae593bdbafb9c4c7b9f0543936bb1f55b391e1ee5d4422f768bf8680b3c98f5175f8a9846b3719f092deba1dc83caff3ce831366d32d043a44da2964cb8b4d28f4948729ca6259502bb5e708c9bf717bdf7bf01a073affc3faa5213a3aff8fae7502fa71889049a3e97ce7f979557a48cd35deffbe760329bb2ce5ef5a591fb79c3929ffb2cead863626587cfd40e1937f265c490ffdb0c30a0d40d733fe2dcba005a2eac3831505055bdbb4ef13971f8554dc4f3f792d814f5127b0295c73ca776444056e69abf9fc3716c8bcc1b969f59206e5c7e6d62aec154fedebbb020f209803b4362c2c2dcc7d8bce7b261a1d1f59cd6b4570e5755402440113f04b3ce3cfe76dcd1e4cea2b4350019e700b75b5ca7b4b6169716f1aad47fab93f4c73e3d3f5ed9c92a0bc2995f64ca2e9365bb0276d028d935ad014f53c4bbff932983e1b9a32c25367fec2415b2947b29b93ad027daadd2c48a1aec8f07bdaaf95c19c8261cd8addcdfd04bd5fb10a0a664cb103a46f38b73bbf6caa3882bc3e61a35beaefd5d11d995416dcec4ba55fa8a3edcd40685a61ae05a98bb4929a2d6aad8c13db6ddd8b7a23237b615841cd6d10f047fcde1bbed996ab179acdbf461c6c5fe9479056663474aefe1bba1305dcd1d89c1d4886a4ee47e1df3c475dde7fe2dc68975cfb8dfa7e78881ecebc085391d5a2ac9bbb07635d21b8020a81079ee95ef8f1ad1b021e053c0e43f1d007889c611ecdcefced440b8a5a5d3f04f4679eac95df52bb95a5b9bcaf7181c41836b83ea83931d53d08090199ee880e008c877bee02d23af98d9a33417a358d46b1737fe1592ea8d73b0b6794bf818cc0393fe36edba3fc49e7034656250a535a80a31da52cf5560328627fc1dc297d799687f1d075cb835f32d0fe441b37a26e55f8276e96774895eb60955a42aa086bb20a154508f3ff346da1ef2a084830e044fd89fca29e0b7e212648790431e3b0e58183dba5101611aa5ae046dfd46c49ea8b6fb3db42b68f96d77ef7e89e49d7aa96e61df8fa613faea996f56b428cbff951a5c3bed63e3277726ce4e5003a108144babf4e1868f8ee0326dfc8c51b9b6e23336a151c946fae6a3e430fd70a9972531ec87234569080d6a224b4cd64472af337517a9c2d1c885b81c2276ea76631fa82f0da2321566e8500abf8d4c57f0a30395fbc1aa0a27d97413b0df20ee9576c7a143e184289b5b2cd38642a814a167d45f7ad79c2a79b061bfe434cd15ab8bf74005c3866c58a73f631b19b04e88b4083e3bc362cbee9bd45773aa837df1caba9d5722adadd360fbb474509bc2fa5deaf79a63aa60cc5da2d3995afb651a735f4454f9b9bc79a895e067c47cbf688fd41afe9ebf9b7872603c7a72b749dd6c8439ddc5f96c07c96a97691352a099533221f74c8754506ee222e158f308deb45b727970af692dd5f513f7d5b874e60a005ae4c21dd8cd4ccb5cc0283bbcedb4f657296baca675fb970dc447686821fbf99dadd256f4cbf09b25f8ef92c9c150acfa6e5331a6e1d73bd10efe8c9d14ad08cdf31a2b10f0f3e01a529c24fc6a7847eec2d5998b1a805c87943789a64f6c431125ea50fc6a3e7adb1bd98fcd70a70e21b1abfa66ec8e02133e8af46612a4616d7a741c6b2b785f19d0328d308e86fe5bd86586a3c0a7573e91a814f81f2183fa97f54c1fd7711c0b8999a22de66123b7872f62c0c87ea9f1a6994924d4fc80f9b21a5e44ae52b7332a5b1cbf76b189c22c76b2ee917c99cc4e1f7a2c48502f0cfbe03dc690e562902d691f39c8a987b9f7161733ba44464ffd627949e0fc7baeed9e392b63f467feff8e57eb864509cd95137e5f2a91d0a1658d92c20639e012f1f09704e3ea49b326ab6731d33141c0542d4cef68c2d7cb3d3f7c6b7cd925fcf1b8631a90349c7401adae385b3a026fe5dbafd55c2f349975e31f4918356d6c4bcee12bfa178b15278654ea1be101ba330a66733a8918389b064565a18961c222022f18dbd9e0c81161b9b4994875e12d3475c1b68ba9ad6f8caff66097d0f54e390c006f74379e2f6f1a46b32e5d5329104e6416670eeec0646320280c7aecb2ca822371ba6b0e7beea549613086b2faadf0b2e4fe801564c1e8961008fc3cbbd960186a15b079bc34d8d5029bb85236a3c09ed8e034dc220de8faf21da928e4f29682f11cc0dd07143ccac7704c30dd8ab66ac381572bc8bbc5f1da40ac425190bde3819157b950d5d31da1c60784b165b8be40857aa82619101e78dd4da0b21d71834d451fdad2b45c1d6d616e1efba3ff99db9c0aac05236e2f9456cf7e134a0b188898586ab89763fad2579e923ffd6aea5f7e543028decc6bf6f6ea73bc01cdb1d8a6fe3bd0afe5b199b21a3ef546ba1489fd03680d33f6b2b58961eff1cfb4ec0d79e9f8bb62d68bf0f028825959929547854c9705bef7a27318dd00216b8fd6c2cb99f0d08a8e0f378683f04b19c6eb700bfa64d64d5e7917892eb6788f8e226a0d4c317bcd640dc037da4a77110fc122c63036416d0f560c818a8e58f6bc0a535f738306b278ec1c3d2e9f13e79032fcb03ee7047f31fabb9bc2760463e1938171ff31830024571579cac87804e881dd49fb504fba95050909455dff14df05ec32138fd659683411e448facee352dca2db1ae7f3e7bddd4a943f5dd59f0ac73c15f74d29151d1406c75f305e87797d471d38fe70228e51cd253ad3ea3bcfc0ef1b41e63880d78b9325d13ed6ee419467e4862e3576c7cdf100c5051fdab203d5309fab09830212a6d2860d2e0fdc2569f9721a75d4b1ff506b875737f4cc2d96b0f0aff66e3da4ac7ff4c27fd7437debb79a2e913e2747880b86e6ca853236b37a2f3c44849d3f7bd6e36b6c9fc93ae41663aef15a5139a9c1a763a08afec9c41fb8f88eb00608cef0527f15a746349b6862135eeb792efc86c6ebd070b3c9516fbb4a2ebcf9a7f942705841e92572d61326dd457f132402575f5856ee40dcdc66db9747aab02099a90503de6422e3dde11283995fe2b57b00d157c3da10df169616a86e5495897b61451a219eefc5467d21700049be0086edbac33352a552bad8f69995ebdda155d051fb85197afa88399a578041d824a7912ecca702d0453fa0760e4f63976cebe56fa01faedda76c9361efe68ca9425025c6e4625a6eac6b780d8c044bebda124a18058aa16ddbe097ef4b126314a683c3d14c92bd5cd2bf971795e1b26cb1cbc4d8ab61b4a0c35fb412c11330f4cefa9a521ff0eff5e3b221c699454bb30fa1f1329884382ccb0d6b32a56e35e2412fddaa3033443cfe5d2ff8e7b5f998ce744eecf1fe4d988f95374e0fd9d53ec124e4484ab2bc19575a8c9c84daeac6a6287e3e8521f396a26dd575d654390332491e77146da64823b080b120aa510dcfd369fcdd5c47e0e2f2026b2cc8808590d8802b882e59b93e3565bdd50f61b27214dd671f854b1ccbdcd72a13bb4f872b214cdab2c0aca9b4a49025ae709105d7d42ce0f5997d02fb763d87b05239432c23885a5fe7551612157cfc2e9cbf87dbb8ede03fa23e64296ec208f5d0f8d3616089bf47bfd49384a2d854311987ac6c40b09d03bb441b5bdbbffa8f6561a07eadcd098fbb2b1fee82f3efd95d0ea87e5304eacda91eb9d41319efe81c9ecee53305e0c3e0451e05a04485bed3e15cbdeea58999edc48ba2ebf1eb3200f169cd6b501cb06f96038e533ea45437175a699ec48432e3b505daca252976e72c3fae9cd9bdb2f5e2d55d927f5efacb7d25349f9b81a5b193e13056a5d16a1ef67744fb4a20db1705e0fae678eda468d6dbf4a1ee7557ad4934f95390e159fd2a4695fd91e49d6fef2cb4653684b77931d02c9a69d23d09e20971ef436f4d4d34d77cee5e4b6d11cc23df8a0787f5b5d4c24c7c08b41a3f325f7daaa2dc03e314dcde6373d6b44f932b2fc7cda5383798d7ee0a18ab6f2006ebc9e6842b9c7bc25aa4904a51b9af9112cf8892bdcc4a532af4f79eff10ee62f21a26f7d6481ce8573fafaf1f451f4dca249d10f508e5c4d301030932b91657c701d14bd74a9ad18ce2402ef98c2c0d89569bea44bfb86cddd71823d8810e825a55b70d11187dc8d418f65b4f9ae2e4ab730c274363a6d83652b3d515b1061dcdfa7689f413276d3f5195985658f39c688c55740f4be78ceaffb6b9b5cce8b4d0457c220db7067c82ba5467fed421406dab87352b0b3712b6c04ad34284667fff500d09a1279745e0d5be7d75264c72b6f2b528298f36a2c20c6953c09d0ee4109b93833882ab2c2c0232af01cdc72ccb9857d89f49dd556392a219987d5aaf3107e2f3db1b3da1e6308153a0387648e9c08feee90261cae55e030ba3b3386439305b64654295365eb1518a69253796b0bec14265da6d0798a5c1c4c27a2a005d92dd127502f8a8e9ec80fe3e8b0cda1f33da540aee63de983e42add2b821644d28d39ea8363ded9100f6ba2b0dbe446ef535449e48de5ab5baaf3a45750a42a1867afa5a75e6f933f510d6ec3d66a201bca68dcfcf2a92b9e94871946b93243eb7d4c70d4b744388dcb2c0b5989d869e0c5169dc4f0260d74eea62f9b28fa3458af9bcdbcf4e244197e9901ef9c917d7217bac1251cba2d60c44525aebe995eac667ee328350633ab019a14284195b71cac5878427f43ca55d30efd0d3f1db8b86f670db9c9b24d71785c99b770a0e7cb0895ffc14a6f9150344c4dfc3a3b9618c49768560734db2afa7bf367830c46bd385a36318c4f8762c5b5060a2610d569490e9be9cc11a3e55bd6224ac0890b3df715161eb7a41937142af660e6320251ed3e4007e5c80ac9445ffe31efde953e5dc8d6642c7123d1e438623e2bddd650609176ceaff3b7c5e48a278ffa32be0436a0f7d82ad94ce9709bd7391879636809eb69c9e7e8e0171619560d3f49e2c294117c9f37193c104f5f90c2b39781f3d2cf5f195e0db2aacbdeb76e4ba12978de247f8bb9014f27b8255fcc90f49717126a4cbdf47c14b849bb87a76768389f9ae89776dbdd23b0ef2967a2d5c5d6ff3bd66beff5bda450d164c58d7d038eadf0479ff4c2147e7d8349be55fd0301ebd72cf2b0da72a610c31b6f0653173bd8e869b937b0eeccea6b8a4ed1235bd2aa4899bf0f35a6953765d19274cab36b668b07cfcdeb371750b308bb600fea6f6e91c59e205240fca6b32fb51d2db322b41a2f2afa75a08457cc10e017fdb16411212161a75fb4d6366eb02c7a8a3e4596c10a64ffcb9a6267e1742a608f905f1dde770c20f19811c5329362a4c3bb364f903febcbdfc0fc123e0995183100e873a7939172814d06d3d2d70f21a94b533b368d504bcda022179273bb2a661cea63ae151970b48403b8d20bba3070b8d48c975b60ae04b5bff969456695e45e417d99e9e6346932a6fddba842053a3ba9b9d99359c7f55d7702c51caa4d8b91f909abe92ff989c854e19bd3339b3e6a8c88dcee773aaa90ec13271c06407c49b288c146202b068f8948a4908753f177c6e12b753c86f69971249a68ce2d923818b830d8ec7d5d72a773de5ec5ed045cb98ee4419c96c9824100af8db1e957300fb07338a116c980f3301cb9fb60b424de4243d979bf83689df5003cfb2ccdee1e6b78da01dad8ed51cda0e30b030c8e4f3f73e936377866ea79aaaf36341509105aa566adc046ec96476f4de2ae68da9fabccb2abd8f81e98b51a02108230256825f002d86f01ec0267d5db4648115bdee14e233d6a51e55defd978f0428d0125f082719721aa69d023195ba692d40c0136fc99d5b698feab613a619345f402e5f63e45b12e587341d4161eea5ccbb0f667cd02e18a754119697bf83b051d9a25f2f7c32a99171377026c0b3cf16aa708aa33b8c50fe72d826e15ad5a0481a22b33c117e2d1c9414a09190884975194590aaed205e833e879ea2be94484f90f277de9f621a428fab206fc582e70a62e013bd79351beb370b435149a5f17f0661507e9d24d675e9bdcf9095491ac4ec3f613e3d756b8af2107f4b998d36e9f7ccbb006711c9d628e548da2f5de971fd77cbb7438e12105f651ddf61f750834e5b1ad467a1ce7e7dd7c4ccc0e18c63a82c61e88a93bc31cbc57395d3546cfcfbad0bb2399f931e811b910587bb6027e903aeb3601c6722a329cc3b1732b4398ebb6a7757a434595888cd027581d82b2953b8d84dae3555d8be6c8556c73ad73d8340b4c53ab784c093f0fc995844f8e57c5aae41f9e07e1cc938e3e902d178370726b238951f9f7a4ed6349d2ce9065c8a11df5c26435a7f2e2717c7c52e49ac6ed1fb1d53b6df3faae7700f7c1e1308d3037632c966c1e662588bca1422d08e4f3baa7156822a7d138042bd2ff1e017b0645712aaf223b4100e50b4723abb6b842f728f1b81566ba45a2abf6218bcf61e13a055e0ef2af47ed08d5644300d5926beb9e2ff17d92a9e77c5a88335f63f60ca5cf650c3c0ef10bc68ff4e3b369e7bf57841c4851130a1f67a29ddbf71df9c62d8ca489d633fe34074b6fc921833936bc30132086a74dee726c377d55c036d9e2f46d536d45fb9e34ebcf3eedb838df4effb58490f8d090616c432eb703a5addde55cb64cb47a887b8b8d4ea474496c0f699468ce6a0db80757303ae7d73eca2483a70c4b1aba4873920bea0f488341f712cbd12189a823c2bd9dd53646d63f7a20e3868c637e3e091681e8b7c5a2ef43410735e1489c66865091091fa27e80ebce04aa6cf3db7942840787e4bb4f4c70b32c7dee3d87260f4fdff0dae985d377de128244fcacb9079e3c02e848f937a278feb192ed1fc0292bb4653054cdd5f16c9a6d711ddab59fac80973468cec1d834e2ce151e1b274b9ce857ab242ab560958c5b1f2dec9f24547b225f35ba1e77de6988bfceed8af722cdaf5306cdd583babde11446d7e37c60e90e0748600a4db8ac1f2cdb009d0321661c2867d31323e0398b71065ebb58344861b71d76639740e90133b3c5a60c72891310b63e69464d90a0ba3f577e27d19baac1e8b29c2b105e05b02c976c49381a5a05ebc783f9369f881fcb52b3e61a6dfcf59634801f8c0739690deba0dec5c85c0245afa12cbc221e8de5c0465b1959bcadf2fa9fa97b77d750836a1a3e0ac191104b04c00f58e5c4c3144e0f09722a7cc763c1291461b3d731708ab51a410d22ca9a251b6069ce3ac537aa09f6573700c21a60421b953ed5f480dd68677d32bed740497dc28deebcd1e61778100e1ca21597b828842a0b7cf4a10f19237bb7713392b62fbd5daf6da3698cb79bfcab4a56dbb36f6f40002ec15bc873c73adffe67ef68434715fcca2f03cc5e95a813665894f5c8ccd8549406a7dd8c7ddd108eb331c0d289f71eaf2ff881b59ae37c3c61506f2bfb92af6962d3b746ae0a36b593175696296db833b362f3eb865ed9dadc2b4635edc06baae522822c7d04f7a0542c2dcd248ec51d1c447c5797e44a4267e0e67c0edfda2bc045c37f72dcc7901fee5fa814716e50c7cc2f976de7df393de51b6ee755b4b090be272db930d1c1ca44454d8c2f43bccce86d45b6d33ba30b9d9d8400437d2a57904014243cda74bc1ce5dc1b85fabac05adf138789627a2887170091b0a3d8ab1c4e34a84177eee9f2954d64bcede108a01925631c308be3647cb1385bf6ca1a1348c18d95ecddb4a165e36b2256f0726e4076424a9a1198ce90b15ee1f1def0ac987421d81b6832d0eec4b0c6e02faca5110e3e56402045fe5f41ae2ec64a7b6c6a5f1273e53468786300d60b7c6ba6eab7602c0e715db3d6a7055da86fcb20eea538e89b24beedba4794dc71e969d14baced490dbea55085f4ec037399a299b71641d046fa6cd424eb89d128162bfb55ac1080acd3eb542738cd0a9c68de3019889d4a98a1c7ccdf0813edd07f5082fc6f621225a9d38bbe512292ba007b4c51f64784783fa4d6517faf9e1aa8710a91d1138523aaf7b5b1588ed1611fa37fded6c88e93e0bd46ee24aed0169c5f9350987bb872bbae9b73b36ebb6dd42f5f195218a7bec5e97ee81e3eafe88f2d7a45b8b4e0302dee79c86eda75ebaf1f231fb1370133a330b1b42813b7d439f94d7384603a4aec7eb579defeea4bb6158393cd4906f57afd771634e8447d06329e5030099f88c345dc675c0a162007077b3f95f59af9b81acc3e76a628bd6927aff303ff11dfb161200ef2e75bf34bb46f13f5c5df1e96ef3f0ede3bf6277012ae3deb19f77c96936b202d2eaa77e9fe1df6b0b91b9868e908dc01ce741cfd7864b0d7d30ec1a3043a6e0a316d55ab1585234936e74eaf4b6bb2e14f058ff8618ea23820991f4f0757da2263b285b7e5114d8299225943691b196d53800d2ae43e301d1564b9e5151eaf8e13fd67d078b76f28f1075d6979e7a2c0a6acf06febe4ba5ceddfae576bdfd6b9fae268e4b42c6857b5ee6fbc6edc3ada42e420db5575f59beb48e9478d93096847b543e5661df529b025d85e623998370b9f017fea7dec12ac7df3a70586dba8574a61579a70aa33dbe0a8aef8606fa24a41fdcde9cbbfb271d6b6a4668bb46d7619df3170ba4073b4297c8d12e0b602b8577ade2aceb996b7d6aa6a494b4ade6175002dc2b5c068d4492b0bcf415001b9a8520dea93665693639491227d52e3b54fc2199fe54cc9f404cea1478ae60e6e36ebf8472f0a711d7399639c90d2fd9cd6f55bbfb750b5b04d376da947b062b019f0cb4ba3c1c659267e5bd095e987d0604a9a563269bed61ac57cda3ba904f7b95b406423197a7a92ebe971e95b428e615cf038c3c6296640af96a8bbb6a3cc9cb8897f0349b8f2be2e81a4563bd6f39bef798147a60e4424ee7f9b4e97e86016e891851a4f8c3735b999da22b6212ee124abcacdfb9d224ca3dc9a259622d1f0c659b3f00bbcc5ef5471ad846fd663b3e04a45723c7b08660f3463e854c329999abc7311a780474611008344521346c8000d27c8908919a46e1b68ec59cf8ef24267810bf857565c7b0b989a84471ee9a236c5d66dbf55cd1734f637c1dc3d407b15d08011a13139cb5865b2b32ef1757de89fb67aba2a157f96a86c594f0f0826e8476db107c982e908558fcd181f5bfd3bbcd994bfd47871a1e8a78b1717731e9a050bd994d9601a65f6ab69d1dc6404512b83538079258bc5119af0e1752d3e88f1487b903ece6168d31b8de468a13ff8e5360b5304e4435e69cd3069d79ca440d4d206998f6c3f21766c2d4e3df3ce8951b8026d9cf7cc0b3252feb282c60594511fa355b163fbfc4222d4e7b83dcd98b36b624a5dda249503f1d725c171f2dcdb807d5196539ff3af5fbdc3b095d9034c0550427324bdc0ee1ed037b9b1b11dc78e8caf3aeb4a4f9806801bb0da934ec0e51acfc7aee163aa484afdb5f3de44efba761309d9660764b4905180c19eebc960260cc07f16ae32c397972daf68d9400d56ee56171736d5928e7dc967026c5a9cf521d6612da64e06d93b4086e90a883ec3d7adc619d5662247ec5eb9a3d8d568938be664d99728ce87d23a56f1b17554941f8cb0432e9b57784a9a98f43aecbe19e623cce5cd34bc268770ce4cbf4827ae6824e9190ddb766c6e161ef821e9184bec542952af38b49b9c3bc3da238d8dd6cd0a44ba84eaee8fb15a99dcb078b41c39ead42be00700466b59b3bcd848f3e076221dca941b3c9e7ad2ee05173305c093b6af433f1f4026c97a07af308bf3ff98dfa194eaf4268c9db77cfcdfbd847082986e1efaec67261bf97e42ff3d9d17e5166bca3d0e8955159b249093fabcbffc0186519b32bab5298ee0c1fb9138c3f91d60e24646ccb2c8a87487ff0ce650ae136ac81e416d1931d508de8d8995a0cc3d4aabcde740b1c2e8a2906a38d5bafecde36419338db2c2e960cd7b4e716a7e23c026897e62f35655071512b25102fd44ebb877a1f04049170fd2bae4172332125b39495373d082343d241b1fc388116513aca99b005c5d8c3ce5a5593c0d678e62a0a59f84f830a4aa03a8a177047b323206ebd7c3fe1c1b79c866526ee76a5e44b561209590e76a33339f003cce4effa9db4a68146d008aea2e5cb06de3f191e9fa1f7b7384fab4a8101bea137817c1db27fa2c2774bfa79c626c4c4e01d6b7e4908958c7f6fbcdfc698f33722568b0ae0301cba63f9e74a178b03f4fdf4b87f1b6532ddae0978dfc91560493254e2fdcea608db82b2b907c759bca8692636b131828791fd256928fd9ba8a26a41c8bb27a7259a44e4847fe5284cc9264ed988667365317c0fab03eefd81e72bdbd966af61c60097ffb9774543ba4768be4cd2cf28108ddae5252ba29709fc2293dc1e6e7c09d09c0c3c54054ff296fafbe87c70b8ebc297aef382f1064444140dc3ac19a274e41cd81e0f240ef90a65966e5aac4e769561409105d8922aba9b78839323b2b8d184626f89205b1c57f2f956897c5b1954b7a5dd97d40edb93e9563bce81edba819f9503c6737b056d160eae3cbe5a2d9b4bf5aaca6b63b706bc26388e29bf1b97034aa18a0f71a6eba5784bc60f566cfeb5c510cc8ac7592681cb7580e4cdf19c6a6b734eefd8cf3aa3d5ea151d097333c1a3ec21cbd659cebff1353b52c1d7728bdf55ad969ecb6bce9292e890c3cf4664d7d6fb9e8b44155d01dfce98a203b5f13378950686c374c7ef7bbddcb80e76d8ba59b44c08f967210e354d69af9f68c639d354cea163571b2d293bd673bc6350459773a8accfd89cbef388e23a5fd2ac1fe9014ae2fb7805520d3f189ca17ce9295523db80753917fc73f314a16092673fd790ac3d9ffcac4bbd2530375fa40a7db4edb056fa1ec7b4447fb05441fc6c0db6bd12471267a544d27f1844cafa0e85c94d04c9e40e7dfabd33a632cae6a9345d6f5aaca8b04ac6aa64c22b45dbf26e21fd0298c837bcd4f8df05205e4784788db35d0b9237ba0e4df8a74b8a678ad6e3f6b5bbf49dcdcc51fd9d3b29af89171c65a432cc9f826256b54164da08c19172a1aea073b11e3055e27e8a6ec78afa361c8fec0d92ac9675d278691448f8c3d5609cb96dcc0c02811214a5624826c93f1102e812382f2ac5f409274267a587afc3357c8857d530f602a8c12b57e32cdacf1a64959d0ad4fec1283ccfa2869f7e832c525985f81b44ecb5d6f748558b5d52c79c9c3421e04fc0b1dcf22154393c8dad7046ea55ad5c5d51c3a74e87a84be214e15d88fa01e0c1bb001e32524b72798f422fc35370ea28b7b90991cacc8b81358f068471f075da52c98af5fdb752e00b88220f2dea43ec6f006456ec777799eddc612a95a8c884714e5329839c87cf89118124906595e4e4f5f2cd9b05f723d0aed6ff2d4428229d61ecf8c7dff67f49b6707f99e804323218e910e61fd10bff33c965457470da0e04c017a737f4ee72ea529dcc3e0e4a44064fe0dd786889cdfdc5651049b3dbf7afeb5b0c8897736599b5fc34fef3612c8521f9039d8f560dd0088ee77e72205b2bc9a672bc344fc79b6b0121797eb5f05635a0a0bf33b75a61dbe6f8c47458e216c46c4d2ba81299749c426fd04a7b45bd8401f08cdd882ce2bd89325dd47768e48d6e95d716a968a7d950b6e194adaa17c88c7dfdb4066c03ace1207e68ee1e353de1dcb94e1e92961cec159cdb45409f1735f05f7dfe7052b2ed5fad889c357ef3f6f73c59b0be699466681ba4edfbd80282d32f3781047a0777b4e24be7122ea9c7b79cd5775d8135f9f98ed991945b4d64c55c3e102e6fbf173a22c48b07de2fb829fd7420e0c576c3de8efac1186549c69ce47752afef55176299ce5510da10a9ce7192d90be0ce75d8a5729f2e67f8b65dcfd2b10ad1c5760138bca759774b087ce7b46434ef1a0185cd1b00cb651a914cef9d869e5be66b56b46d02f7df94d9d52b02854227bef6a6eec4f7680b5c9699bd321140cc69a44371b59b794b97f5a911e85b50e866ef865daa1d26cc0caad5039f90fb3e268b38cebff03f373185ffbdb1b2bb81c5950f7fbea44324f5405ce89fb922534b764374f125852ad0b1cd2a5138445d0134d447310bb80914f324786148be4e5d242d54a353b9965e3ba5dce3d1a6a7908402cc619ac48e752e27e66ff188a68a6e29aa047bd000d2e481b24ad31c9515e34f8fddca78c04076d0ab41c8342fcfa285c622edc564e882b0acfbcdc84b33341db96d42da3a7b47b54f1dfbb6f37ca0e138a487084e6a80cbbc51d4ee137f8d36b0c55ea662c3d372308da71c1cf92e7ef9c90745a67ccc35cf9be1ec49f05f574a26f31c8ab3ef6450b5c516bae3db9b237fb61fb78b031e70abf1bd6b0a918d418c80d42cb70434325da7ec59bea7bd1f43f880953428453dfd7e8e5dc9e92171a73ea00e5d065679792c9964ae20825ac3c09624d8b89b557647b8880ce0ade0482ada5cbd8381e0882820b0845a2d5ced3102219bf8a04c056e26fb7dc8bc5f32dfc9be202381f061a444c5f47cd521ea836851be9ffea4b6c605fa1e291265728d7336f6058e6b2aae0ebadbdc9e46674f56d0f9c5b09e1fc7c76d35101424bdf2fda8c79c2c4f5803ae076cd3f1827296624d04cfc0be4cba8e1575c6dd905f44d58565cc89d03449a3b5ebda01c7bf1c238771f2bdf9d0709ed72b698a0c7bbf9af47a061b6c6a45ac6b04914ec074205b03b795d39597b1c105c212d7f1e46f5b9cce37315cb542ff6d54aa8c35981ee6b247662d739befbaad004148b42702bc1bc7b4f480b7814473f2db293f746f6e2ba8bf6d8e9a488cc9c27ab9d257aa831b3c6b1a553c60315e88cf598727a6d8df8ce37c7eaee75a453ebb552c51031dfbc8c00c5a170774b394f6a7e0737481a36de2892fd03fe439dad67da1faa0a52b3fc3a881ace183c69ee77c64a1927a4fa2cf376f11daf074123cd7781ea5964bcc77e1a3b9517f2b11ad84e9584a3e989ffe3a05ec780ba2d971f518d68e1356c576f820265cd0183a0e4b0a21c2db707923b75f040722f55572cafeabe477ac84e84bf2feccd67cb995ec6b2786e9af3aa2c96cf524e26f22cd6211a2c020cd8bb1e6dd10f53ed2f68497f81ba034d6d6fd956fd45fb90be9f3e2a8f27ebaadffb96c8fb1581c64509afd222db461ec3daefefe2c6677f0b6f93ba6fcc9a3cec607f3d15a6adb65f217fc4023ebf2595116d42f6d37058bc0ae8aee42e264a329510aa9228b52ec9cbb73056ff9698adb820b9d3a81eab24e734eeed65b39017d21afc99c2ec76cf6f805bbca508a595c1d67ba699a561dfe88c388861925da73f136d645a526cc6744b8b3e87699e0ec7e85f157f70fa3784a864d1e5070e38de0564d11c9b2ac033988940821b2a41f22831327324d843e08805d1d2266f522f21d9a8084367dbca592be6fe8f369bc6aedc4592b017c29728872f3eed1cafef0140ad4181e904a9cd1c72937682fbdc159283b2b373dd23b42c8b88c098333dc6bf2bb0a678e102951cef8ec8c56cfeac5f720c46ca778a296c2b0c81ca9f48dd3dc133d68caaea89628ce415560cbeb01a43275dc1b5796b534ce651f1be6420c9f5571945cc89edba0718b5a44b3116eac5693f15d2a97dbc7b33989cf2fb8f60378ae7464cfa47e42393ff75fad773ba0b23618ebec082a1c50f1d043b66a58642ba3f2a4b62b332823d32bcc6784acd5007aef3eaec235c086736a2a59175944ab0e23ceee181efa6647a377f9c0f434cfcc34b1a848294d5363f8b569daa137c681ea4686bec69cdf3d873e38c820c04095f41592f3b73ddb7ad7ba5c1b7f10f8ffe34547149cf3bb37cf2f47fb84e4adb589cd192de735fd875e8c765e308215bf513578ac5253721fae29a3a48f48a0fc912f046532d8926f5ba4cd9ab47474266468e970652094bf46875de0356de1bf2e230471cd599b2bb483cd1e529461c825025b722c72dd8a1672d79a69405bf4f96b8eee3c8db9bb2040d91614dd664baf6141f562a01624727b85c29de9efe290062e2ff511af5fe729c1d42c8684a133e3dc5fd93f279cc9de9b18e09a87aea8cb0f73c5ac2b3e2ad8c76b4001cc304f991319943fba46c8f02a012dd54385861a19aa66366788631ab6047befea99dfa9889b8ee867603604cb3ad2e970e700f4caded8ee5c169484acb8db6ff1a808b5beaf1f39783b83077739ca97481a385ae2db51c8dbfd70295d6ae44836fb05ba4c15ef636f13d081e109751e3d5993871748711970ebbe533be0a770b40569386b45fdd2707652d5dcee9b57f82855705c190ea93a415eee0722783499a1094c3579e1a502a32d18ad5dd364efda92344c6872ae8970b4bd7325a32829800f18cb4182eab3b70b89a04e0025114d7c622c4e400850a836887fd79bb35d662d7b98b0ea7d694c4324e0c20d0b21ed9bae412c8cac1000001372a8f747974b98bf598f5567273177e42340b3b47b12f464b2c34a8af61967bc789ed9be7d2bc3bc6efd36254363cb60095039f7decee5695e4d3b2e10b4cbcec20d0b5be6d50743f046c4303cc7c8ff1b3f351ef425d75a3ad0ba32fd7ab5f6dad0bcbb8cf4d38a384af85a24725797a8766d7cfdcfaeebf2286d17c7617e713417b886fba855703463a6ebcd555edf87a1a867106aa97e562ca54681a0b6982763ebf316f3c1138efdb6c3f1566a08505f439c57c73041679622d01f06c75bb83c4f80d9b8c24169c8fb05e7077af247ec7e21538f8530eabde03c46a6d8f44cd63f11e9638bba12b3699e2d672fae9485b44062bcc3b7d9071eeea498f7f353dc0a9d179eaa506b71dc6b82a7922a2bd58a43830018c7abd70307618ee0a635080f64f3ed268af17d397d47e6d3aa969e1683f2cb5d0ae48f9af0b282401da490a8ecd48f351e717ea3eb5c2081e98e2bd562b8afcc11875bae910be42243163185978a1f6105a90ca256f2c1c976875de51b51392c87f71522b94d077aab1d36af2c6e8d784f8dcc323a69f8d78724ee5403964ffef7f4d8e5131ed65d74026e738a011d8c4b9e6f20addeef2a1ecea803529ec1d2b73757248316fee8a4904932d8b3dc8f15ac8a528a339c8623a829eda025cb391f0e70681d2a268f0f340bbeac599847d431558ece8597db7cb548cc3949969f3048284cbfa24d14a3c157c265ba515cf1b6a30fc9cdb7ff4cdd50ab816d4366a0c264893fa36364a156a1060a570b4eba936be12843d1f8e7badc81676786312766d8715a8c97b8862964f7eed45e485982532d545c47b10b10b16d907897766b2e194a957d90a8541ae1753cb5961f82228c068532277202e1b4d04b5e004dd02213db305db10354924c6cddaa99f7fcb58c121d2bc7a7505baa71c040396cf52242e495201db7bf5d86374aa373571b8733adcfaf04c75941db78bef6ebe21cb3c963055f9c3989cb564e789905076e56f4212334d4bde296e294303140a5532595a0666a18a6e4cfda681a6ee11b089eb97c873837380639b62c2cfcfaea4d7224aed9c38dad3fb20f70e09297aed323b17a590ebfa6a943e0750b9e3dcd7e88bfed954bb3a993438aea399292fad82ff8ff9e3e1c888a670cf82b42c08631471a86a15af923529ddb9e06a2b6fa9fb820cb75f8b9ef0b20641ccf982746277ae1364b55db8aae605747be3c6b120d79836be860b72464bb2e2a9e15d491a5954fa060851e267c26312fa3ee07fb3db15415153fd73aaa584aee5c6abe1881be15ee1b23d5a729553235b093d0a98071ab054e7181e5b9003c776e2a2c8b5032b85ddfe809ca82bffceee6750f0fe7db6ee427ba2910df632737d3cfb0d7abbd4c5001418e6f26459d53ae4f48bb97011748ae5bbf81c172f01d0db647d647e9987198324273baeff59eb774786de181ba7e0e5caea57fc89ffe5d4326d2a6128db400ba635fd62120fc0796eaad0eaede11d4c29c972904d300eb3a3afc5d60a96980e3fa95944f54ecc24617152fecde58219619f25ca80d610beab66c9a853c470998f6af636849932e71e0d532ede9ba6627aa8b1267c1d96a89180e74b7ed728e671c038743984a2510663e241f5e07c47d1c8802247c0d11824cb06bae1d488c2b3a0f5a100d42af00253c87012127096b1715346b8bbc8e04e069b2778eedd95ddd2b4639aa704f85fc75c64dae129ec95cde0497144fa5096e670bc862c891a05e495ff7c1dbcfb8aa201fff0ca69f35da85ef7e4179a49fb1da8fb48828a5e4bfb46b45f91da8aa7c964707a750bdce9b74407fcd71c90714fe3bd5040db0e0dfe91826b448114a6c52aa61d2f480007997627a2bff7c99b07dcb4a548b1f0e50bf86a92e5c742013933208a1a9bdcd751abac7015a749b84d8f40d1c25b48fe06a255cdc3baf3eba39236194aba353c110199ddf07774fede84cdd6c6119704d53dcfd89903a95526f3cef0cfd004179e04525f1629fb825f4507ee08fa77a2a7991fdc80c75a93ae70049b8360619cbc01215ce77b91eeecdf72121e7bb403557a03a98afaf0ae37597fc81de3e9d25b846e589e4f3f2710d4e73e6fca7d9f743538b7220c39946bdc4d4d6e22dd2474ff87fc9436f137047c16e6e4a46e962fe43c24c6302592e0f411fa0394e55bb3879cf6e25733d3dd5421f5489eb9ce7f5c8422b264d52ec734576a4a18480b0144c2c258f1ed85e7f020aad37e07f3c21d51cdc66e559d2cfbe0278d8f2f9ae227f183ec7ea4a2cb13da4705ba46d7376367a51d389a6eb5d1c9cca1b7b4f3a181ecabcd58f781c0d9cee8347f452271111748e07ee0a714235cf1a80b6d829c465d33979f23df92247de452aa5e0ff43a0bc091e9410af1876d7a2e857ca94cf355a6e21c39af47a6f73d5917903c7deebcf18cd36a7aee962c7c3395a8b4683b0c8856510293e3aede5fb6e27ccde2d860b3699514aaafa6928be7fe9f6b3fdb5a6a3f3f208aa8d3e01700568b13477f8b245b3fba9395e963dd2edbf012258058468c3ee38dc1cd729356fce0dda3189116af0ec1206a3989ef01deee2300724cc3f3215012ff377a56d672d1683a008a56e9fb612c752edd684dec707017e7f2665ef80feb7d46428feed50be1523ae247a55df52ce98cf56f7ca13a49a163237de47b2c8d24daf8575b56518042aa02dc19a90ff5d2019613ab8050b8e38e3550b12aa3acf1090a176e6a49ecd846f3c6e7bb6f1bfc1e621ce0f152dc8252debb7837b59a46afa91279260bd1ffe8f1adcf3c33eb65574e4b98e8c4539e1ca5f6daaa6e7422cceba969c0a7cbf38b73baf114ae8f003580ad9e6417a08d2575ede2cb83d33f437a663c39690039a10b89ebc124fb192d1631d098068e794bf1cd516fb47cc14f911a989dbc0240c463827975eedf5d8a1ada100cf1d24e4654ee96d7cffa21b5cfbd01299ff65ca7dd4d1301348b19d838b2acb9431071f7b77ab9f98f2c1d4e5a38b6238e8b3df2c461b4dea51fee768fbd9ad721a873d1a2b214d45dd20eae698b4776b46b9c2e1e2f571a12e749d51a29d5b244ff2bf8bff71a5cae47c8d6183daa9b7e797f5a0dfd9f2f7f918a1fb23673534bcce708b1c145820d1caff8f69b33d94ad5c56a97603c1b49c946c07b9fbdd414898de9c7da2a4aa4a282e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>408</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>408</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络复习</title>
    <link href="/2024/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
    <url>/2024/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f63c9b57a65e064605c133397e088e4d2b5d7798897f494e1e51d39f271676f5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>408</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>408</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习知识点汇总</title>
    <link href="/2024/04/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <url>/2024/04/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习知识点汇总"><a href="#深度学习知识点汇总" class="headerlink" title="深度学习知识点汇总"></a>深度学习知识点汇总</h1><p><a href="https://www.cnblogs.com/think90/p/7080251.html">深度学习的57个专业术语</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><br><span class="hljs-comment"># 定义模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.fc1 = nn.Linear(input_size, hidden_units)<br>        self.dropout = nn.Dropout(dropout_rate)<br>        self.fc2 = nn.Linear(hidden_units, num_classes)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = torch.relu(self.fc1(x))<br>        x = self.dropout(x)<br>        x = self.fc2(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-comment"># 创建模型实例</span><br>model = Net()<br><br><span class="hljs-comment"># 定义损失函数和优化器</span><br>criterion = nn.CrossEntropyLoss()<br>optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 训练模型</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> i, (images, labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader):<br>        images = images.reshape(-<span class="hljs-number">1</span>, input_size)<br>        <br>        <span class="hljs-comment"># 前向传播</span><br>        outputs = model(images)<br>        loss = criterion(outputs, labels)<br>        <br>        <span class="hljs-comment"># 反向传播和优化</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br>        <br>        <span class="hljs-comment"># 打印训练信息</span><br>        <span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>) % display_step == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch [&#123;&#125;/&#123;&#125;], Step [&#123;&#125;/&#123;&#125;], Loss: &#123;:.4f&#125;&#x27;</span><br>                  .<span class="hljs-built_in">format</span>(epoch+<span class="hljs-number">1</span>, num_epochs, i+<span class="hljs-number">1</span>, total_steps, loss.item()))<br><br><span class="hljs-comment"># 在测试集上评估模型</span><br><span class="hljs-keyword">with</span> torch.no_grad():<br>    correct = <span class="hljs-number">0</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> images, labels <span class="hljs-keyword">in</span> test_loader:<br>        images = images.reshape(-<span class="hljs-number">1</span>, input_size)<br>        outputs = model(images)<br>        _, predicted = torch.<span class="hljs-built_in">max</span>(outputs.data, <span class="hljs-number">1</span>)<br>        total += labels.size(<span class="hljs-number">0</span>)<br>        correct += (predicted == labels).<span class="hljs-built_in">sum</span>()<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test Accuracy: &#123;&#125;%&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">100</span> * correct / total))<br></code></pre></td></tr></table></figure><h1 id="12-1"><a href="#12-1" class="headerlink" title="12.1"></a>12.1</h1><h2 id="过拟合和欠拟合（Overfitting-and-underfitting）"><a href="#过拟合和欠拟合（Overfitting-and-underfitting）" class="headerlink" title="过拟合和欠拟合（Overfitting and underfitting）"></a>过拟合和欠拟合（Overfitting and underfitting）</h2><p>过拟合和欠拟合是导致模型泛化能力不高的两种常见原因，都是模型学习能力与数据复杂度之间失配的结果。<br><strong>“欠拟合”</strong>常常在模型学习能力较弱，而数据复杂度较高的情况出现，此时模型由于学习能力不足，无法学习到数据集中的“一般规律”，因而导致泛化能力弱。<br><strong>“过拟合”</strong>常常在模型学习能力过强的情况中出现，此时的模型学习能力太强，以至于将训练集单个样本自身的特点都能捕捉到，并将其认为是“一般规律”，同样这种情况也会导致模型泛化能力下降。</p><h3 id="Overfitting"><a href="#Overfitting" class="headerlink" title="Overfitting"></a>Overfitting</h3><p>过拟合（over-fitting）也称为过学习，它的直观表现是算法在训练集上表现好，但在测试集上表现不好，泛化性能差<br><strong>cause</strong></p><blockquote><ul><li>训练集的数据太少或者缺乏代表性；</li><li>训练集样本存在的噪音干扰过大，导致模型拟合了噪音的特征，反而忽略了真实的输入输出间的关系；</li><li>参数太多，模型复杂度过高；</li></ul></blockquote><p><strong>method</strong></p><p>1.增加数据量  </p><ul><li>从数据源头获取更多数据；</li><li>通过数据增强对数据进行扩充：对图像进行翻转、裁剪、缩放、平移、添加噪声等。</li></ul><p>2.正则化<br>在进行目标函数或代价函数（损失函数）优化时，在函数后面加上一个正则项，一般有L1正则、L2正则等。</p><blockquote><ul><li><strong>L1正则化：</strong> L1正则化是通过在目标函数中加入L1范数惩罚项来实现的。<strong>L1范数是指权重向量W中的各个元素绝对值之和</strong>，因此L1正则化的目的是使模型参数尽可能地稀疏。L1正则化可以促使模型参数向零值收缩，进而减少特征的数量。</li><li><strong>L2正则化：</strong> L2正则化是通过在目标函数中加入L2范数惩罚项来实现的。<strong>L2范数是指权重向量W中的各个元素的平方和开根号</strong>，因此L2正则化的目的是通过约束模型参数的平方和，使得它们的值不会过大。L2正则化可以帮助避免模型的权值过拟合，并使得模型更具有鲁棒性和泛化能力。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加L2正则化项</span><br>l2_reg = torch.tensor(<span class="hljs-number">0.</span>) <span class="hljs-comment"># 创建一个初始值为零的 torch.Tensor 对象，用于累加模型参数的 L2 范数。</span><br><span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> model.parameters():<br>    l2_reg += torch.norm(param, <span class="hljs-number">2</span>)<br>loss += l2_penalty * l2_reg <span class="hljs-comment">#  L2 正则化的惩罚系数（penalty coefficient），用于控制正则化的强度。它是一个超参数，需要根据具体问题进行调整(交叉验证)。</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>区别：</strong> L1正则化减少的是一个常量，L2正则化减少的是权重的固定比例；使用L1可以得到稀疏的权值，使用L2可以得到平滑的权值；实践中L2正则化通常优于L1正则化。</p></blockquote><p>3.Dropout<br>Dropout 是一种常用的正则化技术，用于减少深度神经网络的过拟合现象。Dropout 在训练过程中随机地丢弃一部分神经元的输出，从而强制模型去学习其他特征的表示。</p><blockquote><p><code>self.dropout = nn.Dropout(dropout_rate)</code></p></blockquote><p>具体来说，Dropout 在前向传播的过程中，以一定的概率 p（通常设置为0.5）将某个神经元的输出设为0，即丢弃该神经元。这样做的结果是，每个神经元在训练过程中都有一定概率暂时被“关闭”，从而迫使网络去考虑其他神经元的贡献，减少了对特定神经元的依赖性。同时，在前向传播过程中，通过保留每个神经元输出的比例，可以确保网络的总体期望值不变。</p><h1 id="12-2"><a href="#12-2" class="headerlink" title="12.2"></a>12.2</h1><h2 id="Triplet-Loss-和-Center-Loss"><a href="#Triplet-Loss-和-Center-Loss" class="headerlink" title="Triplet Loss 和 Center Loss"></a>Triplet Loss 和 Center Loss</h2><blockquote><p><code>https://blog.csdn.net/weixin_40671425/article/details/98068190</code></p></blockquote><h1 id="12-2-1"><a href="#12-2-1" class="headerlink" title="12.2"></a>12.2</h1><blockquote><p><code>https://zhuanlan.zhihu.com/p/438085414</code></p></blockquote><h1 id="tensor"><a href="#tensor" class="headerlink" title="tensor"></a>tensor</h1><p>Tensor（张量）是一个多维数组，它是深度学习中最基本的数据结构之一，也是基于计算图的深度学习框架的核心组成部分。Tensor 可以存储和表示任意维度的数据，支持各种数值和数据类型，并提供了类似于 numpy 的数据操作接口，例如加、减、乘、除、运算、矩阵乘法、转置等。在深度学习中，我们使用 Tensor 来存储训练样本和模型参数，并对它们进行线性和非线性的运算。</p><p>Tensor 的维度通常被称作“阶”，例如，阶为 0 的 Tensor 又被称作“标量”（scalar），表示一个单独的数值；阶为 1 的 Tensor 又被称作“向量”（vector），表示一列数值；阶为 2 的 Tensor 又被称作“矩阵”（matrix），表示一个二维的表格。在深度学习中，我们通常会使用阶数更高的 Tensor，例如 3 阶、4 阶或更高阶的 Tensor，以表示更复杂的数据结构，如图像、视频或音频数据等。</p><h2 id="1-张量的创建"><a href="#1-张量的创建" class="headerlink" title="1.张量的创建"></a>1.张量的创建</h2><h3 id="1-1-通过列表或者元组"><a href="#1-1-通过列表或者元组" class="headerlink" title="1.1 通过列表或者元组"></a>1.1 通过列表或者元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">t = torch([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]) / t = torch((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-comment"># tensor([1, 2])</span><br></code></pre></td></tr></table></figure><h3 id="1-2-通过numpy创建"><a href="#1-2-通过numpy创建" class="headerlink" title="1.2 通过numpy创建"></a>1.2 通过numpy创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>n = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br>t = torch.tensor(n)<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-comment"># tensor([1, 2])</span><br></code></pre></td></tr></table></figure><h3 id="1-3-tensor-type-and-convert"><a href="#1-3-tensor-type-and-convert" class="headerlink" title="1.3 tensor-type and convert"></a>1.3 tensor-type and convert</h3><p>type()不能识别出Tensor内部的数据类型，只能识别出变量的基本类型是Tensor，而dtype方法可以识别出变量具体为哪种类型的Tensor。<br>可以使用.float()、.int()等方法对张量类型进行转化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">i = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>f = torch.tensor([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(i), i.dtype, sep = <span class="hljs-string">&#x27; , &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f), f.dtype, sep = <span class="hljs-string">&#x27; , &#x27;</span>)<br><span class="hljs-comment"># &lt;class &#x27;torch.Tensor&#x27;&gt; , torch.int64</span><br><span class="hljs-comment"># &lt;class &#x27;torch.Tensor&#x27;&gt; , torch.float32</span><br><br>t = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>f = t.<span class="hljs-built_in">float</span>()<br><span class="hljs-built_in">print</span>(f)<br><span class="hljs-built_in">print</span>(t) <span class="hljs-comment"># 并不会改变原来t的数据类型</span><br><span class="hljs-comment"># tensor([1., 2.])</span><br><span class="hljs-comment"># tensor([1, 2])</span><br></code></pre></td></tr></table></figure><h2 id="tensor—shape"><a href="#tensor—shape" class="headerlink" title="tensor—shape"></a>tensor—shape</h2><p>张量的维度中，我们使用的张量如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一维向量</span><br>t1 = torch.tensor((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-comment"># 二维向量</span><br>t2 = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-comment"># 三维向量</span><br>t3 = torch.tensor([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]],[[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br><br><span class="hljs-comment"># ndim查看张量维度</span><br><span class="hljs-built_in">print</span>(t1.ndim, t2.ndim, t3.ndim, sep = <span class="hljs-string">&#x27;, &#x27;</span>)<br><span class="hljs-comment"># 1, 2, 3</span><br><span class="hljs-comment"># t1为1维向量</span><br><span class="hljs-comment"># t2为2维矩阵</span><br><span class="hljs-comment"># t3为3维张量</span><br><br><span class="hljs-comment"># shape&amp;size查看向量的形状</span><br><span class="hljs-built_in">print</span>(t1.shape, t2.shape, t3.shape, sep = <span class="hljs-string">&#x27;, &#x27;</span>)<br><span class="hljs-comment"># torch.Size([2]), torch.Size([2, 3]), torch.Size([2, 2, 2])</span><br><br><span class="hljs-built_in">print</span>(t1.size(), t2.size(), t3.size(), sep = <span class="hljs-string">&#x27;, &#x27;</span>)<br><span class="hljs-comment"># torch.Size([2]), torch.Size([2, 3]), torch.Size([2, 2, 2])</span><br><br><span class="hljs-comment"># numel查看张量中的元素个数</span><br><span class="hljs-built_in">print</span>(t1.numel(), t2.numel(), t3.numel(), sep = <span class="hljs-string">&#x27;, &#x27;</span>)<br><span class="hljs-comment"># 2, 6, 8</span><br><span class="hljs-comment"># t1向量中共有2个元素</span><br><span class="hljs-comment"># t2矩阵中共有6个元素</span><br><span class="hljs-comment"># t3张量中共有8个元素</span><br><br><span class="hljs-comment"># flatten将任意维度张量转为一维张量</span><br>t2.flatten()<br><span class="hljs-comment"># tensor([1, 2, 3, 4, 5, 6])</span><br><br>t3.flatten()<br><span class="hljs-comment"># tensor([1, 2, 3, 4, 5, 6, 7, 8])</span><br><br><br></code></pre></td></tr></table></figure><blockquote><ul><li>t1向量torch.Size([2])的理解：向量的形状是1行2列。</li><li>t2矩阵torch.Size([2, 3])的理解：二维矩阵的形状是2行3列。</li><li>t3矩阵torch.Size([2, 2, 2])的理解：包含两个二维矩阵，每个二维矩阵的形状是2行2列。</li></ul></blockquote><h3 id="reshape任意变形"><a href="#reshape任意变形" class="headerlink" title="reshape任意变形"></a>reshape任意变形</h3><p><strong>形变维度的乘积需要等于张量元素的个数。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将`t3`变成2×4的矩阵</span><br>t3.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br><span class="hljs-comment">#tensor([[1, 2, 3, 4],[5, 6, 7, 8]])</span><br><br><span class="hljs-comment"># 将`t3`变成1×4×2的矩阵</span><br>t3.reshape(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment"># tensor([[[1, 2], [3, 4], [5, 6], [7, 8]]])</span><br></code></pre></td></tr></table></figure><h3 id="squeeze-unsqueeze"><a href="#squeeze-unsqueeze" class="headerlink" title="squeeze&amp;unsqueeze"></a>squeeze&amp;unsqueeze</h3><ul><li>squeeze的作用是压缩张量，去掉维数为1位置的维度</li><li>unsqueeze的作用是解压张量，给<strong>指定位置</strong>加上维数为一的维度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将t3的维度变为2×1×4</span><br>t_214 = t3.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(t_214)<br><span class="hljs-comment"># tensor([[[1, 2, 3, 4]], [[5, 6, 7, 8]]])</span><br><br><span class="hljs-comment"># 使用squeeze将其变成2×4，去掉维度为1位置的维度</span><br>t_24 = t_214.squeeze(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(t_24)<br><span class="hljs-comment"># tensor([[1, 2, 3, 4], [5, 6, 7, 8]])</span><br><br><span class="hljs-comment"># 将2×4的维度再转换成2×1×4，在第二个维度上加一维</span><br><span class="hljs-comment"># 索引是从0开始的。参数0代表第一维，参数1代表第二维，以此类推</span><br><span class="hljs-built_in">print</span>(t_24.unsqueeze(<span class="hljs-number">1</span>))<br>tensor([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br></code></pre></td></tr></table></figure><h3 id="tensor-——-value"><a href="#tensor-——-value" class="headerlink" title="tensor ——&gt; value"></a>tensor ——&gt; value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n = torch.tensor(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(n) <span class="hljs-comment"># tensor(1)</span><br><br><span class="hljs-comment"># 使用.item()方法将张量转为python中的数值</span><br>n.item() <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h2 id="张量的索引"><a href="#张量的索引" class="headerlink" title="张量的索引"></a>张量的索引</h2><p>张量是有序序列，我们可以根据每个元素在系统内的顺序位置，来找出特定的元素，也就是索引。</p><p>一维张量索引与Python中的索引一样是是从左到右，从0开始的，遵循格式为[start: end: step]。</p><h2 id="张量的合并与分割"><a href="#张量的合并与分割" class="headerlink" title="张量的合并与分割"></a>张量的合并与分割</h2><blockquote><p>当对一个张量进行切割时，返回的是原始张量的一个视图（view）或子集，而不是创建一个新的张量。这意味着切片返回的是原始张量的一个引用，并与原始张量共享数据存储，<strong>所以在修改切片返回的张量时，会同时修改原始张量中相应的元素。</strong> 需要注意的是，如果我们希望创建一个拷贝而非共享内存的切片，可以使用 .copy() 方法，这样操作切片将不会对原始张量产生影响。</p></blockquote><h3 id="张量的分割-chunk-split"><a href="#张量的分割-chunk-split" class="headerlink" title="张量的分割 chunk &amp; split"></a>张量的分割 chunk &amp; split</h3><p>chunk(tensor, chunks, dim)能够按照某个维度(dim)对张量进行均匀切分(chunks)，并且返回结果是原张量的视图。</p><h3 id="张量的合并-cat"><a href="#张量的合并-cat" class="headerlink" title="张量的合并 cat"></a>张量的合并 cat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.zeros(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-comment"># tensor([[0., 0., 0.],</span><br><span class="hljs-comment">#         [0., 0., 0.]])</span><br><br>b = torch.ones(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-comment"># tensor([[1., 1., 1.],</span><br><span class="hljs-comment">#         [1., 1., 1.]])</span><br><br><br>因为在张量a与b中，shape的第一个位置是代表向量维度，所以当dim取<span class="hljs-number">0</span>时，就是将向量进行合并，向量中的标量数不变：<br>torch.cat([a, b], dim = <span class="hljs-number">0</span>) <br><span class="hljs-comment"># tensor([[0., 0., 0.],</span><br><span class="hljs-comment">#         [0., 0., 0.],</span><br><span class="hljs-comment">#         [1., 1., 1.],</span><br><span class="hljs-comment">#         [1., 1., 1.]])</span><br><br>当dim取<span class="hljs-number">1</span>时，shape的第二个位置是代表列，即标量数，就是在列上（标量维度）进行拼接，行数（向量数）不变：<br>torch.cat([a, b], dim = <span class="hljs-number">1</span>)<br><span class="hljs-comment"># tensor([[0., 0., 0., 1., 1., 1.],</span><br><span class="hljs-comment">##        [0., 0., 0., 1., 1., 1.]])</span><br></code></pre></td></tr></table></figure><h3 id="张量的堆叠-stack"><a href="#张量的堆叠-stack" class="headerlink" title="张量的堆叠 stack"></a>张量的堆叠 stack</h3><p>和拼接不同，堆叠不是将元素拆分重装，而是将各参与堆叠的对象分装到一个更高维度的张量里。<br>和 cat 的区别：拼接之后维度不变，堆叠之后维度升高。拼接是把一个个元素单独提取出来之后再放到二维张量里，而堆叠则是直接将两个二维向量封装到一个三维张量中。因此，堆叠的要求更高，参与堆叠的张量必须形状完全相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.zeros(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-comment"># tensor([[0., 0., 0.],</span><br><span class="hljs-comment">#         [0., 0., 0.]])</span><br><br>b = torch.ones(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-comment"># tensor([[1., 1., 1.],</span><br><span class="hljs-comment">#         [1., 1., 1.]])</span><br><br>torch.stack([a, b], dim = <span class="hljs-number">0</span>)<br><span class="hljs-comment"># tensor([[[0., 0., 0.],</span><br><span class="hljs-comment">#          [0., 0., 0.]],</span><br><span class="hljs-comment">#         [[1., 1., 1.],</span><br><span class="hljs-comment">#          [1., 1., 1.]]])</span><br><br>torch.stack([a, b], dim = <span class="hljs-number">0</span>).shape<br><span class="hljs-comment"># torch.Size([2, 2, 3])</span><br></code></pre></td></tr></table></figure><h1 id="12-3"><a href="#12-3" class="headerlink" title="12.3"></a>12.3</h1><h1 id="注意力机制"><a href="#注意力机制" class="headerlink" title="注意力机制"></a>注意力机制</h1><blockquote><p>通道注意力（Channel Attention），空间注意力（Spatial Attention），分支注意力（Branch Attention），自注意力（Self Attention）和交叉注意力（Cross Attention）</p></blockquote><h1 id="12-8"><a href="#12-8" class="headerlink" title="12.8"></a>12.8</h1><h1 id="vision-transformer"><a href="#vision-transformer" class="headerlink" title="vision transformer"></a>vision transformer</h1><h1 id="grad-cam"><a href="#grad-cam" class="headerlink" title="grad-cam"></a>grad-cam</h1><h1 id="Vit-Grad-Cam"><a href="#Vit-Grad-Cam" class="headerlink" title="Vit + Grad-Cam"></a>Vit + Grad-Cam</h1><blockquote><p><code>https://zhuanlan.zhihu.com/p/640450435</code><br>Grad-CAM 对 ViT 的输出进行可视化的原理是利用 ViT 的最后一个注意力块的输出和梯度，计算出每个 token 对分类结果的贡献度，然后将这些贡献度映射回原始图像的空间位置，形成一张热力图。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>损失函数</title>
    <link href="/2024/04/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    <url>/2024/04/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h1><p><strong>用来量化模型预测值和真实标签之间的差异</strong></p><h2 id="交叉熵损失函数"><a href="#交叉熵损失函数" class="headerlink" title="交叉熵损失函数"></a>交叉熵损失函数</h2><blockquote><p>一般用于分类任务<br>计算：比如三分类问题，一个样本标签的one-hot向量为 $y &#x3D; [0,0,1]^T$ , 模型预测的标签分布为 $[0.3,0.3,0.4]^T$ , 则它们的交叉熵为 $-(0 * log(0.3) + 0 * log(0.3) + 1 * log(0.4)) &#x3D; -log(0.4)$</p></blockquote><p>在机器学习和深度学习中，softmax 函数和交叉熵损失函数是两个常用的概念，它们通常一起使用在分类问题中。</p><h3 id="Softmax-函数"><a href="#Softmax-函数" class="headerlink" title="Softmax 函数"></a>Softmax 函数</h3><p>Softmax 函数是一种将一个向量或一组实数转换成概率分布的函数。给定一个向量 ( z )，其中 ( z ) 的每个元素 ( z_i ) 都是实数，softmax 函数定义如下：</p><p>[<br>\text{softmax}(z_i) &#x3D; \frac{e^{z_i}}{\sum_{j&#x3D;1}^{K} e^{z_j}}<br>]</p><p>其中，( K ) 是类别的数量，( e ) 是自然对数的底数。Softmax 函数的输出是一个概率分布，每个类别都有一个概率值，这些概率值的和为 1。</p><h3 id="交叉熵损失函数（Cross-Entropy-Loss）"><a href="#交叉熵损失函数（Cross-Entropy-Loss）" class="headerlink" title="交叉熵损失函数（Cross-Entropy Loss）"></a>交叉熵损失函数（Cross-Entropy Loss）</h3><p>交叉熵损失函数是衡量模型预测的概率分布与真实标签的概率分布之间的差异的一种方法。在分类问题中，如果 ( y ) 是一个 one-hot 编码的标签向量，( \hat{y} ) 是模型预测的概率分布，交叉熵损失函数定义如下：</p><p>[<br>\text{Cross-Entropy Loss} &#x3D; -\sum_{c&#x3D;1}^{K} y_{o,c} \log(\hat{y}_c)<br>]</p><p>其中，( y_{o,c} ) 是 one-hot 编码中第 ( c ) 个类别的标签值（0 或 1），( \hat{y}_c ) 是模型预测的第 ( c ) 个类别的概率。</p><h2 id="损失函数分类"><a href="#损失函数分类" class="headerlink" title="损失函数分类"></a>损失函数分类</h2><p>在机器学习中，损失函数（Loss Function）是衡量模型预测值与实际值差异的函数，用于指导模型训练过程中的参数更新。以下是一些常见的损失函数：</p><ol><li><p><strong>均方误差（Mean Squared Error, MSE）</strong>：</p><ul><li>用于回归问题，计算预测值与实际值之差的平方的平均值。</li><li>公式：[ \text{MSE} &#x3D; \frac{1}{n} \sum_{i&#x3D;1}^{n} (y_i - \hat{y}_i)^2 ]</li><li>其中，( y_i ) 是真实值，( \hat{y}_i ) 是预测值，( n ) 是样本数量。</li></ul></li><li><p><strong>交叉熵损失（Cross-Entropy Loss）</strong>：</p><ul><li>用于分类问题，特别是二分类或多分类问题。</li><li>公式：[ \text{Cross-Entropy} &#x3D; -\sum_{c&#x3D;1}^{M} y_{o,c} \log(p_{o,c}) ]</li><li>其中，( M ) 是类别数，( y_{o,c} ) 是真实标签的独热编码，( p_{o,c} ) 是模型预测为第 ( c ) 类的概率。</li></ul></li><li><p><strong>对数损失（Logarithmic Loss）</strong>：</p><ul><li>与交叉熵损失类似，常用于二分类问题。</li><li>公式：[ \text{Log Loss} &#x3D; -\frac{1}{n} \sum_{i&#x3D;1}^{n} [y_i \log(\hat{y}_i) + (1 - y_i) \log(1 - \hat{y}_i)] ]</li><li>其中，( y_i ) 是二分类的真实标签（0或1），( \hat{y}_i ) 是模型预测的概率。</li></ul></li><li><p><strong>绝对值误差（Mean Absolute Error, MAE）</strong>：</p><ul><li>用于回归问题，计算预测值与实际值之差的绝对值的平均值。</li><li>公式：[ \text{MAE} &#x3D; \frac{1}{n} \sum_{i&#x3D;1}^{n} |y_i - \hat{y}_i| ]</li></ul></li><li><p><strong>Hinge损失（Hinge Loss）</strong>：</p><ul><li>常用于支持向量机（SVM）中，用于最大化决策边界的宽度。</li><li>公式：[ \text{Hinge Loss} &#x3D; \max(0, 1 - y_i \cdot \hat{y}_i) ]</li><li>其中，( y_i ) 是真实标签，( \hat{y}_i ) 是模型的预测值。</li></ul></li><li><p><strong>平方Hinge损失（Squared Hinge Loss）</strong>：</p><ul><li>Hinge损失的变体，对较大的误差给予更大的惩罚。</li><li>公式：[ \text{Squared Hinge Loss} &#x3D; \max(0, 1 - y_i \cdot \hat{y}_i)^2 ]</li></ul></li><li><p><strong>Huber损失（Huber Loss）</strong>：</p><ul><li>结合了MSE和MAE的优点，对小误差使用平方损失，对大误差使用线性损失。</li><li>公式：[ \text{Huber Loss} &#x3D; \begin{cases}<br> \frac{1}{2} (y_i - \hat{y}_i)^2 &amp; \text{for } |y_i - \hat{y}_i| \le \delta, \<br> \delta (|y_i - \hat{y}_i| - \frac{1}{2} \delta) &amp; \text{otherwise}<br> \end{cases} ]</li><li>其中，( \delta ) 是一个超参数，控制损失函数从平方项到线性项的过渡。</li></ul></li><li><p><strong>三元损失（Triplet Loss）</strong>：</p><ul><li>常用于深度学习中的度量学习，特别是在人脸识别等任务中。</li><li>目标是使相似样本的距离比不相似样本的距离小。</li></ul></li><li><p><strong>IoU损失（Intersection over Union Loss）</strong>：</p><ul><li>用于目标检测和分割问题，衡量预测的边界框与真实边界框的重叠程度。</li></ul></li><li><p><strong>Focal损失（Focal Loss）</strong>：</p><ul><li>用于解决类别不平衡问题，特别是对于容易分类的样本减少其权重，而对难以分类的样本增加其权重。</li></ul></li></ol><p>这些损失函数各有其特点和适用场景，选择合适的损失函数可以帮助提高模型的性能和泛化能力。</p><h1 id="过-欠拟合"><a href="#过-欠拟合" class="headerlink" title="过&#x2F;欠拟合"></a>过&#x2F;欠拟合</h1><h1 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h1><p>梯度下降法就是一种<strong>通过求目标函数的导数来寻找目标函数最小化的方法</strong></p><ol><li>批量梯度下降法（BGD）在每次迭代时要计算每个样本上损失函数的梯度并求和</li><li>随机梯度下降法（SGD）为了减少每次迭代的</li></ol><h2 id="损失函数、代价函数、目标函数"><a href="#损失函数、代价函数、目标函数" class="headerlink" title="损失函数、代价函数、目标函数"></a>损失函数、代价函数、目标函数</h2><ul><li><strong>损失函数</strong> Loss Function 通常是<strong>针对单个训练样本而言</strong>，给定一个模型输出 $\hat{y}$ 和一个真实 $y$ ，损失函数输出一个实值损失 $L&#x3D;f(y_i, \hat{y_i})$</li><li><strong>代价函数</strong> Cost Function 通常是<strong>针对整个训练集</strong>（或者在使用 mini-batch gradient descent 时一个 mini-batch）的总损失 $J&#x3D;\sum_{i&#x3D;1}^{N} f(y_i,\hat{y_i})$</li><li><strong>目标函数</strong> Objective Function 是一个更通用的术语，表示任意<strong>希望被优化的函数</strong>，用于机器学习领域和非机器学习领域（比如运筹优化）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>表示学习</title>
    <link href="/2024/04/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/04/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="表示学习"><a href="#表示学习" class="headerlink" title="表示学习"></a>表示学习</h1><blockquote><p>在深度学习中，前面的层为表示学习，最后一层为预测学习</p></blockquote><ol><li><strong>自动地学习出有效的特征</strong>，并最终提高机器学习模型的性能的算法就叫做表示学习。</li><li>表示学习关键是解决语义鸿沟问题————是指输入数据的底层特征表示和高层的抽象语义特征不一致性。（对于一些不同颜色和形状的车来说，它们在像素级别的表示（底层特征表示）上相差很大，但我们认为它们都是车是建立在高层语义特征上的）</li><li>表示学习的两个核心问题：<br><strong>什么是一个好的表示</strong><br><strong>如何学习到好的表示</strong></li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="局部表示"><a href="#局部表示" class="headerlink" title="局部表示"></a>局部表示</h3><p>也叫离散表示或符号表示，通常用<strong>one-hot向量</strong>表示，假设所有颜色构成一个词表，词表长度为|V|,可以用一个v维的向量来表示特征，在第i种颜色所对应的one-hot向量中的第 i 维为1，其他维为0</p><p><strong>优点：</strong></p><ol><li>离散的表示方式具有好的解释性</li><li>这种特征表示通常是稀疏的二值向量，计算效率高</li></ol><p><strong>缺点：</strong></p><ol><li>维数高，不易扩展</li><li>不同特征之间的相似度都为0（按理来说红色与粉红色的相似度肯定比 红色和黑色高）</li></ol><h3 id="分布式表示"><a href="#分布式表示" class="headerlink" title="分布式表示"></a>分布式表示</h3><p>用RGB三个数值来表示颜色</p><p>优点：</p><ol><li>向量维度要低，更容易扩展</li><li>不同颜色的相似度也容易计算</li></ol><p><strong>嵌入</strong></p><blockquote><p>使用神经网络将高维的局部表示空间映射到一个低维的分布式表示空间，这个过程被称为嵌入</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/2024/04/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/04/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>浅层学习，不涉及特征学习，特征来源于人工提取</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p><code>Sklearn</code> python的机器学习库</p></li><li><p>鸢尾花数据集（iris dataset）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><br><span class="hljs-comment"># 加载数据集</span><br><span class="hljs-comment"># 鸢尾花数据集（iris dataset）是一个经典的机器学习数据集，其中包含了150个样本，</span><br><span class="hljs-comment"># 每个样本有四个特征：花萼长度、花萼宽度、花瓣长度、花瓣宽度。</span><br><span class="hljs-comment"># 这些样本被分为三个类别：山鸢尾（setosa）、变色鸢尾（versicolor）和维吉尼亚鸢尾（virginica）。</span><br><span class="hljs-comment"># 鸢尾花数据集通常被用来进行分类问题的训练和评估，是机器学习领域常用的基准数据集之一。您可以使用sklearn库中的datasets.load_iris()函数加载这个数据集。</span><br>iris = datasets.load_iris()<br>X = iris.data<br>y = iris.target<br><span class="hljs-built_in">print</span>(X)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-comment"># 划分训练集和测试集</span><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><br><span class="hljs-comment"># 创建线性分类器模型</span><br>model = LogisticRegression(max_iter=<span class="hljs-number">1</span>) <span class="hljs-comment"># 迭代次数</span><br><br><span class="hljs-comment"># 拟合模型</span><br>model.fit(X_train, y_train)<br><br><span class="hljs-comment"># 预测</span><br>y_pred = model.predict(X_test)<br><br><span class="hljs-comment"># 评估性能</span><br>accuracy = accuracy_score(y_test, y_pred)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Accuracy: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(accuracy))<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li><strong>数据预处理</strong>（去掉一些有缺失特征的样本；去掉一些冗余的数据特征；对数值特征进行缩放和归一化；）</li><li><strong>特征提取：</strong>从数据的原始特征中提取一些对特定机器学习任务有用的高质量特征（比如在图像分类中提取边缘）</li><li><strong>特征转换：</strong>对特征进行进一步的加工，比如降维和升维，降维包括特征抽取和特征选择。常用特征转换方法有主成分分析（PCA）和线性判别（LDA）</li><li><strong>预测：</strong>学习一个函数并进行预测</li></ol><h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><blockquote><p>线性模型是机器学习中应用最广泛的模型，指通过样本特征的线性组合来进行预测的模型，给定一个D维样本 $x &#x3D; [x_1,…,x_D]^T$ , 其<strong>线性组合(判别)函数</strong>为 </p></blockquote><p>$$<br>f(x;w) &#x3D; w_1x_1 + w_2x_2 + … + w_Dx_D + b<br>       &#x3D; w^Tx + b<br>$$</p><p>其中 $w &#x3D; [w_1,…,w_D]$ 为 D维的权重向量，b为偏置<br>对于分类问题，要在线性组合函数的基础上引入<strong>非线性的决策函数</strong> $g()$ 来预测输出目标<br>$$<br>y &#x3D; g(f(x;w))<br>$$</p><ol><li><p><strong>一个 线性分类模型 主要由 一个或多个线性的判别函数 和 非线性的决策函数 组成</strong></p></li><li><p>接下来介绍四种不同的线性分类模型（线性分类器）：Logistic回归、Softmax回归、感知机、支持向量机。主要区别在于<strong>使用了不同的损失函数</strong></p></li></ol><p><strong>训练数据集是线性可分</strong></p><p>当说训练数据集是线性可分的时，意味着在数据集中存在一个能够清晰划分两个或多个类别的线性决策边界。<br>换句话说，存在一个线性函数或平面，可以将不同类别的样本有效地分开。这意味着在特征空间中，不同类别的样本在一定程度上能够被一条直线、平面或超平面等线性边界分开。</p><p>如果训练数据集是线性可分的，则意味着使用线性分类器（例如线性回归、逻辑回归、支持向量机等）能够很好地对数据进行分类或预测<br>如果数据集不是线性可分的，就需要使用更复杂的模型或非线性技术来处理数据。</p><h2 id="机器学习算法"><a href="#机器学习算法" class="headerlink" title="机器学习算法"></a>机器学习算法</h2><p>机器学习算法分类：监督学习、无监督学习、强化学习<br><strong>监督学习算法</strong> (Supervised Algorithms) 在监督学习训练过程中，可以由训练数据集学到或建立一个模式（函数 &#x2F; learning model），并依此模式推测新的实例。该算法要求特定的输入&#x2F;输出，首先需要决定使用哪种数据作为范例。例如，文字识别应用中一个手写的字符，或一行手写文字。主要算法包括神经网络、支持向量机、最近邻居法、朴素贝叶斯法、决策树等。</p><p><strong>无监督学习算法</strong> (Unsupervised Algorithms) 这类算法没有特定的目标输出，算法将数据集分为不同的组。</p><p><strong>强化学习算法</strong> (Reinforcement Algorithms) 强化学习普适性强，主要基于决策进行训练，算法根据输出结果（决策）的成功或错误来训练自己，通过大量经验训练优化后的算法将能够给出较好的预测。类似有机体在环境给予的奖励或惩罚的刺激下，逐步形成对刺激的预期，产生能获得最大利益的习惯性行为。在运筹学和控制论的语境下，强化学习被称作“近似动态规划”</p><p>基本的机器学习算法：线性回归、支持向量机(SVM)、最近邻居(KNN)、逻辑回归、决策树、k平均、随机森林、朴素贝叶斯、降维、梯度增强</p><ol><li><p>分类：K近邻、决策树、随机森林、朴素贝叶斯、GBDT、支持向量机等；</p></li><li><p>聚类：k均值聚类算法(K-Means)、基于密度聚类(DBSCAN)等；</p></li><li><p>回归：逻辑回归、线性回归；</p></li><li><p>降维：主成分分析算法(PCA)、LDA、局部线性嵌入(LLE)等</p></li></ol><h3 id="线性回归（Linear-Regression）"><a href="#线性回归（Linear-Regression）" class="headerlink" title="线性回归（Linear Regression）"></a>线性回归（Linear Regression）</h3><p><strong>什么是回归问题</strong></p><p>线性回归算法（Linear Regression）的建模过程就是使用数据点来寻找最佳拟合线</p><ol><li>多元线性回归<br>多元线性回归是回归分析中的一种复杂模型，它考虑了多个输入变量对输出变量的影响。与一元线性回归不同，多元线性回归通过引入多个因素，更全面地建模了系统关系。</li></ol><p>多元线性回归模型的表达式为：$f ( x ) &#x3D;\mathbf{k^T}\mathbf{x}+b$<br>其中，$\mathbf{x}$为输入向量，包含多个特征（自变量）；$f(\mathbf{x})$为模型的输出或响应（预测的目标变量）；$\mathbf{k^T}$ 为特征权重；$b$为是模型的截距或偏置；我们的目标是通过学习$\mathbf{k^T}$ 和 $b$ 使得 $f(\mathbf{x})$ 尽可能的接近真实观测值 $\mathbf{y}$</p><p><img src="/../../img/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.png"></p><p>直白点说：首先求出当前模型的 所有采样点上的预测值𝑤𝑥(𝑖) +𝑏与真实值𝑦(𝑖)之间的差的平方和作为总误差ℒ，然后搜索一组参数𝑤∗,𝑏∗使得ℒ最小，对应的直线就是我们要寻找的最优直线</p><ol start="2"><li>实现方式</li></ol><p><strong>全局梯度下降</strong><br>梯度下降法是一种迭代算法。选取适当的初值x(0)，不断迭代，更新x的值，进行<strong>目标函数(也是线性回归的损失函数)的极小化</strong>，直到收敛。（它从一个初始点开始，反复使用某种规则从移动到下一个点，构造这样一个数列，直到<strong>收敛到梯度为0的点处</strong>，即梯度下降算法）</p><p>由于负梯度方向时使函数值下降最快的方向，在迭代的每一步，<strong>以负梯度方向更新x的值</strong>，从而达到减少函数值的目的</p><p>线性回归一般选择的是MSE（均方误差）<br><strong>均方误差</strong>是预测值与真实值之间差值的平方的平均值</p><p><strong>学习率在梯度下降法中的作用</strong><br>我们可以通过 𝜼 来控制每一步走的距离</p><ol><li>以保证不要走的太快，错过了最低点</li><li>同时也要保证收敛速度不要太慢</li></ol><h3 id="逻辑回归（Logistic-regression）"><a href="#逻辑回归（Logistic-regression）" class="headerlink" title="逻辑回归（Logistic regression）"></a>逻辑回归（Logistic regression）</h3><p><strong>逻辑回归和线性回归区别：</strong></p><p>逻辑回归：</p><ol><li>逻辑回归是一种用于分类问题的模型，而不是回归问题。它用于预测二元分类或多元分类的概率。</li><li>损失函数通常是对数损失函数（log loss），也称为交叉熵损失函数（cross-entropy loss）。</li><li>目标是最大化似然函数或最小化损失函数，通常通过梯度下降等方法实现。</li><li>相比较线性回归的连续值直接求解，在逻辑回归中，还需要<strong>使用Sigmoid函数将回归方程映射成概率进行分类</strong></li><li><strong>它通过使用逻辑函数（如Sigmoid函数）将线性回归的输出值映射到0和1之间，从而表示概率。</strong></li></ol><p><img src="/../../img/sigmid.png"></p><p>线性回归：</p><ol><li>线性回归用于预测连续型变量的值，是一种回归模型。</li><li>损失函数通常是均方误差（Mean Squared Error，MSE）。</li><li>目标是最小化损失函数，通过梯度下降等方法实现。</li></ol><h3 id="KNN算法（最近邻居-k-近邻算法，K-Nearest-Neighbors）"><a href="#KNN算法（最近邻居-k-近邻算法，K-Nearest-Neighbors）" class="headerlink" title="KNN算法（最近邻居&#x2F;k-近邻算法，K-Nearest Neighbors）"></a>KNN算法（最近邻居&#x2F;k-近邻算法，K-Nearest Neighbors）</h3><p>口诀：近朱者赤，近墨者黑</p><p><img src="/../../img/KNN.png"></p><p>KNN算法是一种基于实例的学习，或者是局部近似和将所有计算推迟到分类之后的惰性学习。KNN主要用于<strong>分类</strong>问题</p><p>用最近的邻居（k）来预测未知数据点。k 值是预测精度的一个关键因素，无论是分类还是回归，衡量邻居的权重都非常有用，较近邻居的权重比较远邻居的权重大</p><p>ex. 假设k &#x3D; 5，代表用周围5个点来估计未知数据点的类别，这5个点中比例最高的类别即为该预测类别</p><ol><li><p>需要想办法来计算两个样本之间的距离或者相似度，之后才能选出最相近的样本。<strong>欧氏距离</strong>是一个最简单常用的方法</p></li><li><p>怎么确定K值<br>确定KNN算法的K值通常需要通过<strong>交叉验证</strong></p></li></ol><ul><li>将数据集分成K份（通常K取5或10），每次选择其中一份作为验证集，剩下的K-1份作为训练集。</li><li>对于每个K值，重复K次交叉验证，计算模型在验证集上的性能指标（如准确率、F1分数等）的平均值。</li><li>根据性能指标的表现选择最优的K值。</li></ul><h3 id="决策树（Decision-Tress）"><a href="#决策树（Decision-Tress）" class="headerlink" title="决策树（Decision Tress）"></a>决策树（Decision Tress）</h3><ol><li>决策树（Decision tree）是一种特殊的树结构，由一个决策图和可能的结果（例如成本和风险）组成，用来辅助决策。</li><li>机器学习中，<strong>决策树是一个预测模型，树中每个节点表示某个对象，而每个分叉路径则代表某个可能的属性值，而每个叶节点(也是类别)则对应从根节点到该叶节点所经历的路径所表示的对象的值</strong>。</li><li>决策树仅有单一输出，通常该算法用于解决<strong>分类</strong>问题。</li></ol><p><img src="/../../img/%E5%86%B3%E7%AD%96%E6%A0%91.png"></p><p><strong>决策树节点的划分</strong><br>熵：代表一个系统的混乱程度，越混乱熵越高</p><p>划分依据：<strong>最大化信息增益（熵）</strong><br>比较多个特征的信息增益，选择信息增益最大的特征作为根节点进行划分。然后，重复这个过程，对每个子节点进行划分，直到满足停止条件（如节点包含的样本数小于预定义阈值）为止</p><p>信息增益的计算步骤：</p><ol><li>计算每个类别的信息熵</li><li>求离散的特征属性值 a 对数据集 D 的条件信息熵</li><li>计算信息增益</li></ol><p><img src="/../../img/%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A.png"></p><h3 id="k-平均算法（K-Means）"><a href="#k-平均算法（K-Means）" class="headerlink" title="k-平均算法（K-Means）"></a>k-平均算法（K-Means）</h3><p>口诀：物以类聚，人以群分</p><p><img src="/../../img/K-Means.png"></p><p>k-平均算法(K-Means)是一种<strong>无监督学习算法</strong>，为<strong>聚类问题</strong>提供了一种解决方案。<br>K-Means 算法把 n 个点（可以是样本的一次观察或一个实例）划分到 k 个集群（cluster），使得每个点都属于离他最近的均值（即聚类中心，centroid）对应的集群。重复上述过程一直持续到重心不改变。</p><p>计算过程如下：</p><ol><li><p>分配阶段：对每个数据点，计算其与每个类中心的距离，然后将其分配到距离最近的类中心所对应的类里。</p></li><li><p>更新阶段：对于每个类，根据该类中所有数据点的均值计算新的类中心。假设某个类包含的数据点集合为 𝑆, 其中包含 𝑛 个数据点，则该类的新的类中心 $𝐶_𝑗$ 可以通过以下公式计算得到, $𝑥_𝑖$ 是数据点集合 $S$ 中的第 $i$ 个数据点到类中心的距离</p></li></ol><p>$$<br>[ C_j &#x3D; \frac{1}{n} \sum_{i&#x3D;1}^{n} x_i ]<br>$$</p><ol start="3"><li>重复迭代：重复执行分配和更新阶段，直至达到停止条件为止。停止条件可以是类中心不再发生变化，即算法收敛；或者是达到最大迭代次数。</li></ol><p>总结：<strong>通过迭代地移动簇中心（质心）来最小化每个点到其簇中心的距离之和。</strong></p><p>预测新的未知数据点：迭代每类的聚类（簇）中心，计算该样本点距离每个中心的距离，距离最近的点即为该样本的类别</p><h3 id="聚类和分类问题的区别"><a href="#聚类和分类问题的区别" class="headerlink" title="聚类和分类问题的区别"></a>聚类和分类问题的区别</h3><ul><li>聚类是一种<strong>无监督</strong>学习，而分类是一种有<strong>监督</strong>的学习。</li><li>聚类<strong>只需要人工指定相似度的标准和类别数</strong>就可以，而分类需要从训练集学习分类的方法</li></ul><p><img src="/../../img/%E8%81%9A%E7%B1%BB%E5%88%86%E7%B1%BB.png"></p><h3 id="SVM-支持向量机，Support-Vector-Machine"><a href="#SVM-支持向量机，Support-Vector-Machine" class="headerlink" title="SVM (支持向量机，Support Vector Machine)"></a>SVM (支持向量机，Support Vector Machine)</h3><p><strong>基本想法</strong> 是求解能够正确划分训练数据集并且几何间隔最大的分离超平面<br>最大化类别间隔实现分类</p><p><strong>支持向量</strong> 是指训练样本中，与分类超平面最近的数据点。其是训练数据的子集同时也是最难分类的点</p><p><img src="/../../img/SVM.png"></p><p>SVM 模型将实例表示为空间中的点，将使用一条直线分隔数据点。需要注意的是，支持向量机需要对输入数据进行<strong>完全标记</strong>，仅直接适用于两类任务，如果是多类任务需要减少到几个二元问题 或者 修改损失函数比如使用softmax</p><p><strong>支持向量机包含几种模型</strong></p><p>主要是根据<strong>训练数据集是否线性可分</strong>以及<strong>是否允许出现分类错误</strong>进行划分的。主要包含以下三种模型：</p><p>硬间隔支持向量机：当训练数据线性可分时，硬间隔最大化不允许出现分类错误，此时超平面将所有训练数据集都分类正确，所以叫硬间隔支持向量机</p><p>软间隔支持向量机：当训练数据近似线性可分时，软间隔最大化允许出现分类错误，此时超平面不能将所有训练数据点都分类正确，所以叫软间隔支持向量机</p><p>非线性支持向量机：当训练数据线性不可分时，通过使用核函数和软间隔最大化对数据进行分类</p><p><strong>硬间隔软间隔</strong></p><p>间隔(margin)就是指决策面(y&#x3D;0)与任意训练数据点之间的最小距离。</p><p>硬间隔是指SVM在分类中不允许出现分类错误。通俗点，硬间隔就是训练集中的任何数据点不允许出现在间隔内，即两条蓝线之间，但数据点可以出现在蓝色线上，这些点叫支持向量。</p><p>软间隔是指SVM在分类中允许出现分类错误的点，如下图所示。这些圈出的数据点都是支持向量，但是其中两个点不在蓝线上，一个在间隔内，另一个被分类错误(黑色直线所指的两个点)。软间隔允许这种情况存在，硬间隔则不允许。</p><p><img src="/../../img/svm%E9%97%B4%E9%9A%94.png"></p><p><strong>SVM的优化</strong><br>更好得找出混在正类中的负类 以及 混在负类中的正类 </p><ol><li><p>增加惩罚项</p></li><li><p>使用核函数<br>通俗解释：如果想把混在一起的沙子和黄豆分开，可以用力一拍，用于弹起后的高度不同，因此可以据此将其分开</p></li></ol><h3 id="集成算法"><a href="#集成算法" class="headerlink" title="集成算法"></a>集成算法</h3><p>构建多个学习器，然后通过一定策略结合把它们来完成学习任务的，常常可以获得比单一学习显著优越的学习器。</p><p><img src="/../../img/%E9%9B%86%E6%88%90%E7%AE%97%E6%B3%95.png"></p><p>集成学习通过训练学习出多个估计器<br>预测时通过结合器将多个估计器的结果整合起来当作最后的结果输出。<br>即训练时用多种分类器一起完成同一份任务，测试时对待测试样本分别通过不同的分类器，汇总最后的结果。</p><p><strong>集成学习的优势:</strong> 是提升了单个估计器的通用性与鲁棒性，比单个估计器拥有更好的预测性能并且能更好得防止过拟合。集成学习的另一个特点是能方便的进行并行化操作</p><p>集成算法一般分为三类：Bagging，Boosting，Stacking（我们可以把它简单地看成并行，串行和树型）</p><h4 id="Bagging-并行"><a href="#Bagging-并行" class="headerlink" title="Bagging 并行"></a>Bagging 并行</h4><p>Bagging的全称是bootstrap averaging，它把各个基模型的结果组织起来</p><h5 id="随机森林（Random-Forest）"><a href="#随机森林（Random-Forest）" class="headerlink" title="随机森林（Random Forest）"></a>随机森林（Random Forest）</h5><p>随机：数据采样随机，特征选择随机（每次数据集是随机有放回的选出，同时随机选出部分特征作为输入）</p><p>森林：很多个决策树并行放在一起</p><p><img src="/../../img/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97.png"></p><p><strong>随机森林可以看作一个决策树的集合</strong>，随机森林中每棵决策树估计一个分类，这个过程称为 “<strong>投票</strong>（vote）”。理想情况下，我们根据每棵决策树的每个投票，选择最多投票的分类</p><p>投票策略：软投票与硬投票<br><strong>硬投票</strong>：直接用类别值，少数服从多数。<br><strong>软投票</strong>：各自分类器的概率值进行加权平均</p><p>用随机的方式建立一个决策树的森林。当有一个新的输入样本进入的时候，就<strong>让森林中的每一棵决策树分别进行判断</strong>，预测时使用投票结果最多的分类，也是少数服从多数的算法。</p><p>随机森林优势：</p><ol><li>它能够处理很高维度（feature很多）的数据，并且不用做特征选择。</li><li>在训练完后，它能够给出哪些feature比较重要。</li><li>容易做成并行化方法，速度比较快。</li><li>可以进行可视化展示，便于分析。</li></ol><p><strong>和决策树区别</strong></p><h5 id="BaggingClassifier-BaggingRegressor"><a href="#BaggingClassifier-BaggingRegressor" class="headerlink" title="BaggingClassifier&#x2F;BaggingRegressor"></a>BaggingClassifier&#x2F;BaggingRegressor</h5><p>是从原始数据集抽选Ｓ次（抽取实例，抽取属性），得到S个新数据集（有的值可能重复，有的值可能不出现）。使用同一模型，训练得到S个分类器，预测时使用投票结果最多的分类</p><h5 id="VotingClassifier"><a href="#VotingClassifier" class="headerlink" title="VotingClassifier"></a>VotingClassifier</h5><p>可选择多个不同的基模型，分别进行预测，以投票方式决定最终结果。</p><h4 id="Boosting-串行"><a href="#Boosting-串行" class="headerlink" title="Boosting 串行"></a>Boosting 串行</h4><p>从弱学习器开始加强，通过加权来进行训练。新模型是在旧模型的基本上建立的</p><p><img src="/../../img/Boosting.png"></p><p>Boosting相当于串联电路，先需要做好第一个模型，再做第二个，再做第三个，按照顺序一步一步做。</p><h5 id="AdaBoost自适应提升算法"><a href="#AdaBoost自适应提升算法" class="headerlink" title="AdaBoost自适应提升算法"></a>AdaBoost自适应提升算法</h5><p>它对分类错误属性的给予更大权重，再做下次迭代，直到收敛</p><h5 id="Gradient-Boosting-Machine（简称GBM）梯度提升算法"><a href="#Gradient-Boosting-Machine（简称GBM）梯度提升算法" class="headerlink" title="Gradient Boosting Machine（简称GBM）梯度提升算法"></a>Gradient Boosting Machine（简称GBM）梯度提升算法</h5><p>它通过求损失函数在梯度方向下降的方法，层层改进，sklearn中也实现了该算法GradientBoostingClassifier&#x2F;GradientBoostingRegressor。GBM是目前非常流行的一类算法。</p><h3 id="降维算法（Dimensional-Reduction）"><a href="#降维算法（Dimensional-Reduction）" class="headerlink" title="降维算法（Dimensional Reduction）"></a>降维算法（Dimensional Reduction）</h3><p>降维其更深层次的意义在于<strong>有效信息的提取综合及无用信息的摈弃</strong>。</p><p>数据降维算法是机器学习算法中的大家族，与分类、回归、聚类等算法不同，它的<strong>目标</strong>是将向量投影到低维空间，以达到某种目的如可视化，或是做分类。</p><p>数据降维就是寻找一个映射函数f，将高维向量x映射成低维向量y<br>$$<br>f : (x)  -&gt; (y)<br>$$</p><p>如何确定这个映射函数，是降维算法核心，它们往往根据不同的准则进行构造。</p><p><strong>降维算法分类</strong></p><p>目前已经存在大量的数据降维算法，可以从另个不同的维度对它们进行分类。</p><p>按照是否有使用样本的标签值，可以将降维算法分为有监督降维和无监督降维；</p><p>按照降维算法使用的映射函数，可以将算法分为线性降维与非线性降维；</p><p>无监督降维算法不使用样本标签值，因此是一种无监督学习算法，其典型代表是<strong>PCA</strong>；</p><p>有监督的降维算法则使用了样本标签值，是一种有监督学习算法，其典型代表是<strong>LDA</strong>；</p><p>线性降维算根据样本集构造出线性函数完成向低维空间的映射。一般通过对向量x进行线性变换即左乘一个投影矩阵W而得到结果向量y</p><p>$$<br> y &#x3D; W x<br>$$</p><p>非线性降维算法则构造一个非线性映射完成数据的降维。很多时候数据是非线性的，因此需要使用非线性降维算法以取得更好的效果。</p><h4 id="LAD算法（线性判别分析法）"><a href="#LAD算法（线性判别分析法）" class="headerlink" title="LAD算法（线性判别分析法）"></a>LAD算法（线性判别分析法）</h4><p>Linear Discriminant Analysis<br><strong>线性、有监督降维算法</strong></p><p>LDA降维的<strong>目标</strong>：将带有标签的数据降维，投影到低维空间同时满足三个条件：</p><ul><li>尽可能多地保留数据样本的信息（即选择最大的特征是对应的特征向量所代表的的方向）。</li><li>寻找使样本尽可能好分的最佳投影方向。</li><li>投影后使得同类样本尽可能近，不同类样本尽可能远。</li></ul><p><strong>思想：</strong> 投影之后同类的样本尽量集中，不同类的样本尽量分开</p><p><strong>衡量指标：</strong> 类间散度&#x2F;类内散度最大</p><h4 id="PCA算法（主成分分析法）"><a href="#PCA算法（主成分分析法）" class="headerlink" title="PCA算法（主成分分析法）"></a>PCA算法（主成分分析法）</h4><p><a href="https://zhuanlan.zhihu.com/p/391531132">从线性代数几何角度看降维（上）：主成分分析(PCA)应用于降维</a></p><p><strong>线性、无监督降维算法</strong></p><p>主成分分析（Principal Component Analysis，PCA）是一种常用的降维技术，用于将高维数据转换为低维数据，同时保留数据集中的最大方差。PCA通过找到数据中的<strong>主成分（即数据最大方差方向）</strong> 来实现这一目标<br>从而可以减少数据集的特征数量，减少数据的维度，降低计算和存储开销，并帮助提高模型的泛化能力</p><p><strong>PCA算法思想：</strong> 是将n维特征映射到k维上，这k维是全新的正交特征也被称为主成分，是在原有n维特征的基础上重新构造出来的k维特征</p><p><strong>实现方法：</strong><br>PCA算法有两种实现方法：</p><ul><li>基于特征值分解 协方差矩阵 实现PCA算法</li><li>基于SVD分解 协方差矩阵 实现PCA算法</li></ul><p><strong>步骤</strong></p><ol><li>因为要提高计算效率和去除冗余特征，所以我们要做降维</li><li>由于特征之间存在相关性，所以不能直接通过扔掉部分特征来做降维</li><li>因此要先做特征转换，转换后的特征要满足彼此不相关</li><li>要令转换后的新特征不相关，体现在新特征的协方差矩阵要为对角矩阵（reason：协方差矩阵的对角线元素表示各个特征自身的方差，而非对角线元素表示特征之间的协方差。如果新特征不相关，那么它们的协方差应该为零，因此协方差矩阵的非对角线元素都为零，整个矩阵成为对角矩阵。）</li><li>接下来要开始扔特征（主成分），达到降维的目标  <strong>通常认为方差越大的特征含有的信息量越大，方差小的特征往往是噪声或无用信息</strong></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前缀和和差分</title>
    <link href="/2024/04/12/algorithm_know/%E5%B7%AE%E5%88%86%E5%92%8C%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <url>/2024/04/12/algorithm_know/%E5%B7%AE%E5%88%86%E5%92%8C%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="前缀和和差分"><a href="#前缀和和差分" class="headerlink" title="前缀和和差分"></a>前缀和和差分</h1><p><a href="https://blog.csdn.net/weixin_45629285/article/details/111146240">前缀和和差分</a></p><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>一个数组 a[n] &#x3D; b[1] + b[2] + … + b[n]<br>数组b 即为 a的差分数组 （a为b的前缀和数组）</p><p>当 <code>b[3] += c</code> 时意味着 从a[3] 到 a[n] 都会加上c</p><p>如果想要对原数组 a 中的某段区间[l,r]都加上一个数<br>操作分为两步：</p><ol><li><p>对其差分数组进行 <code>b[l] += c;  b[r+1] -= c;</code></p></li><li><p><strong>再对差分数组求和</strong>即可得到想要的数组</p></li></ol><blockquote><p>给定两个序列，要求将其中一个序列变成另一个序列，我们都可以将其转化到差分数组上，让两个序列的差分数组相同 <code>A ——&gt; B 相当于从 A-B ——&gt; 0</code></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dfs/bfs练习题</title>
    <link href="/2024/04/11/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/dfs-bfs%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <url>/2024/04/11/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/dfs-bfs%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="dfs-bfs练习题"><a href="#dfs-bfs练习题" class="headerlink" title="dfs&#x2F;bfs练习题"></a>dfs&#x2F;bfs练习题</h1><h2 id="母亲的牛奶"><a href="#母亲的牛奶" class="headerlink" title="母亲的牛奶"></a>母亲的牛奶</h2><p>题目链接：<a href="https://www.acwing.com/problem/content/1357/">母亲的牛奶</a></p><p><img src="/../../img/%E6%AF%8D%E4%BA%B2%E7%9A%84%E7%89%9B%E5%A5%B6.png"></p><p><strong>步骤：</strong></p><ol><li>分析题目，找出总共有多少种状态，从而得出队列数组的内存空间</li><li>每种状态相当于一个点，状态与状态之间的转变相当于一条边</li><li>bfs遍历，将每种状态都存在队列中。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//A，B，C最大为20升</span><br><span class="hljs-comment">//状态个数为20^3</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">21</span>;<br><span class="hljs-type">int</span> A,B,C;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    <span class="hljs-type">int</span> a,b,c;<br>&#125;q[N*N*N]; <span class="hljs-comment">//关键点，队列数组q有N^3个状态</span><br> <br><span class="hljs-type">int</span> hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<br><br><span class="hljs-type">bool</span> st[N][N][N];<br><span class="hljs-type">int</span> s[N]; <span class="hljs-comment">//记录当 A桶是空的时候，C桶中可能包含多少升牛奶</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!st[a][b][c])&#123;<br>        q[++tt] = &#123;a,b,c&#125;;<br>        st[a][b][c] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>    q[++tt] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,C&#125;;<br>    st[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][C] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;<br>        node t = q[hh];<br>        hh++;<br>        <span class="hljs-type">int</span> a = t.a; <span class="hljs-type">int</span> b = t.b; <span class="hljs-type">int</span> c = t.c;<br>        <span class="hljs-comment">//由当前状态可以得到2*3 = 6 种状态</span><br>        <span class="hljs-comment">//从A开始转移</span><br>        <span class="hljs-built_in">insert</span>(a-<span class="hljs-built_in">min</span>(a,B-b), <span class="hljs-built_in">min</span>(a+b,B), c);<br>        <span class="hljs-built_in">insert</span>(a-<span class="hljs-built_in">min</span>(a,C-c), b, <span class="hljs-built_in">min</span>(a+c,C));<br>        <span class="hljs-comment">//从B开始转移</span><br>        <span class="hljs-built_in">insert</span>(<span class="hljs-built_in">min</span>(a+b,A), b-<span class="hljs-built_in">min</span>(b,A-a), c);<br>        <span class="hljs-built_in">insert</span>(a, b-<span class="hljs-built_in">min</span>(b,C-c), <span class="hljs-built_in">min</span>(b+c,C));<br>        <span class="hljs-comment">//从C开始转移</span><br>        <span class="hljs-built_in">insert</span>(<span class="hljs-built_in">min</span>(a+c,A), b, c-<span class="hljs-built_in">min</span>(c,A-a));<br>        <span class="hljs-built_in">insert</span>(a, <span class="hljs-built_in">min</span>(b+c,B), c-<span class="hljs-built_in">min</span>(c,B-b));<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; A &gt;&gt; B &gt;&gt; C;<br>    <span class="hljs-built_in">bfs</span>();<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;hh;i++)&#123;<br>        <span class="hljs-keyword">if</span>(q[i].a == <span class="hljs-number">0</span>)&#123;<br>            s[cnt] = q[i].c;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(s,s+cnt);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt;i++)&#123;<br>        cout &lt;&lt; s[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小红走矩阵-bfs"><a href="#小红走矩阵-bfs" class="headerlink" title="小红走矩阵(bfs)"></a>小红走矩阵(bfs)</h2><p><a href="https://ac.nowcoder.com/acm/problem/269999">小红走矩阵</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> g[N][N];<br><span class="hljs-type">int</span> dist[N][N];<br><br><span class="hljs-type">int</span> ax[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> ay[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><br>queue&lt;PII&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;);<br>    dist[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>        PII t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">//该处永远是循环4次</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>            <span class="hljs-type">int</span> x = t.first + ax[i]; <span class="hljs-type">int</span> y = t.second + ay[i];<br>            <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;y&lt;m &amp;&amp; g[x][y] != g[t.first][t.second] &amp;&amp; dist[x][y] == <span class="hljs-number">-1</span>)&#123;<br>                q.<span class="hljs-built_in">push</span>(&#123;x,y&#125;);<br>                dist[x][y] = dist[t.first][t.second] + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// for(int i=0;i&lt;n;i++)&#123;</span><br>    <span class="hljs-comment">//     for(int j=0;j&lt;m;j++)&#123;</span><br>    <span class="hljs-comment">//         cout &lt;&lt; dist[i][j] &lt;&lt; &quot; &quot;;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; &quot;\n&quot;;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">return</span> dist[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            cin &gt;&gt; g[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(dist));<br>    cout &lt;&lt; <span class="hljs-built_in">bfs</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><a href="https://ac.nowcoder.com/acm/contest/76652/B">老师的签到</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连通图的遍历</title>
    <link href="/2024/04/11/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E8%BF%9E%E9%80%9A%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <url>/2024/04/11/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E8%BF%9E%E9%80%9A%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="连通图的遍历"><a href="#连通图的遍历" class="headerlink" title="连通图的遍历"></a>连通图的遍历</h1><blockquote><p>“连通块问题”，是基础搜索。用DFS或BFS都行：遍历一个连通块（找到这个连通块中所有的’#‘，并标记已经搜过，不用再搜）；再遍历下一个连通块…；遍历完所有连通块，统计有多少个连通块。</p></blockquote><h2 id="全球变暖"><a href="#全球变暖" class="headerlink" title="全球变暖"></a>全球变暖</h2><p>题目链接：<a href="https://www.acwing.com/problem/content/description/1235/">全球变暖</a></p><p><img src="/../../img/%E5%85%A8%E7%90%83%E5%8F%98%E6%9A%96.png"></p><p><strong>步骤：</strong></p><ol><li>对图g[N][N]进行循环，每次从是陆地并且没有遍历过的点开始搜索</li><li>进入dfs函数，将当前搜到的点置为true</li><li>然后以此点为中心向四个方向遍历，直到周围没有满足条件（即是陆地又没遍历过的）的点</li><li>便会开始向上回溯直到一步步回溯到退出dfs函数</li><li>如果本次找到的连通块中有一个点其四个方向都是陆地，则这个岛屿不会被完全淹没，否则会被完全淹没。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> st[N][N];<br><span class="hljs-type">char</span> g[N][N];<br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> d[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;&#125;; <span class="hljs-comment">//四个方向</span><br><span class="hljs-type">int</span> flag,ans=<span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br>    st[i][j] = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cout &lt;&lt; &quot;ij:&quot;&lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot;\n&quot;;</span><br>    <span class="hljs-keyword">if</span>(g[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; g[i<span class="hljs-number">-1</span>][j]==<span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; g[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; g[i][j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>        flag = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//继续DFS周围的陆地</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;a&lt;<span class="hljs-number">4</span>;a++)&#123;<br>        <span class="hljs-type">int</span> x = i+dx[a]; <span class="hljs-type">int</span> y = j+dy[a];<br>        <span class="hljs-comment">//继续DFS未搜过的陆地，目的是标记它们   </span><br>        <span class="hljs-comment">//if(nx&gt;=1 &amp;&amp; nx&lt;=n &amp;&amp; ny&gt;=1 &amp;&amp; ny&lt;=n &amp;&amp; vis[nx][ny]==0 &amp;&amp; a[nx][ny]==&#x27;#&#x27;) //题目说边上都是水，所以不用这么写了</span><br>        <span class="hljs-keyword">if</span>(!st[x][y] &amp;&amp; g[x][y] == <span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>            <span class="hljs-built_in">dfs</span>(x,y);<br>            <span class="hljs-comment">// cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; y &lt;&lt; &quot;\n&quot;;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            cin &gt;&gt; g[i][j];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(g[i][j] == <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; !st[i][j])&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-built_in">dfs</span>(i,j);<br>                <span class="hljs-comment">// cout &lt;&lt; &quot;本次连通图查找完毕&quot; &lt;&lt; &quot;\n&quot;;</span><br>                <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//这个岛全部被淹</span><br>                    ans++; <span class="hljs-comment">//统计被淹的岛的数量</span><br>                    <br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调栈和单调队列</title>
    <link href="/2024/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88%E5%92%8C%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    <url>/2024/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88%E5%92%8C%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="单调栈和单调队列"><a href="#单调栈和单调队列" class="headerlink" title="单调栈和单调队列"></a>单调栈和单调队列</h1><p><strong>单调栈和优先队列</strong><br>单调栈能保证全部元素的单调性，会直接舍去不合的元素，因此没有额外维护成本<br>小根堆只能保证堆顶是最小值，不会直接舍去元素，但需要O(logn)的decreaseKey成本</p><p>有些题目答案一定是当前最大最小值，直接用单调栈维护即可，不是答案直接舍去，时间复杂度为O(n)<br>当然使用优先队列也正确，因为堆顶一定是极值，但时间复杂度为O(nlogn)</p><p>另外，单调队列是双端版的单调栈，元素可以从两端排除，不等于优先队列</p><ol><li>先想暴力怎么做，再考虑把没有用的元素删掉，再看有没有单调性，有单调性的话再看怎么优化 </li><li>直接看逆序有没有用，若逆序没用，就有单调性！（在一个从小到大排列的数列中，若左边的数比右边的数大，就称作逆序数）</li></ol><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><blockquote><p>一段本不具有单调性的区间，用一个栈去维护使得其具有单调性（将元素入栈，如果其是逆序的，就让它出栈）</p></blockquote><p><img src="/../../img/%E5%8D%95%E8%B0%83%E6%A0%88.png"></p><p><strong>步骤：</strong></p><ol><li><strong>while循环</strong>判断栈顶元素是否大于 a[i]，如果大于则出栈</li><li>如果<strong>此时栈不空</strong>则将新的元素 a[i] 赋给答案数组ans</li><li>如果<strong>此时栈空</strong>则将 -1 赋给答案数组ans</li><li>将当前元素 a[i] 入栈</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,a[N];<br><span class="hljs-type">int</span> stk[N],tt; <span class="hljs-comment">//tt为0代表栈空</span><br><span class="hljs-type">int</span> ans[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-comment">//这个地方是while</span><br>        <span class="hljs-comment">//直到队列为空或者新的元素小于队尾的元素才进行下一步</span><br>        <span class="hljs-keyword">while</span>(tt &amp;&amp; stk[tt] &gt;= a[i]) tt--; <span class="hljs-comment">//出栈</span><br>        <span class="hljs-keyword">if</span>(tt) ans[i] = stk[tt];<br>        <span class="hljs-keyword">else</span> ans[i] = <span class="hljs-number">-1</span>;<br>        stk[++tt] = a[i]; <span class="hljs-comment">//入栈</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cout &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p>题目链接：<a href="https://www.acwing.com/problem/content/description/156/">滑动窗口</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,k,a[N];<br><span class="hljs-type">int</span> q[N],hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-comment">//判断队头是否已经不在滑动窗口内了</span><br>        <span class="hljs-keyword">if</span>(hh &lt;= tt &amp;&amp; i-k+<span class="hljs-number">1</span> &gt; q[hh]) hh++;<br>        <span class="hljs-keyword">while</span>(hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--; <span class="hljs-comment">//不满足条件出队</span><br>        q[++tt] = i; <span class="hljs-comment">//新元素入队</span><br>        <br>        <span class="hljs-comment">//i指针到达滑动窗口末端,可以开始输出队头值</span><br>        <span class="hljs-keyword">if</span>(i&gt;=k<span class="hljs-number">-1</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">//输出单调地址队列的队头，即最小值</span><br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    <br>    <span class="hljs-comment">//队列清空</span><br>    hh = <span class="hljs-number">0</span>; tt=<span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-comment">//判断队头是否已经不在滑动窗口内了</span><br>        <span class="hljs-keyword">if</span>(hh &lt;= tt &amp;&amp; i-k+<span class="hljs-number">1</span> &gt; q[hh]) hh++;<br>        <span class="hljs-comment">//两个for循环只有 这里从 &gt;= 变成了 &lt;=</span><br>        <span class="hljs-keyword">while</span>(hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--; <span class="hljs-comment">//不满足条件出队</span><br>        q[++tt] = i; <span class="hljs-comment">//新元素入队</span><br>        <br>        <span class="hljs-comment">//i指针到达滑动窗口末端,可以开始输出队头值</span><br>        <span class="hljs-keyword">if</span>(i&gt;=k<span class="hljs-number">-1</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">//输出单调地址队列的队头，即最小值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="滑动窗口（双端队列）"><a href="#滑动窗口（双端队列）" class="headerlink" title="滑动窗口（双端队列）"></a>滑动窗口（双端队列）</h2><p><strong>维护一个固定长度窗口内的最大最小值</strong></p><p><strong>tips</strong></p><ol><li>要先判断 <code>//要先判断 q.size() &gt; 0</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//维护最小值（踢掉目前窗口中 比 要加入窗口值 小的数）</span><br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span> &amp;&amp; a[i] &lt; q.<span class="hljs-built_in">back</span>())&#123; <span class="hljs-comment">//要先判断 q.size() &gt; 0</span><br>    q.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-comment">// int q[N],hh=0,tt=-1; //队列中元素下标从0开始</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <br>    deque&lt;<span class="hljs-type">int</span>&gt; q; <span class="hljs-comment">//双端队列</span><br>    <span class="hljs-comment">//求最小值(构造单调递减队列)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-comment">//新元素和队尾元素 循环 比较 （注意这里是while，会一直循环比较）</span><br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>() &amp;&amp; q.<span class="hljs-built_in">back</span>() &gt; a[i]) q.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//队尾出队</span><br>        q.<span class="hljs-built_in">push_back</span>(a[i]); <span class="hljs-comment">//新元素入队</span><br>        <br>        <span class="hljs-comment">//判断目前的队头是否已经滑出了窗口 （这里要取 i-k &gt;= 1）</span><br>        <br>        <span class="hljs-keyword">if</span>(i-k &gt;= <span class="hljs-number">1</span> &amp;&amp; q.<span class="hljs-built_in">front</span>() == a[i-k])&#123; <span class="hljs-comment">//如果q.front != a[i-k] 就代表窗口左边界的值早就出队了，不会参与比较了</span><br>            q.<span class="hljs-built_in">pop_front</span>();<br>        &#125;<br>        <span class="hljs-comment">//窗口大小满足条件后，开始输出答案</span><br>        <span class="hljs-keyword">if</span>(i &gt;= k)&#123;<br>            cout &lt;&lt; q.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    q.<span class="hljs-built_in">clear</span>();<br><br>    <span class="hljs-comment">//求最大值(构造单调递减队列)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>() &amp;&amp; q.<span class="hljs-built_in">back</span>() &lt; a[i]) q.<span class="hljs-built_in">pop_back</span>();<br>        q.<span class="hljs-built_in">push_back</span>(a[i]);<br>        <span class="hljs-keyword">if</span>(i - k &gt;= <span class="hljs-number">1</span> &amp;&amp; a[i - k] == q.<span class="hljs-built_in">front</span>()) q.<span class="hljs-built_in">pop_front</span>(); <br>        <span class="hljs-keyword">if</span>(i &gt;= k) cout &lt;&lt; q.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>滑动窗口的最大值问题</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printMaxInWindows</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> windowSize)</span> </span>&#123;<br>    std::deque&lt;<span class="hljs-type">int</span>&gt; window;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-comment">// 移除窗口外的元素</span><br>        <span class="hljs-keyword">while</span> (!window.<span class="hljs-built_in">empty</span>() &amp;&amp; window.<span class="hljs-built_in">front</span>() &lt;= i - windowSize) &#123; <span class="hljs-comment">//window.front() &lt;= i - windowSize 符合这个条件才代表窗口的左边界还在队列中</span><br>            window.<span class="hljs-built_in">pop_front</span>();<br>        &#125;<br>        <span class="hljs-comment">// 移除小于当前元素的元素</span><br>        <span class="hljs-keyword">while</span> (!window.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[window.<span class="hljs-built_in">back</span>()] &lt; nums[i]) &#123;<br>            window.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>        window.<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-comment">// 输出窗口内的最大值</span><br>        <span class="hljs-keyword">if</span> (i &gt;= windowSize - <span class="hljs-number">1</span>) &#123;<br>            std::cout &lt;&lt; nums[window.<span class="hljs-built_in">front</span>()] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; nums = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> windowSize = <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">printMaxInWindows</span>(nums, windowSize);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="完美区间"><a href="#完美区间" class="headerlink" title="完美区间"></a>完美区间</h3><p><strong>给出一个长度为N(1 ≤ N ≤ 50000)的数字队列，定义完美区间为数字队列中连续的一段，并且其中最大与最小数字之差不得超过M(1 ≤ M ≤ 50000)。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countPerfectIntervals</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> M)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    deque&lt;<span class="hljs-type">int</span>&gt; minDeque; <span class="hljs-comment">// 用于存储最小值索引的双端队列</span><br>    deque&lt;<span class="hljs-type">int</span>&gt; maxDeque; <span class="hljs-comment">// 用于存储最大值索引的双端队列</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-comment">// 维护最小值队列</span><br>        <span class="hljs-keyword">while</span> (!minDeque.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i] &lt; nums[minDeque.<span class="hljs-built_in">back</span>()]) &#123;<br>            minDeque.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>        minDeque.<span class="hljs-built_in">push_back</span>(i);<br><br>        <span class="hljs-comment">// 维护最大值队列</span><br>        <span class="hljs-keyword">while</span> (!maxDeque.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i] &gt; nums[maxDeque.<span class="hljs-built_in">back</span>()]) &#123;<br>            maxDeque.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>        maxDeque.<span class="hljs-built_in">push_back</span>(i);<br><br>        <span class="hljs-comment">// 当窗口大小超过n时，移动窗口</span><br>        <span class="hljs-keyword">while</span> (nums[i] - nums[minDeque.<span class="hljs-built_in">front</span>()] &gt; M) &#123;<br>            <span class="hljs-keyword">if</span> (minDeque.<span class="hljs-built_in">front</span>() == i - minDeque.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>) &#123;<br>                minDeque.<span class="hljs-built_in">pop_front</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (nums[maxDeque.<span class="hljs-built_in">front</span>()] - nums[i] &gt; M) &#123;<br>            <span class="hljs-keyword">if</span> (maxDeque.<span class="hljs-built_in">front</span>() == i - maxDeque.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>) &#123;<br>                maxDeque.<span class="hljs-built_in">pop_front</span>();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 计算完美区间的数量</span><br>        count += (i - minDeque.<span class="hljs-built_in">front</span>() + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;;<br>    <span class="hljs-type">int</span> M = <span class="hljs-number">3</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Number of perfect intervals: &quot;</span> &lt;&lt; <span class="hljs-built_in">countPerfectIntervals</span>(nums, M) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="每个字母恰好出现两次的最长子串"><a href="#每个字母恰好出现两次的最长子串" class="headerlink" title="每个字母恰好出现两次的最长子串"></a>每个字母恰好出现两次的最长子串</h3><p><strong>给一个只包含小写字母且长度不超过100000的字符串，找出每个字母恰好出现两次的最长子串。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">string <span class="hljs-title">longestSubstringWithEqualFrequency</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">length</span>();<br>    unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; count;<br>    <span class="hljs-type">int</span> maxLen = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    string result;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> right = <span class="hljs-number">0</span>; right &lt; n; ++right) &#123;<br>        <span class="hljs-type">char</span> c = s[right];<br>        count[c]++;<br>        <br>        <span class="hljs-comment">// 检查当前窗口是否有效</span><br>        <span class="hljs-keyword">while</span> (count[c] &gt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-type">char</span> leftChar = s[left];<br>            count[leftChar]--;<br>            left++;<br>        &#125;<br><br>        <span class="hljs-comment">// 检查当前窗口是否包含所有字符恰好两次</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">all_of</span>(count.<span class="hljs-built_in">begin</span>(), count.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> pair&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;&amp; p) &#123; <span class="hljs-keyword">return</span> p.second == <span class="hljs-number">2</span>; &#125;)) &#123;<br>            <span class="hljs-keyword">if</span> (right - left + <span class="hljs-number">1</span> &gt; maxLen) &#123;<br>                maxLen = right - left + <span class="hljs-number">1</span>;<br>                result = s.<span class="hljs-built_in">substr</span>(left, maxLen);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s = <span class="hljs-string">&quot;aabbcc&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Longest substring with equal frequency: &quot;</span> &lt;&lt; <span class="hljs-built_in">longestSubstringWithEqualFrequency</span>(s) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的直径</title>
    <link href="/2024/04/10/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    <url>/2024/04/10/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h1><blockquote><p>定义：树上任意两节点之间最长的简单路径即为树的「直径」<br>显然，一棵树可以有多条直径，他们的长度相等。<br>可以用两次 DFS 或者树形 DP 的方法在 O(n) 时间求出树的直径。</p></blockquote><p><strong>求树的直径的方法：</strong></p><ol><li><p>任取一点作为起始点k，找到距离该点最远的一个点v。</p></li><li><p>从点v开始搜，找到距离点v最远的一点u，则uv间的距离是树的直径。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1KB=1024B（字节），1MB=1024KB，所以1MB大约等于100w字节（1e6）64MB = 6400w字节 （6*1e7）</span><br><span class="hljs-comment">//int 占四字节</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">2</span>*N;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx=<span class="hljs-number">1</span>,w[M]; <span class="hljs-comment">//</span><br><span class="hljs-type">bool</span> st[N];<br>LL s[<span class="hljs-number">10100</span>];<br>LL maxu,maxd;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> d)</span></span>&#123;<br>    e[idx] = b; ne[idx] = h[a]; h[a] = idx; w[idx] = d; idx++; <span class="hljs-comment">//idx要最后再++</span><br>&#125;<br><br><span class="hljs-comment">//求距离某个点u最远的点maxu,以及距离</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> d)</span></span>&#123;<br>    st[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span>(!st[j])&#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(maxd &lt; d+w[i])&#123;<br>                <span class="hljs-comment">//maxu是距离u最远的点，maxd是 u和maxu 的距离</span><br>                maxd = d+w[i];<br>                maxu = j;<br>            &#125;<br>            <span class="hljs-built_in">dfs</span>(j,d+w[i]);<br>            st[j] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-comment">//这里是到n-1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-type">int</span> a,b,d;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;<br>        <span class="hljs-built_in">add</span>(a,b,d); <span class="hljs-built_in">add</span>(b,a,d);<br>    &#125;<br>    <span class="hljs-comment">// cout &lt;&lt; s[4] &lt;&lt; &quot;\n&quot;;</span><br>    <span class="hljs-comment">// int ans,max=0,pos;</span><br>    <span class="hljs-comment">// for(int i=2;i&lt;=n;i++)&#123;</span><br>    <span class="hljs-comment">//     memset(st,0,sizeof(st));</span><br>    <span class="hljs-comment">//     ans = dfs(1,i,0);</span><br>    <span class="hljs-comment">//     if(ans &gt; max)&#123;</span><br>    <span class="hljs-comment">//         max = ans;</span><br>    <span class="hljs-comment">//         pos = i;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(st));<br>    <span class="hljs-built_in">dfs</span>(maxu,<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// cout &lt;&lt; u &lt;&lt; pos;</span><br>    <span class="hljs-comment">// memset(st,0,sizeof(st));</span><br>    <span class="hljs-comment">// cout &lt;&lt; maxd; </span><br>    <span class="hljs-comment">//n(a1+an)/2</span><br>    cout &lt;&lt; ( <span class="hljs-number">11</span> + (<span class="hljs-number">11</span>+maxd<span class="hljs-number">-1</span>) )*maxd/<span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// cout &lt;&lt; s[maxd];</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区间合并</title>
    <link href="/2024/04/10/algorithm_know/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
    <url>/2024/04/10/algorithm_know/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h1><p>步骤：</p><ol><li>将区间按照左端点进行排序</li><li>循环判断，如果下一个区间的左端点小于（等于）当前区间的右端点时则可以合并，并更新右端点的最大值</li><li>如果下一个区间的左端点大于当前区间的右端点时则不可以合并，则更新右端点的最大值为下一个区间的右端点</li></ol><p>核心代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//t代表有人挤奶牛的区间的集合，f代表没有挤奶牛的区间的集合</span><br><span class="hljs-comment">//初始化</span><br>    LL maxr = a[<span class="hljs-number">1</span>].r;<br>    t[++<span class="hljs-type">num_t</span>] = a[<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//循环遍历</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>].l &lt;= maxr)&#123;<br>            maxr = <span class="hljs-built_in">max</span>(maxr,a[i+<span class="hljs-number">1</span>].r);<br>            t[<span class="hljs-type">num_t</span>].r = maxr;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            f[++num_f] = &#123;t[<span class="hljs-type">num_t</span>].r , a[i+<span class="hljs-number">1</span>].l&#125;; <span class="hljs-comment">//老区间的r和新区间的l</span><br>            t[++<span class="hljs-type">num_t</span>] = a[i+<span class="hljs-number">1</span>];<br>            maxr = a[i+<span class="hljs-number">1</span>].r;<br>            <span class="hljs-comment">// cnt++; 区间个数</span><br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>求区间合并之后区间的总个数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">int</span> n,cnt=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    LL l,r;<br>&#125;a[N],ans[N];<br><span class="hljs-comment">//左端点从小到大排列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmd</span><span class="hljs-params">(node a, node b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.l &lt; b.l;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> l,r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        a[i] = &#123;l,r&#125;;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>,cmd);<br>    <span class="hljs-comment">//从第二个区间开始判断</span><br>    LL maxr = a[<span class="hljs-number">1</span>].r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>].l &lt;= maxr)&#123;<br>            maxr = <span class="hljs-built_in">max</span>(maxr,a[i+<span class="hljs-number">1</span>].r);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cnt++;<br>            maxr = a[i+<span class="hljs-number">1</span>].r;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><h3 id="挤奶牛"><a href="#挤奶牛" class="headerlink" title="挤奶牛"></a>挤奶牛</h3><blockquote><p>求区间合并后各个区间的范围</p></blockquote><p><img src="/../../img/%E6%8C%A4%E5%A5%B6%E7%89%9B.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">int</span> n;<br>LL <span class="hljs-type">num_t</span>,num_f,<span class="hljs-type">max_t</span>,max_f;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    LL l,r;<br>&#125;a[N],t[N],f[N]; <span class="hljs-comment">//t代表有人挤奶牛的区间的集合，f代表没有挤奶牛的区间的集合</span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmd</span><span class="hljs-params">(node a,node b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.l &lt; b.l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; a[i].l &gt;&gt; a[i].r;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>,cmd);<br>    LL maxr = a[<span class="hljs-number">1</span>].r;<br>    t[++<span class="hljs-type">num_t</span>] = a[<span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>].l &lt;= maxr)&#123;<br>            maxr = <span class="hljs-built_in">max</span>(maxr,a[i+<span class="hljs-number">1</span>].r);<br>            t[<span class="hljs-type">num_t</span>].r = maxr;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            f[++num_f] = &#123;t[<span class="hljs-type">num_t</span>].r , a[i+<span class="hljs-number">1</span>].l&#125;; <span class="hljs-comment">//老区间的r和新区间的l</span><br>            t[++<span class="hljs-type">num_t</span>] = a[i+<span class="hljs-number">1</span>];<br>            maxr = a[i+<span class="hljs-number">1</span>].r;<br>            <span class="hljs-comment">// cnt++; 区间个数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-type">num_t</span>;i++)&#123;<br>        <span class="hljs-comment">// cout &lt;&lt; t[i].l &lt;&lt; &quot; &quot; &lt;&lt; t[i].r &lt;&lt; &quot;\n&quot;;</span><br>        <span class="hljs-type">max_t</span> = <span class="hljs-built_in">max</span>(<span class="hljs-type">max_t</span>,t[i].r-t[i].l);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=num_f;i++)&#123;<br>        <span class="hljs-comment">// cout &lt;&lt; f[i].l &lt;&lt; &quot; &quot; &lt;&lt; f[i].r &lt;&lt; &quot;\n&quot;;</span><br>        max_f = <span class="hljs-built_in">max</span>(max_f,f[i].r-f[i].l);<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-type">max_t</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; max_f;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>区间合并</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>区间合并</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理</title>
    <link href="/2024/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <url>/2024/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cd001eedacaf17440b842860afe731a49ba4a94ca031a94c15f6682e52ad8788">9ef5e081b4fe98a32076e025047ca199b8697f81cb35d436f11001bf982a82df66d1dc61cb3aa440c9bcb55c7090e2a6554f69058e089e9ccbdf034cfd1f3dda12db3f829c591e0da5ca01e3917f75b5d03b529ad01fdfa95cce4e3734b55505cf0cef78ab352d4257ddf7583aa11efdb23a1ca345e68a2d6df74ea7dd001701fb398f039ce3fa015724738b8509f6919d5fb07ad9c668de5775b4be2764474dedc0c4aaa4a855738d4f7dfa6c5ac174a3fddf5fdf0912915e3606f365de96e03930a9ece8fc80be66be66511d940ceaab7740b53f1f635c056738e697746138cf32cd7845bf4de31ac326aad8d64245e4c98347f878afdcde2d321c533f98f521e7c058a60d33ed28056fcda1073023690e4a85ee22a2c947ce95fec0fffc1f1cf4f1ed54f8db115a81e45b9cd4aeb12f1cca56fd27ceab5e92917cd6db63e863eb181c73b0ceee4f529936e1a389bae4a84893cb9220167767aef873830b4d1301c02e900cfb8f7357141da4e7f873cf41d3e7ea616af87f4d744814048daef2954a66b739be6ae879b03fb14fcd9ef2c9d791c8aee6194dde1acc0b8576b08cbd4ded8affc539fed13033b46689e20f20db3551fbf7eb3773731146eccb7a30d2e675c552e3ebbd9239cc61117f9f37bc0439a0a408a5db4c1bae6ce013dc1f47a9b6e9e449a27e6bc97081338014afe64ce52b7206197e3cad81bb05cf2b538d4a38449d3fe99f3ff8c11b0717f2b4938348bb9c81d33cac5678fbcce6c963684804ea11a8973c914e7bc4ad125897250491b8df3f5b3f05d5748c31ba6f7273c6f42e29e65736a467a130aed14adeed10f24501a3fdcb862e1f489bd7d30a450ba9257295ebfd8fede620350daad5def172bcc700eeda905669b6e6cef190a2f4cd6cd2bf178466c3c32e2d4b47bbaf8d1e9cf7335b87e6fca237114ef3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>期末复习</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>期末复习</tag>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日期问题</title>
    <link href="/2024/04/10/algorithm_know/%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/"/>
    <url>/2024/04/10/algorithm_know/%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="日期问题"><a href="#日期问题" class="headerlink" title="日期问题"></a>日期问题</h1><h2 id="需要考虑的问题"><a href="#需要考虑的问题" class="headerlink" title="需要考虑的问题"></a>需要考虑的问题</h2><ol><li>是否是闰年来确定二月的天数</li><li>日期是否合理（month在1<del>12 day在1</del>28&#x2F;29&#x2F;30&#x2F;31（根据月份来判断））</li><li>日期的输出顺序是否合理</li><li>日期相同时只需要输出一次</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string c;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    string yy,mm,dd;<br>&#125;d[<span class="hljs-number">10</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmd</span><span class="hljs-params">(<span class="hljs-type">const</span> node&amp; a, <span class="hljs-type">const</span> node&amp; b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.yy != b.yy) <span class="hljs-keyword">return</span> a.yy &lt; b.yy;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.mm != b.mm) <span class="hljs-keyword">return</span> a.mm &lt; b.mm;<br>    <span class="hljs-keyword">else</span>&#123;<br>        a.dd &lt; b.dd;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; c;<br>    string yy,mm,dd;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> day[<span class="hljs-number">12</span>] = &#123;<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>        string str = c;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br>            yy = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>); mm = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>); dd = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>            yy = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>); mm = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>); dd = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            yy = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>); mm = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>); dd = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(yy &lt;= <span class="hljs-string">&quot;59&quot;</span>)&#123;<br>            yy = <span class="hljs-string">&quot;20&quot;</span> + yy;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            yy = <span class="hljs-string">&quot;19&quot;</span> + yy;<br>        &#125;<br>        <br>        string t = yy;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">stoi</span>(t);<br>        <br>        <span class="hljs-keyword">if</span>(mm &lt;= <span class="hljs-string">&quot;00&quot;</span> || mm &gt; <span class="hljs-string">&quot;12&quot;</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mm == <span class="hljs-string">&quot;02&quot;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(a % <span class="hljs-number">400</span> == <span class="hljs-number">0</span> || (a % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; a % <span class="hljs-number">100</span> !=<span class="hljs-number">0</span> ))&#123;<br>                <span class="hljs-keyword">if</span>(dd &gt; <span class="hljs-string">&quot;29&quot;</span> || dd &lt;= <span class="hljs-string">&quot;00&quot;</span> ) <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(dd &gt; <span class="hljs-string">&quot;28&quot;</span> || dd &lt;= <span class="hljs-string">&quot;00&quot;</span> ) <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mm == <span class="hljs-string">&quot;01&quot;</span> || mm == <span class="hljs-string">&quot;03&quot;</span> || mm == <span class="hljs-string">&quot;05&quot;</span> || mm == <span class="hljs-string">&quot;07&quot;</span> || mm == <span class="hljs-string">&quot;08&quot;</span> || mm == <span class="hljs-string">&quot;10&quot;</span> || mm == <span class="hljs-string">&quot;12&quot;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(dd &lt;= <span class="hljs-string">&quot;00&quot;</span> || dd &gt; <span class="hljs-string">&quot;31&quot;</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(dd &lt;= <span class="hljs-string">&quot;00&quot;</span> || dd &gt; <span class="hljs-string">&quot;30&quot;</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;            <br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt;i++)&#123;<br>            <span class="hljs-keyword">if</span>(yy == d[i].yy &amp;&amp; mm == d[i].mm &amp;&amp; dd == d[i].dd) flag = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">//这个地方要用cnt，不能用i，因为i一直在循环中增加，但放入结构体数组中的数只有满足条件才会放入</span><br>        d[cnt] = &#123;yy,mm,dd&#125;;<br>        cnt ++;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(d,d+cnt,cmd);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt;i++)&#123;<br>        cout &lt;&lt; d[i].yy &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; d[i].mm &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; d[i].dd &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二分查找练习题</title>
    <link href="/2024/04/08/algorithm_know/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <url>/2024/04/08/algorithm_know/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="二分查找练习题"><a href="#二分查找练习题" class="headerlink" title="二分查找练习题"></a>二分查找练习题</h1><h2 id="卡牌"><a href="#卡牌" class="headerlink" title="卡牌"></a>卡牌</h2><p>题目链接：<a href="https://www.lanqiao.cn/problems/2191/learning/?subject_code=1&group_code=4&match_num=13&match_flow=2&origin=cup">卡牌</a></p><p><img src="/../../img/%E5%8D%A1%E7%89%8C%E4%BA%8C%E5%88%86.png"></p><p><strong>tips:</strong></p><ol><li>记得开long long （最好把<strong>所有的数据都从 int 变成 long long</strong>）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">1e11</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br>LL n,m,a[N],b[N];<br><br><span class="hljs-comment">//mid为能凑出的牌的套数</span><br><span class="hljs-comment">//m是全局变量，而每次判断 mid 是否满足条件时都要用到总空白牌数m这个值，因此 要用一个变量去代替 m 去操作 </span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span></span>&#123;<br>  LL sum = m;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(a[i] &gt;= mid) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">if</span>(b[i]+a[i] &lt; mid || sum+a[i] &lt; mid) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    sum = sum - (mid - a[i]); <br>  &#125;<br>  <span class="hljs-keyword">if</span>(sum &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  cin &gt;&gt; n &gt;&gt; m;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    cin &gt;&gt; a[i];<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    cin &gt;&gt; b[i];<br>  &#125;<br>  LL l = <span class="hljs-number">0</span>, r = INT_MAX; <br>  <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>    LL mid = (l+r+<span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))&#123;<br>      l = mid;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>      r = mid<span class="hljs-number">-1</span>;<br>    &#125;<br>  &#125;<br>  cout &lt;&lt; l;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>二分算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>二分算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dp背包问题练习题</title>
    <link href="/2024/04/07/dp/dp%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <url>/2024/04/07/dp/dp%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="dp背包问题练习题"><a href="#dp背包问题练习题" class="headerlink" title="dp背包问题练习题"></a>dp背包问题练习题</h1><h2 id="货币系统（完全背包）"><a href="#货币系统（完全背包）" class="headerlink" title="货币系统（完全背包）"></a>货币系统（完全背包）</h2><p><strong>tips：</strong></p><ol><li>要将$f[0][0]$ 等特殊的点进行初始化操作</li><li>要将$f[N][N] $设置为 $long long$</li></ol><p><img src="/../../img/1371_%E8%B4%A7%E5%B8%81%E7%B3%BB%E7%BB%9F.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//从前v种货币中选，凑出N元钱的方案的集合的长度</span><br><span class="hljs-comment">//第v种货币不选或者选一个/两个/...</span><br><span class="hljs-comment">//如果第v种货币选一个的方案数相当于从前v-1种货币中选凑出N-v[i]的方案数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br>LL n,m;<br>LL v[N];<br>LL f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; v[i];<br>    &#125;<br>    <span class="hljs-comment">//注意边界值要记得初始化</span><br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-comment">// f[i][j] = f[i-1][j];</span><br>            <span class="hljs-comment">// for(int k=1;k*v[i]&lt;=j;k++)</span><br>            <span class="hljs-comment">//     f[i][j] += f[i-1][j-k*v[i]];</span><br>            f[i][j] = f[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">if</span>(j &gt;= v[i]) f[i][j] += f[i][j - v[i]];<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; f[n][m];<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="包子凑数"><a href="#包子凑数" class="headerlink" title="包子凑数"></a>包子凑数</h2><blockquote><p>问题简化为：输入n个数，求整数域内共有多少个数无法被这n个数通过加法来表示；</p></blockquote><p><strong>tips：</strong></p><ol><li>要将$f[0][0]$ 等特殊的点进行初始化操作</li><li>输入n个数，求整数域内共有多少个数无法被这n个数通过加法来表示；</li><li>当这n个数<strong>最大公因数等于 1 的时候，个数有限</strong></li><li><strong>最大公因数大于 1 的时候，个数无限</strong></li><li>最大不能表示出来的数必定有个上界; 当两个数a,b（当gcd&#x3D;1时），最大不能表示的数为(a-1)(b-1)-1 ; 当数字更多的时候，这个上界必然更小（可选的数字变多了）; 而99和98是100内最大的互质的数，所以这个上界选择10000</li></ol><p><img src="/../../img/%E5%8C%85%E5%AD%90%E5%87%91%E6%95%B0.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//f[i][j]: 从前 i 种蒸笼种选，使得这若干笼中恰好一共有 j 个包子的方案集合</span><br><span class="hljs-comment">//属性：集合是否非空</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,a[<span class="hljs-number">110</span>],f[N][N];<br><span class="hljs-type">int</span> d; <span class="hljs-comment">//所给的几个数的最大公因数</span><br><span class="hljs-comment">//输入n个数，求整数域内共有多少个数无法被这n个数通过加法来表示；</span><br><span class="hljs-comment">//最大公因数等于 1 的时候，个数有限</span><br><span class="hljs-comment">//最大公因数大于 1 的时候，个数无限</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; a[i];<br>        d = <span class="hljs-built_in">gcd</span>(d,a[i]); <span class="hljs-comment">//0和a[i]的最大公因数为 a[i]</span><br>    &#125;<br><br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">1e4</span>;j++)&#123;<br>            f[i][j] = f[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">if</span>(j &gt;= a[i]) f[i][j] = <span class="hljs-built_in">max</span>(f[i][j],f[i][j-a[i]]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//最大不能表示出来的数必定有个上界</span><br>    <span class="hljs-comment">//当两个数a,b（当gcd=1时），最大不能表示的数为(a-1)(b-1)-1</span><br>    <span class="hljs-comment">//当数字更多的时候，这个上界必然更小（可选的数字变多了）</span><br>    <span class="hljs-comment">//而99和98是100内最大的互质的数，所以这个上界选择10000</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">1e4</span>;i++)&#123;<br>        <span class="hljs-comment">//方案数为0 代表其不可表示</span><br>        <span class="hljs-keyword">if</span>(f[n][i] == <span class="hljs-number">0</span>) cnt++;<br>    &#125;<br>    <span class="hljs-comment">//最大公因数大于 1 的时候，个数无限</span><br>    <span class="hljs-keyword">if</span>(d &gt; <span class="hljs-number">1</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;INF&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><blockquote><p>从2022个物品中选择10个物品，并且物品总体积为2022的方案数</p></blockquote><p><img src="/../../img/2022.png"></p><p><strong>tips:</strong></p><ol><li>从 0到N 初始化 $f[i][0][0]$<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=N;i++)&#123;<br>    f[i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2030</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-comment">//从2022个物品中选择10个物品，并且物品总体积为2022</span><br>LL f[N][<span class="hljs-number">15</span>][N]; <span class="hljs-comment">//f[i][j][k]表示从前i个物品中选择j个物品，物体的总体积为k </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> a[N];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=N;i++)&#123;<br>    a[i] = i;<br>    f[i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2022</span>;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">2022</span>;k++)&#123;<br>        <span class="hljs-comment">//如果没有选择第i个物品，那么当前的方案数就是前i-1个物品中选j </span><br>        f[i][j][k] =  f[i<span class="hljs-number">-1</span>][j][k];<br>        <span class="hljs-keyword">if</span>(k &gt;= a[i]) f[i][j][k] += f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>][k-a[i]];<br>      &#125;<br>    &#125;<br>  &#125;<br>  cout &lt;&lt; f[<span class="hljs-number">2022</span>][<span class="hljs-number">10</span>][<span class="hljs-number">2022</span>];<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="砝码称重（0-1背包）"><a href="#砝码称重（0-1背包）" class="headerlink" title="砝码称重（0-1背包）"></a>砝码称重（0-1背包）</h2><blockquote><p>从前i个砝码中选，重量为 j 的方案数</p></blockquote><p><img src="/../../img/%E7%A0%9D%E7%A0%81%E7%A7%B0%E9%87%8D.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//0-1背包</span><br><span class="hljs-comment">//从前i个砝码中选，重量为 j 的方案数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> n,sum;<br><span class="hljs-comment">//如果数据只有一个砝码，重量是1e5，那么当j=1e5，转移时的f[i][j+w[i]]就越界了，所以开了两倍</span><br><span class="hljs-type">int</span> f[N][<span class="hljs-number">2</span>*M];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; w[i];<br>        sum+=w[i];<br>    &#125;<br>    <span class="hljs-comment">//初始化</span><br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=sum;j++)&#123;<br>            <span class="hljs-comment">// bool f[N][2*M]</span><br>            <span class="hljs-comment">// f[i][j]=f[i-1][j]||f[i-1][j+w[i]]||f[i-1][abs(j-w[i])];</span><br>            f[i][j] = f[i<span class="hljs-number">-1</span>][j];<br>            f[i][j] += f[i<span class="hljs-number">-1</span>][<span class="hljs-built_in">abs</span>(j-w[i])]; <span class="hljs-comment">//由于这里加了abs，所以不需要再判断j&gt;=w[i]了</span><br>            f[i][j] += f[i<span class="hljs-number">-1</span>][j+w[i]];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=sum;i++)&#123;<br>        <span class="hljs-keyword">if</span>(f[n][i]) cnt++;<br>    &#125;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a>279. 完全平方数</h2><p><a href="https://leetcode.cn/problems/perfect-squares/description/?envType=problem-list-v2&envId=2cktkvj">279. 完全平方数</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> f[<span class="hljs-number">110</span>][<span class="hljs-number">10010</span>]; <span class="hljs-comment">//d[i][j] 从前i个中选，数量不限制，背包容量等于j的情况下，选择的数量的最小值</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numSquares</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(f)); <span class="hljs-comment">//由于求最小值min，因此要将所有值初始化为最大值</span><br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 由于循环里有f[i-1]，因此i要从1开始循环，所以f[0][0]单独放到循环外面初始化</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i*i&lt;=n;i++)&#123;<br>            f[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//初始化为0</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=n;j++)&#123;<br>                f[i][j] = f[i<span class="hljs-number">-1</span>][j];<br>                <span class="hljs-keyword">if</span>(j &gt;= i*i) f[i][j] = <span class="hljs-built_in">min</span>(f[i][j],f[i][j-i*i]+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> m = <span class="hljs-built_in">pow</span>(n,<span class="hljs-number">1.0</span>/<span class="hljs-number">2</span>);  <span class="hljs-comment">//m为背包数量</span><br>        <span class="hljs-keyword">return</span> f[m][n]; <br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="0-1背包练习题"><a href="#0-1背包练习题" class="headerlink" title="0-1背包练习题"></a>0-1背包练习题</h2><p>一个大集合中要分出 两个集合</p><h3 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a>416. 分割等和子集</h3><ul><li>背包的体积为sum &#x2F; 2</li><li><strong>背包要放入的商品（集合里的元素）重量为 元素的数值，价值也为元素的数值</strong></li><li>背包如何正好装满，说明找到了总和为 sum &#x2F; 2 的子集。</li><li>背包中每一个元素是不可重复放入。</li></ul><h3 id="最后一块石头的重量-II"><a href="#最后一块石头的重量-II" class="headerlink" title="最后一块石头的重量 II"></a>最后一块石头的重量 II</h3><p>尽量让石头分成重量相同的两堆，相撞之后剩下的石头最小，这样就化解成01背包问题了。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>动态规划</category>
      
      <category>背包问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>背包问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性dp练习题</title>
    <link href="/2024/04/07/dp/%E7%BA%BF%E6%80%A7dp%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <url>/2024/04/07/dp/%E7%BA%BF%E6%80%A7dp%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="线性dp练习题"><a href="#线性dp练习题" class="headerlink" title="线性dp练习题"></a>线性dp练习题</h1><h2 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h2><p>题目链接：<a href="https://www.acwing.com/problem/content/description/900/">数字三角形</a></p><p><img src="/../../img/900_%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2.png"></p><p><strong>tips</strong></p><ol><li>因为有些值为负数，因此要将所有$f[i][j]$初始为负无穷<br>如果初始化为0会导致部分$f[i][j]$的值大于 本不应该大于 的f$f[i-1][j-1]$</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N][N],f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>            cin &gt;&gt; a[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 因为有些值为负数，因此要将所有f[i][j]初始为负无穷</span><br>    <span class="hljs-comment">//如果初始化为0会导致部分f[i][j]的值大于 本不应该大于 的f[i-1][j-1]</span><br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-0x3f</span>,<span class="hljs-built_in">sizeof</span>(f));<br>    <br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i<span class="hljs-number">-1</span>][j] + a[i][j],f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> max_v = INT_MIN;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        max_v = <span class="hljs-built_in">max</span>(max_v,f[n][j]);<br>    &#125;<br>    cout &lt;&lt; max_v;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="松散子序列"><a href="#松散子序列" class="headerlink" title="松散子序列"></a>松散子序列</h2><p>题目链接：<a href="https://www.acwing.com/problem/content/5409/">松散子序列</a></p><p><img src="/../../img/%E6%9D%BE%E6%95%A3%E5%AD%90%E5%BA%8F%E5%88%97.png"></p><p><strong>dp 思路：</strong><br>以下标 $i$ (从1开始)结尾的松散子序列长度的最大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">char</span> s[N];<br>string str;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; str;<br>    <span class="hljs-type">int</span> n = str.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        s[i] = str[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    f[<span class="hljs-number">1</span>] = s[<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">0</span>) f[i] = <span class="hljs-built_in">max</span>(f[i],f[i<span class="hljs-number">-1</span>]);<br>        <span class="hljs-keyword">if</span>(i<span class="hljs-number">-2</span>&gt;=<span class="hljs-number">0</span>) f[i] = <span class="hljs-built_in">max</span>(f[i],f[i<span class="hljs-number">-2</span>] + s[i]-<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">// for(int i=1;i&lt;=n;i++)&#123;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; f[i] &lt;&lt; &quot;\n&quot;;</span><br>    <span class="hljs-comment">// &#125;</span><br>    cout &lt;&lt; f[n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>动态规划</category>
      
      <category>线性dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>线性dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图的最短路问题</title>
    <link href="/2024/04/07/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    <url>/2024/04/07/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="图的最短路问题"><a href="#图的最短路问题" class="headerlink" title="图的最短路问题"></a>图的最短路问题</h1><p><img src="/../../img/%E5%9B%BE%E6%9C%80%E7%9F%AD%E8%B7%AF.png"></p><h2 id="单源最短路"><a href="#单源最短路" class="headerlink" title="单源最短路"></a>单源最短路</h2><h3 id="朴素Dijkstra算法"><a href="#朴素Dijkstra算法" class="headerlink" title="朴素Dijkstra算法"></a>朴素Dijkstra算法</h3><p><strong>核心思想：</strong></p><ol><li><strong>先确定最短距离点</strong></li><li><strong>然后用该点去更新其他点的最短距离</strong></li></ol><blockquote><p>适合稠密图<br>变量：dist[N] （距离源点的距离数组） , st[N]（某个点是否已经被更新为距离最短的点的集合中的状态数组）<br>重边与自环：在min中会循环找出最短距离的边<br>算法步骤：</p></blockquote><ol><li>初始化：dist 初始化为正无穷（0x3f）<code>memset(dist,0x3f,sizeof(dist));</code> st 初始化为0</li><li>更新已经得到最短距离的所有点所在集合；更新方法：遍历距离数组的所有点，将其中最小距离的点放入集合。</li><li>根据第二步最新得到那个点 t ，去更新其他点的最短距离<br><code>d[j] = min(d[j],d[t] + t-&gt;j的距离)</code></li></ol><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/1906644/">Dijkstra求最短路图解 </a></p><p><strong>邻接矩阵版</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>; <span class="hljs-comment">//数据范围（最大输入节点数）</span><br><br><span class="hljs-type">int</span> n,m; <span class="hljs-comment">// 节点/边数</span><br><span class="hljs-type">int</span> g[N][N]; <span class="hljs-comment">// 图的邻接矩阵（稠密图用这个） ，算法复杂度为n^2</span><br><span class="hljs-type">int</span> dist[N]; <span class="hljs-comment">//用于记录每一个点距离第一个点的距离</span><br><span class="hljs-type">bool</span> st[N]; <span class="hljs-comment">//已经确定了最短路径的点为true</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(dist)); <span class="hljs-comment">//将距离矩阵初始化为正无穷</span><br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 题目要求 求出 1号点到 n号点的最短距离，第一个点到自身的距离为0</span><br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;   <span class="hljs-comment">//有n个点所以要进行n次 迭代</span><br>    <br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;         <span class="hljs-comment">//t存储着下方某轮次循环中找出的距离源点距离最近的点</span><br>        <br>        <span class="hljs-comment">//找到路径最短的点：</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;  <span class="hljs-comment">//此时的j代表从1号点开始,该处循环是找出此时距离源点距离最近的点</span><br>            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t==<span class="hljs-number">-1</span> || dist[t]&gt;dist[j]))&#123;<br>                t = j;<br>            &#125;<br>        &#125;<br>        <br>        st[t] = <span class="hljs-literal">true</span>; <span class="hljs-comment">//t的最短路径确定好了</span><br>        <br>        <span class="hljs-comment">//对每个点的最短路径更新：</span><br>        <span class="hljs-comment">//当有新的被确定最短路径的点加入到集合中时，</span><br>        <span class="hljs-comment">//要对所有点（但实际只有剩余未被确定最短路径的点会被更新，因为最短路径的确定是由短到长的）距离源点的最短距离进行更新。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;    <span class="hljs-comment">//此处j&lt;=n 必须要有等于号 //依次更新每个点所到相邻的点路径值</span><br>            <span class="hljs-keyword">if</span>(!st[j])&#123;     <span class="hljs-comment">//跳过已经确定为最短路径的点</span><br>                dist[j]=<span class="hljs-built_in">min</span>(dist[j],dist[t]+g[t][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(g));<span class="hljs-comment">//初始化图（邻接矩阵）</span><br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> a,b,c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        g[a][b] = <span class="hljs-built_in">min</span>(g[a][b],c); <span class="hljs-comment">//建图（邻接矩阵） ；当有重边时更新邻接矩阵中的权重为较小的那个权重。</span><br>    &#125;<br>    <br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">dijkstra</span>();<br>    <br>    cout &lt;&lt; t &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>邻接表版本</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N],e[M],ne[M],w[M],idx;<br><span class="hljs-type">int</span> d[N],st[N];<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<span class="hljs-comment">//堆里存储距离和节点编号</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> v)</span></span>&#123;<br>    e[idx] = b;<br>    w[idx] = v;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(d));<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<span class="hljs-comment">//小根堆</span><br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);<span class="hljs-comment">//插入距离和节点编号</span><br>    <span class="hljs-comment">//遍历n次，每次找出一个点的最短距离</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>; <span class="hljs-comment">//需要被放入集合的点t</span><br><br>        <span class="hljs-comment">//此时的j代表从1号点开始,该处循环是找出此时距离源点距离最近的点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || d[j] &lt; d[t]))&#123;<br>                t = j;<br>            &#125;<br>        &#125;<br>        st[t] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//更新未确定点的最短距离</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=h[t];k!=<span class="hljs-number">-1</span>;k=ne[k])&#123;<br>            <span class="hljs-type">int</span> j = e[k];<br>            <span class="hljs-keyword">if</span>(st[j]) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果该点已经被确定为了最短点集合中了就没必要再去更新它了</span><br>            d[j] = <span class="hljs-built_in">min</span>(d[j],d[t] + w[k]);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> a,b,v;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; v;<br>        <span class="hljs-built_in">add</span>(a,b,v);<br>    &#125;<br>    <span class="hljs-built_in">dijkstra</span>(); <span class="hljs-comment">//找出所有点到源点的距离</span><br>    <span class="hljs-keyword">if</span>(d[n] == <span class="hljs-number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; d[n];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆优化Dijkstra算法"><a href="#堆优化Dijkstra算法" class="headerlink" title="堆优化Dijkstra算法"></a>堆优化Dijkstra算法</h3><blockquote><p>适合稀疏图<br>使用小根堆：<code>priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap</code></p></blockquote><p>tips:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2</span>*<span class="hljs-number">1e5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">3</span>*<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N],e[M],ne[M],w[M],idx;<br><span class="hljs-type">int</span> d[N],st[N];<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<span class="hljs-comment">//堆里存储距离和节点编号</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> v)</span></span>&#123;<br>    e[idx] = b;<br>    w[idx] = v;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(d));<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<span class="hljs-comment">//小根堆</span><br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);<span class="hljs-comment">//插入距离和节点编号</span><br>    <span class="hljs-comment">//此处有while循环</span><br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>())&#123;<br>        PII t = heap.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-comment">//距离源点的距离dist，其节点编号为index</span><br>        <span class="hljs-type">int</span> dist = t.first; <span class="hljs-type">int</span> index = t.second;<br>        heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">//如果该点已经被放入到最短路径集合中了的话就可以continue</span><br>        <span class="hljs-keyword">if</span>(st[index]) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//必不可少的剪枝，防止超时</span><br>        st[index] = <span class="hljs-literal">true</span>;<br>            <br>        <span class="hljs-comment">//更新index所指向的节点距离</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=h[index];k!=<span class="hljs-number">-1</span>;k=ne[k])&#123;<br>            <span class="hljs-type">int</span> j = e[k];<br>            d[j] = <span class="hljs-built_in">min</span>(d[j],dist + w[k]);<br>            heap.<span class="hljs-built_in">push</span>(&#123;d[j],j&#125;);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> a,b,v;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; v;<br>        <span class="hljs-built_in">add</span>(a,b,v);<br>    &#125;<br>    <span class="hljs-built_in">dijkstra</span>(); <span class="hljs-comment">//找出所有点到源点的距离</span><br>    <span class="hljs-keyword">if</span>(d[n] == <span class="hljs-number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; d[n];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="bellman-ford"><a href="#bellman-ford" class="headerlink" title="bellman-ford"></a>bellman-ford</h2><p>思路：对 所有边 进行 n-1次松弛 操作</p><p><strong>松弛：</strong><br>遍历所有边，更新 边的终节点 到 起点 的最短距离<br><code>if (minDist[B] &gt; minDist[A] + value) minDist[B] = minDist[A] + value</code></p><p><strong>为什么是n-1次操作：</strong></p><p>第一次松弛 能得到与起点 一条边相连的节点的最短路径<br>第二次松弛 能得到与起点 两条边相连的节点的最短路径<br>……<br>第n-1次松弛  能得到与起点 n-1条边相连的节点的最短路径(n个节点，n-1条边即可相连)</p><h3 id="判断是否有负权回路"><a href="#判断是否有负权回路" class="headerlink" title="判断是否有负权回路"></a>判断是否有负权回路</h3><p>在n-1次松弛的基础上，再多松弛一次，看minDist数组 是否发生变化。如果变化了就有负权回路</p><h3 id="有边数限制的bellman-ford算法"><a href="#有边数限制的bellman-ford算法" class="headerlink" title="有边数限制的bellman-ford算法"></a>有边数限制的bellman-ford算法</h3><p>要算从 1 号点到 n 号点的<strong>最多经过 k 条边</strong>的最短距离</p><p>bellman_ford 标准写法是松弛 n-1 次，此时就<strong>松弛 k 次</strong>就好</p><p>在最多经过 k 个城市的条件下，从城市 src 到城市 dst 的最低运输成本。此时是<strong>松弛 k+1 次</strong>（因为经过k个城市意味着会经过k+1条边）</p><p><strong>要使用复制数组的关键在于两个因素：</strong></p><ol><li>图中可以有负权回路，说明只要多做松弛，结果是会变的。</li><li>要求最多经过k个节点，对松弛次数是有限制的。</li></ol><p>以上两种情况需要使用复制数组</p><p>acwing流程:</p><ol><li>初始化（结构体数组，d数组设置为无穷大）</li><li>循环k次（边数限制为k）</li><li>每次循环时，对所有的边进行更新操作（要先进行<strong>数组备份</strong>，使用备份的数组进行更新，防止出现串联操作从而<strong>导致实际最短路走过的长度大于k</strong>）</li><li>判断是否有路径（大于 0x3f3f3f3f &#x2F; 2）即为无路径（起点和终点不连通，但终点和别的点连通）</li></ol><p><a href="https://www.acwing.com/solution/content/17551/">有边数限制的最短路</a></p><blockquote><p>适用于有负权边的最短路（有边数限制的最短路）</p></blockquote><p><strong>注意事项</strong></p><ol><li>有边数限制时，要注意防止一次松弛前进多步</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//防止一次松弛前进多条边</span><br><span class="hljs-built_in">memcpy</span>(cpy,d,<span class="hljs-built_in">sizeof</span>(d));<br><br><span class="hljs-comment">//遍历m条边</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>    <span class="hljs-type">int</span> a = u[i].a; <span class="hljs-type">int</span> b = u[i].b; <span class="hljs-type">int</span> w = u[i].w;<br>    <span class="hljs-keyword">if</span>(cpy[a] + w &lt; d[b])&#123;<br>        d[b] = cpy[a] + w; <span class="hljs-comment">//比较的时候用复制的数组，更新的时候才用原数组</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>由于存在负权边，返回值长度可能恰好是 -1 的情况下会报错<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>    <span class="hljs-keyword">if</span>(d[n] &gt; <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">//不能这么写，因为有可能路径长度恰好是 -1</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> d[n];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>    <span class="hljs-type">int</span> res = <span class="hljs-built_in">bellman_ford</span>();<br>    <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    <span class="hljs-type">int</span> a,b,w;    <br>&#125;u[M];<br><br><span class="hljs-type">int</span> n,m,k;<br><span class="hljs-type">int</span> d[N],cpy[N];<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bellman</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(d));<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;  <span class="hljs-comment">//起点为节点1， 起点到起点的距离为0，所以 minDist[1] 初始化为0</span><br>    <br>    <span class="hljs-comment">//k次松弛</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>        <br>        <span class="hljs-comment">//防止一次松弛前进多条边</span><br>        <span class="hljs-built_in">memcpy</span>(cpy,d,<span class="hljs-built_in">sizeof</span>(d));<br>        <br>        <span class="hljs-comment">//遍历m条边</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;i++)&#123;<br>            <span class="hljs-type">int</span> a = u[j].a; <span class="hljs-type">int</span> b = u[j].b; <span class="hljs-type">int</span> w = u[j].w;<br>            <span class="hljs-keyword">if</span>(cpy[a] + w &lt; d[b])&#123;<br>                d[b] = cpy[a] + w; <span class="hljs-comment">//比较的时候用复制的数组，更新的时候才用原数组</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br><br>    <span class="hljs-comment">//先存储要进行遍历的边</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-type">int</span> a,b,v;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; v;<br>        u[i] = &#123;a,b,v&#125;;<br>    &#125;<br>    <br>    <span class="hljs-built_in">bellman</span>();<br>    <span class="hljs-keyword">if</span>(d[n] &gt; <span class="hljs-number">1e9</span>) cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span>; <span class="hljs-comment">//d[n]没被更新 代表 没有路径</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; d[n];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="spfa算法"><a href="#spfa算法" class="headerlink" title="spfa算法"></a>spfa算法</h2><p><strong>dijkstra 和 spfa算法的区别</strong><br>dijkstra是基于贪心的思想，每次选择最近的点去更新其它点，过后就不再访问。<br>而在spfa算法中，只要有某个点的距离被更新了，就把它加到队列中，去更新其它点，所有每个点有被重复加入队列的可能。</p><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><p><strong>动态规划思想</strong></p><p><code>g[i][j] = min(g[i][j],g[i][k] + g[k][j]);</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">210</span>;<br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-type">int</span> n,m,k;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>                g[i][j] = <span class="hljs-built_in">min</span>(g[i][j],g[i][k] + g[k][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(g));<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-type">int</span> x,y,z;<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;<br>        <br>        <span class="hljs-comment">//因为有重边，所以要用min取最小值</span><br>        g[x][y] = <span class="hljs-built_in">min</span>(g[x][y],z);    <br>    &#125;<br><span class="hljs-comment">/* 这三条边就是重边</span><br><span class="hljs-comment">3 4 5</span><br><span class="hljs-comment">3 4 6</span><br><span class="hljs-comment">3 4 7</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-built_in">floyd</span>();<br>    <br>    <span class="hljs-keyword">while</span>(k--)&#123;<br>        <span class="hljs-type">int</span> x,y;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        <br>        <span class="hljs-keyword">if</span>(x == y)&#123; <span class="hljs-comment">//起点和终点相同是距离为0</span><br>            cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;    <br>        <span class="hljs-keyword">else</span>&#123;<br>        <br>            <span class="hljs-keyword">if</span>(g[x][y] &gt; <span class="hljs-number">1e9</span>)&#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                cout &lt;&lt; g[x][y] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>多源最短路算法</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>map</title>
    <link href="/2024/04/06/stl/map/"/>
    <url>/2024/04/06/stl/map/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>拓扑序列</title>
    <link href="/2024/04/05/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/"/>
    <url>/2024/04/05/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="拓扑序列"><a href="#拓扑序列" class="headerlink" title="拓扑序列"></a>拓扑序列</h1><blockquote><p>定义：拓扑序列是图中的顶点的线性排序，使得从顶点u到顶点v的每个有向边u-&gt;v ,在拓扑序列中u都在v前面</p></blockquote><ol><li><p>不是所有的有向图都是有拓扑序的，只有<strong>有向无环图才有拓扑序</strong>，所以有向无环图又被称为拓扑图</p></li><li><p>有向无环图的<strong>拓扑序不是唯一的</strong></p></li></ol><h2 id="拓扑序列的求法"><a href="#拓扑序列的求法" class="headerlink" title="拓扑序列的求法"></a>拓扑序列的求法</h2><blockquote><p>对于拓扑序列而言，入度为0的点一定是排在前面的<br>对一个图BFS一遍，BFS过程中更新每个点的入度，如果一个点的入度为0，那么就将其加入拓扑序，并且删除其与后继结点的所有边。</p></blockquote><p>1.入度的计算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">在建立邻接表时计算每个节点的入度<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    e[idx] = b;<br>    d[b] ++; <span class="hljs-comment">//节点b的入度加1</span><br>    <br>    ne[idx] = h[a];<br>    h[a] = idx;<br>    idx ++;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>得到拓扑序列<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">//先将目前入度为0的节点入队</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(d[i] == <span class="hljs-number">0</span>)&#123;<br>            q[++tt] = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;<br>        <span class="hljs-type">int</span> t = q[hh];<br>        hh++;<br>        <span class="hljs-comment">//删除由节点t所指出的边（并不是真的删除，而是将节点入度减1）</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[t];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            d[j] --; <span class="hljs-comment">//该边的终点入度减1</span><br>            <span class="hljs-keyword">if</span>(d[j] == <span class="hljs-number">0</span>)&#123;<br>                q[++tt] = j; <span class="hljs-comment">//让入度为0的节点入队</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//判断是不是拓扑序列</span><br>    <span class="hljs-comment">//如果所有点都入队了（所有点的入度都为0）就是拓扑序列，反之就不是</span><br>    <span class="hljs-keyword">return</span> tt == n<span class="hljs-number">-1</span>; <span class="hljs-comment">//tt初始化时为-1，tt代表节点下标从0开始，因此是与n-1对比</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>判断是不是拓扑序列</strong><br>看队尾指针tt的值 加1 （下标从0开始）是不是等于节点个数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//判断是不是拓扑序列</span><br><span class="hljs-comment">//如果所有点都入队了（所有点的入度都为0）就是拓扑序列，反之就不是</span><br><span class="hljs-keyword">return</span> tt == n<span class="hljs-number">-1</span>; <span class="hljs-comment">//tt初始化时为-1，tt代表节点下标从0开始，因此是与n-1对比</span><br><br></code></pre></td></tr></table></figure></li><li><strong>输出拓扑序列</strong><br>由于出队只是将指针向后移动，但前面入队的元素还在队列数组中<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    cout &lt;&lt; q[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="数组模拟链表"><a href="#数组模拟链表" class="headerlink" title="数组模拟链表"></a>数组模拟链表</h2><ol><li>所需变量<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> e[N],ne[N],idx<br><span class="hljs-comment">// head 代表头指针</span><br><span class="hljs-comment">// e[N] 代表节点元素的值</span><br><span class="hljs-comment">// ne[N] 代表节点元素的next指针，即其所指向的下一个节点的下标</span><br><span class="hljs-comment">// idx 代表目前已经已经用到哪个节点了</span><br><br></code></pre></td></tr></table></figure></li><li>初始化操作</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">head = <span class="hljs-number">-1</span>; <span class="hljs-comment">//初始时头指针指向NULL</span><br>idx = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>将x插到头节点</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">e[idx] = x;<br>ne[idx] = head;<br>head = idx;<br>idx++;<br></code></pre></td></tr></table></figure><ol start="4"><li>将x插到下标是k的点后面</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">e[idx] = x;<br>ne[idx] = ne[k];<br>ne[k] = idx;<br>idx++;<br></code></pre></td></tr></table></figure><ol start="5"><li>删除<strong>下标为k</strong>的数（即为第k-1个插入的数）后面的那一个节点</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">ne[k] = ne[ne[k]];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树和图的存储和遍历</title>
    <link href="/2024/04/04/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E5%92%8C%E9%81%8D%E5%8E%86/"/>
    <url>/2024/04/04/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E5%92%8C%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="树和图的存储和遍历"><a href="#树和图的存储和遍历" class="headerlink" title="树和图的存储和遍历"></a>树和图的存储和遍历</h1><h2 id="树和图的存储"><a href="#树和图的存储" class="headerlink" title="树和图的存储"></a>树和图的存储</h2><ol><li>树是一种特殊的图（无环连通图），因此可以把树当作图来处理</li><li>图分为有向图(a-&gt;b)和无向图(a-b),但我们在算法题中如果<strong>遇到无向图，就直接（a-&gt;b）和（b-&gt;a）都建立</strong>，因此无向图就是特殊的有向图。</li><li>存储方式</li></ol><p>（1）邻接矩阵 g[N][N]</p><ul><li>g[a][b] &#x3D; 0 代表 节点a-&gt;b没有边 </li><li>g[a][b] &#x3D; 1 代表 a-&gt;b有边 </li><li>g[b][a] &#x3D; 1 代表 b-&gt;a有边</li><li>g[a][b] &#x3D; w 代表 a-&gt;b 该边的权重或者长度为w</li><li>空间复杂度为O(n²)，适合存储稠密图</li></ul><p>（2）邻接表 </p><blockquote><p>我们可以想一下对于任意一个结点u, 需要记录邻边的哪些信息。</p><p>这些信息应该包括这条邻边的终点，权重，以及下一条邻边的编号。</p></blockquote><ul><li>每个点上都有一个单链表，存的是这个点可以走到哪些点</li><li><strong>h数组的下标为结点的编号，e,ne数组的下标为边的编号，e数组的值为该边的终点，idx为边的编号</strong></li><li>邻接表初始化(<strong>先将h数组都置为-1再插入节点</strong>)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">  <span class="hljs-comment">// N代表点的个数，M代表边的条数</span><br>  <span class="hljs-comment">// n个结点的树最多有n - 1条边，如果考虑无向边需要开两倍的n - 1来存储</span><br><span class="hljs-type">int</span> h[N],e[<span class="hljs-number">2</span>*N],ne[<span class="hljs-number">2</span>*N],idx; <span class="hljs-comment">//有n个单链表就有n个头节点</span><br><span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h)); <span class="hljs-comment">//所有头节点都指向-1</span><br>  <span class="hljs-comment">// h[i]：第 i 个节点的第一条邻边的 idx</span><br>  <span class="hljs-comment">// e[idx]：存储 idx 这条边的终点，也就是与第 i 个节点相连的某一个点</span><br>  <span class="hljs-comment">// ne[idx]：存储 与第 idx 条边 同起点的 下一条边的 idx，也就是邻接表中的下一个节点</span><br>  <span class="hljs-comment">// idx：用于标识每条边的下标，存的是边的编号</span><br></code></pre></td></tr></table></figure></li><li>邻接表插入元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//有一条a-&gt;b的边 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a]; <span class="hljs-comment">// 新插入的边是插到链表头（头插法）</span><br>    h[a] = idx; <span class="hljs-comment">//更新链表头</span><br>    idx++;<br>&#125;<br><span class="hljs-comment">//树的边数等于节点数减1</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-built_in">add</span>(a,b); <span class="hljs-built_in">add</span>(b,a); <span class="hljs-comment">//无向图</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="树和图的遍历"><a href="#树和图的遍历" class="headerlink" title="树和图的遍历"></a>树和图的遍历</h2><p><strong>遍历前要记得将头指针数组设置为 -1</strong></p><blockquote><p>对于树和图的遍历，不管是DFS还是BFS，因为每个点只会被遍历一次，所以时间复杂度与点和边的数量成线性关系，为<strong>O(n + m)</strong></p></blockquote><p><strong>dfs 和 bfs 的不同</strong><br><strong>不同：</strong></p><ol><li><p>参数上：</p><ul><li>void dfs(int u) &#x2F;&#x2F;u代表层数  调用: dfs(1);</li><li>int bfs() &#x2F;&#x2F;没有参数  调用：cout &lt;&lt; bfs(); &#x2F;&#x2F;在函数里面会返回需要的答案</li></ul></li><li><p>变量上<br>bfs 多了一个距离数组，初始时要将其置为-1 <code>memset(d,-1,sizeof(d))</code><br>dfs 用st[N] 当作状态数组 ，bfs可以使用距离数组 d 来充当状态数组 ; </p></li><li><p>代码结构<br>dfs: 递归结构<br>bfs: <strong>初始化 + while(队列非空)的循环</strong></p></li></ol><p><strong>相同：</strong></p><ol><li>初始化上<br>要在开始时将当前正在访问的点设置为true</li></ol><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><p>从节点编号1开始遍历，沿着节点的邻接表一路深搜</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> st[N]; <span class="hljs-comment">//状态数组,标记某个点是否被遍历到</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    st[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//遍历点u的所有出边</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>        <span class="hljs-type">int</span> b = e[i]; <span class="hljs-comment">//b是该边终点</span><br>        <span class="hljs-keyword">if</span>(!st[b])&#123;<br>            <span class="hljs-built_in">dfs</span>(b);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>例题：<a href="https://www.acwing.com/problem/content/description/4965/">景区导游</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//https://www.acwing.com/file_system/file/content/whole/index/content/11514015/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,k,a[N];<br><span class="hljs-type">int</span> h[N],e[<span class="hljs-number">2</span>*N],ne[<span class="hljs-number">2</span>*N],idx;<br><span class="hljs-type">int</span> w[<span class="hljs-number">2</span>*N];<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-type">int</span> s[N]; <span class="hljs-comment">//前缀和数组</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> t)</span><span class="hljs-comment">//表示u-&gt;v 距离是t 把v添加到u里去</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u]; i!=<span class="hljs-number">-1</span>; i=ne[i]) &#123;<span class="hljs-comment">//这里要判断一下有没有边重复加</span><br>        <span class="hljs-keyword">if</span>(e[i]==v) <span class="hljs-keyword">return</span>; <br>    &#125;<br>    e[idx]=v;ne[idx]=h[u];h[u]=idx;w[idx]=t;idx++;<span class="hljs-comment">//idx是v的下标 w[idx]表示u-&gt;v的距离</span><br>&#125;<br><span class="hljs-comment">//求u-&gt;v的距离 u起点 v终点 d是起点到当前点的距离</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> d)</span></span>&#123;<br>    st[u] = <span class="hljs-literal">true</span>; <span class="hljs-comment">//先将起点设置为访问过了</span><br>    <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span> d;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span>(!st[j])&#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">//不能d += w[i] 再dfs(j,v,j,d)</span><br>            <span class="hljs-type">int</span> ret = <span class="hljs-built_in">dfs</span>(j,v,d+w[i]); <span class="hljs-comment">//更新起点</span><br>            <span class="hljs-keyword">if</span>(ret != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ret;<br>            st[j] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-type">int</span> a,b,v;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; v;<br>        <span class="hljs-built_in">add</span>(a,b,v); <span class="hljs-built_in">add</span>(b,a,v);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;k;i++)&#123;<br>        <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> st);<span class="hljs-comment">//每次dfs前都要清空一下st数组</span><br>        s[i] = s[i<span class="hljs-number">-1</span>] + <span class="hljs-built_in">dfs</span>(a[i],a[i+<span class="hljs-number">1</span>],<span class="hljs-number">0</span>);<br>        cout &lt;&lt; s[i] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><p>距离从小到大来遍历，取第一次遍历到的结果（每个点只遍历一次）。<br>遍历框架：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++">队列初始化<br><span class="hljs-keyword">while</span>(queue 不空)<br>&#123;<br>    取出队头<br>    拓展队头所有邻点<span class="hljs-function">x</span><br><span class="hljs-function">    <span class="hljs-title">if</span><span class="hljs-params">(x未遍历)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x入队<br>        d[x]=d[队头]+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> d[n];<br></code></pre></td></tr></table></figure><p>数组模拟队列常见操作 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">300</span> <span class="hljs-comment">//这个地方要设置得大一点才行，因为队列在不断出队入队</span><br>PII q[N];  <span class="hljs-comment">//这个地方要设置得大一点才行，因为队列在不断出队入队</span><br><br><br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><span class="hljs-comment">//入队</span><br>q[++tt] = &#123;&#125; ; q.<span class="hljs-built_in">push</span>()<br><span class="hljs-comment">//取队头</span><br>t = q[hh] ; q.<span class="hljs-built_in">top</span>()<br><span class="hljs-comment">//出队</span><br>hh++ ; q.<span class="hljs-built_in">pop</span>()<br><span class="hljs-comment">//判断是否非空</span><br><span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;&#125; ; q.<span class="hljs-built_in">empty</span>()<br></code></pre></td></tr></table></figure><p>例题：<a href="https://www.acwing.com/problem/content/description/849/">图中点的层次</a><br>每条边长度都为1的最短路问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//要把距离 数组初始为-1</span><br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(d));<br>    <span class="hljs-comment">//队列初始化</span><br>    <span class="hljs-type">int</span> hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<br>    q[++tt] = <span class="hljs-number">1</span>;<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(hh&lt;=tt)&#123;<br>        <span class="hljs-type">int</span> t = q[hh];<br>        hh++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[t];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>            <span class="hljs-type">int</span> j = e[i]; <span class="hljs-comment">//编号为i的边 的终点</span><br><br>            <span class="hljs-comment">//一旦某个点被访问了就不会再访问了，确保该点的最短距离不会被之前较长路径的距离所覆盖</span><br>            <span class="hljs-keyword">if</span>(d[j] == <span class="hljs-number">-1</span>)&#123;<br><br>                q[++tt] = j;<br>                <span class="hljs-comment">// pre[j] = t;</span><br>                d[j] = d[t] + <span class="hljs-number">1</span>; <span class="hljs-comment">//此处是d[t] + 1 ,不是d[i] + 1</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// int x = n;</span><br>    <span class="hljs-comment">// while(x!=1)&#123;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; x &lt;&lt; &quot;\n&quot;;</span><br>    <span class="hljs-comment">//     x = pre[x];</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">return</span> d[n];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><blockquote><p>定义：在有根树上，两点的祖先有公共部分，这些点叫做他们的公共祖先，而其中深度最深的点，叫作它们的最近公共祖先（LCA ，Lowest Common Ancestors）</p></blockquote><p>求树上两个点距离的时候，可以预处理出每个点到根节点的距离，然后两点间最短距离公式为：dist[a-&gt;b] &#x3D; dist[a]+dist[b]-2*dist[p]</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/2024/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/"/>
    <url>/2024/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><blockquote><p>元素先进先出，<strong>从队尾入队，从队首出队</strong>。只允许在最后面添加元素，只允许在最前面删除元素。</p></blockquote><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><ol><li>初始化队列<br><code>queue&lt;int&gt; q</code></li><li>返回队首和队尾元素<br><code>q.front()</code> <code>q.back()</code></li><li>尾部增加和删除一个元素<br> <code>q.push()</code> <code>q.pop()</code></li><li>队列长度和是否为空<br><code>q.size()</code> <code>q.empty</code></li></ol><h2 id="队列模拟"><a href="#队列模拟" class="headerlink" title="队列模拟"></a>队列模拟</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> q[N]; <span class="hljs-comment">//队列数组</span><br><span class="hljs-comment">//队列区间为[hh,tt]</span><br><span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>; tt = <span class="hljs-number">-1</span>; <span class="hljs-comment">//队头和队尾指针</span><br><br>初始时tt = <span class="hljs-number">-1</span>,队列为空，当 ++tt 之后 tt = hh = <span class="hljs-number">0</span>,给q[<span class="hljs-number">0</span>]赋值，hh指向该队头元素<br><br>之后新元素入队，++tt往后移，元素出队，hh++,队头指针往后移。队列区间为[hh,tt]<br><br>q[++tt] = &#123;&#125; <span class="hljs-comment">//入队 </span><br><br>hh ++ <span class="hljs-comment">//出队，队首向后移动一格（本来指向队头元素，）</span><br><br>q[hh] <span class="hljs-comment">//取队头元素</span><br><br><span class="hljs-comment">//是否为空的判断，因为队列区间为[hh,tt],当hh &lt;= tt 时代表队列中有元素为非空</span><br><span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="priority-queue（优先队列）"><a href="#priority-queue（优先队列）" class="headerlink" title="priority_queue（优先队列）"></a>priority_queue（优先队列）</h2><blockquote><p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。底层是通过堆（小根堆、大根堆）来实现的。</p></blockquote><ol><li>初始化</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++">priority_queue&lt;<span class="hljs-type">int</span>&gt; q; <span class="hljs-comment">//默认是大根堆，每次取出的元素是队列中的最大值</span><br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,great&lt;<span class="hljs-type">int</span>&gt;&gt; q;<br><br>第一个参数：就是优先队列中存储的数据类型<br>第二个参数：vector&lt;<span class="hljs-type">int</span>&gt; 是用来承载底层数据结构堆的容器，若优先队列中存放的是<span class="hljs-type">double</span>型数据，就要填vector&lt; <span class="hljs-type">double</span> &gt;，总之存的是什么类型的数据，就相应的填写对应类型。同时也要改动第三个参数里面的对应类型。<br><br>less&lt;<span class="hljs-type">int</span>&gt; 表示数字大的优先级大，堆顶为最大的数字<br>greater&lt;<span class="hljs-type">int</span>&gt;表示数字小的优先级大，堆顶为最小的数字<br><br>如果存储pair<br>默认先对pair的first进行降序排序，然后再对second降序排序<br></code></pre></td></tr></table></figure><ol start="2"><li>访问队头元素 ： <code>q.top()</code><br>优先队列只能通过top()访问队首元素（优先级最高的元素）</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>数据结构</category>
      
      <category>队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dfs(爆搜)</title>
    <link href="/2024/04/03/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/dfs-%E7%88%86%E6%90%9C/"/>
    <url>/2024/04/03/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/dfs-%E7%88%86%E6%90%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="dfs-爆搜-和-全排列"><a href="#dfs-爆搜-和-全排列" class="headerlink" title="dfs(爆搜) 和 全排列"></a>dfs(爆搜) 和 全排列</h1><h2 id="dfs递归"><a href="#dfs递归" class="headerlink" title="dfs递归"></a>dfs递归</h2><p><a href="https://www.acwing.com/solution/content/87387/" title="图解">图解</a></p><ol><li>递归就是把一个大问题变成中问题再变成一个很小的问题进行解决</li><li>如果在分解问题时，可能出现一个大问题包括很多个中问题的情况，此时就要在递归外面加上for循环</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> path[N];<br><span class="hljs-type">int</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    <br>    <span class="hljs-keyword">if</span>(u&gt;n)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            cout &lt;&lt; path[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//空位上可以选择的数字为:1 ~ n</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!st[i])&#123;<br>            path[u] = i; <span class="hljs-comment">//此处为u，代表第u个位置需要填</span><br>            st[i] = <span class="hljs-number">1</span>;<br>            <br>            <span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">/*dfs(u+1)展开： </span><br><span class="hljs-comment">            if(u==n)&#123;&#125; </span><br><span class="hljs-comment">            for(int i=1;i&lt;=n;++)&#123;</span><br><span class="hljs-comment">            //由于这里有个状态数组，i=1已经被访问过了，所以会把没访问过的 i=2 填入path数组中（真妙！） </span><br><span class="hljs-comment">        if(!state[i])&#123;</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">dfs(u+1)</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">            */</span><br>            st[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="next-permutation-函数"><a href="#next-permutation-函数" class="headerlink" title="next_permutation() 函数"></a>next_permutation() 函数</h2><blockquote><p>全排列函数 next_permutation(num,num+n) 是对数组num中的前n个元素进行全排列，同时并改变num数组的值。</p></blockquote><ol><li><p>另外，需要强调的是，next_permutation（）在<strong>使用前需要对欲排列数组按升序排序</strong>(此时才能找全)，否则只能找出该序列之后的全排列数</p></li><li><p>next_permutation（node,node+n,cmp）可以对结构体num按照自定义的排序方式cmp进行排序</p></li><li><p>常用方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">do</span>&#123;<br><br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">next_permutation</span>(a,a+n));<br><br></code></pre></td></tr></table></figure></li></ol><p><strong>dfs例题：</strong><br><a href="https://www.acwing.com/problem/content/description/4960/" title="飞机降落问题">飞机降落问题</a></p><p>使用全排列函数对所有情况进行枚举，判断在所有的情况下是否能够满足条件。<br>使用方式：</p><ol><li>初始化一个全排列数组 a[n] ，通过a[i] &#x3D; i对其赋值（初始时其为1，2，…,n）</li><li>下面每种情况其循环时的下标应当为 a[i]</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> flag;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br><span class="hljs-type">int</span> t,d,l;<br>&#125;p[N];<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin &gt;&gt; m;<br><span class="hljs-keyword">while</span>(m--)&#123;<br>        cin &gt;&gt; n;<br>        <span class="hljs-type">int</span> a[n]; <span class="hljs-comment">//全排列数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) a[i] = i; <span class="hljs-comment">//初始排列数组为 1,2,3</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; p[i].t &gt;&gt; p[i].d &gt;&gt; p[i].l;<br>        <span class="hljs-keyword">do</span>&#123;<br>            <span class="hljs-comment">//初始化操作</span><br>          flag = <span class="hljs-literal">true</span>;<br>          <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>; <span class="hljs-comment">// 上一架飞机的降落时间，在此事件后开始降落的飞机都是合法的</span><br>          <br>          <span class="hljs-comment">//循环某个排序</span><br>          <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-type">int</span> j = a[i]; <span class="hljs-comment">//代表此次排列顺序的下标</span><br><br>            start = <span class="hljs-built_in">max</span>(start , p[j].t) ; <span class="hljs-comment">// 和飞机到达时间取max,因为有可能上个飞机已经降落完成但下个飞机还没到</span><br>            <span class="hljs-keyword">if</span>(p[j].t + p[j].d &gt;= start)&#123;<br>              start += p[j].l;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>              flag = <span class="hljs-literal">false</span>;<br>              <span class="hljs-keyword">break</span>;<br>            &#125;<br>          &#125;<br>          <br>          <span class="hljs-keyword">if</span>(flag)&#123;<br>              <span class="hljs-comment">//只要有一组排列满足条件即可判定为yes</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">next_permutation</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>));<br>             <br>        <span class="hljs-comment">//只有所有排列都不满足条件才判定为no</span><br>        <span class="hljs-keyword">if</span>(!flag) cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h2><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。</p><p>你可以按 任何顺序 返回答案。<br>输入：n &#x3D; 4, k &#x3D; 2<br>输出：<br>[<br>    [2,4],<br>    [3,4],<br>    [2,3],<br>    [1,2],<br>    [1,3],<br>    [1,4],<br>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> startIndex)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(path.<span class="hljs-built_in">size</span>() == k)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=startIndex;i&lt;=n;i++)&#123;<br>                path.<span class="hljs-built_in">push_back</span>(i);<br>                <span class="hljs-built_in">dfs</span>(n,k,i+<span class="hljs-number">1</span>);<br>                path.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combine</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-built_in">dfs</span>(n,k,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a>组合总和</h3><p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。</p><p>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p><p><strong>和普通组合问题的区别</strong></p><ol><li>组合中的元素个数没有数量要求</li><li>元素可无限重复选取</li></ol><p><strong>startIndex 不需要在 ++</strong><br>原始组合问题：<code>backtracking(candidates, target, sum, i+1);</code><br>本题的递归回溯：<code>backtracking(candidates, target, sum, i);</code></p><p><strong>在求和问题中，排序之后加剪枝是常见的套路！</strong></p><h2 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a>排列问题</h2><p><strong>和组合问题的区别</strong></p><ul><li>每层都是从0开始搜索而不是startIndex</li><li>需要used数组记录path里都放了哪些元素了</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2024/04/02/algorithm_know/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2024/04/02/algorithm_know/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="二分算法解析"><a href="#二分算法解析" class="headerlink" title="二分算法解析"></a>二分算法解析</h2><p>二分的判断条件通常是通过列出有关要二分的量和其他变量之间的关系方程：</p><ol><li>暴力解放要循环所有可能的边长值</li><li>通过二分来一步步得缩小查找的区间</li><li>二分的核心就是通过某些性质使得可以缩小查找区间来减少时间复杂度</li></ol><p><strong>二分步骤：</strong></p><ol><li>先写一个check函数(判断条件要具有二段性，并且答案一定是二段性的分界点)</li><li>判定在check的情况下（true和false的情况下），如何更新区间。</li><li>在check(m) &#x3D;&#x3D; true的分支下是:<ul><li>l &#x3D; mid的情况，中间点的更新方式是m &#x3D; (l+r+1)&#x2F;2</li><li>r &#x3D; mid的情况，中间点的更新方式是m &#x3D; (l+r)&#x2F;2</li></ul></li></ol><p>这种方法保证了：</p><ol><li>最后的 l &#x3D;&#x3D; r</li><li>搜索到达的答案是闭区间的，即 a[l] 是满足check()条件的。</li></ol><p><strong>二分模板</strong><br>模板1就是在满足chek()的区间内找到左边界，模板2在满足check()的区间内找到右边界。然后无论是左边界还是右边界，都应该是整个区间中某一段满足某性质（如单调不降）与另一段不满足该性质的分界点</p><p><strong>口诀：左加右减</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//查找左边界 SearchLeft 简写SL</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SL</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid; <br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>; <br>    &#125;   <br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-comment">//查找右边界 SearchRight 简写SR </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SR</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;                   <br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">//需要+1 防止死循环</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>; <br>    &#125;<br>    <span class="hljs-keyword">return</span> r; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h2><ol><li>浮点数二分不需要判断边界</li><li>题目要求保留6位小数的时候，就要求l和r的差值小于10的负8次方比较保险<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 浮点数二分</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;n);<br>    <span class="hljs-type">double</span> l=<span class="hljs-number">-10000</span>,r=<span class="hljs-number">10000</span>;<br>    <span class="hljs-comment">//保留6位小数的时候，就要求l和r的差值小于10的负8次方比较保险</span><br>    <span class="hljs-keyword">while</span>(r-l&gt;<span class="hljs-number">1e-8</span>)&#123;<br>        <span class="hljs-type">double</span> mid = (l+r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(mid*mid*mid &gt;= n)&#123;<br>            r = mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            l = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6lf&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="STL中的有关二分的函数"><a href="#STL中的有关二分的函数" class="headerlink" title="STL中的有关二分的函数"></a>STL中的有关二分的函数</h2><p>tip:这些关于二分的stl函数，都<strong>只会查找指定元素后面的值</strong>，所以要在排好序的数组中进行查找</p><ol><li><code>binary_search()</code>函数，作用：对一个<strong>不降序列</strong>进行二分查找，如果所查找的值在序列中出现了，返回true，没有出现，返回false。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-type">bool</span> flag = <span class="hljs-built_in">binary_search</span>(a,a+<span class="hljs-number">5</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//返回的是布尔值</span><br>cout &lt;&lt; flag;<br></code></pre></td></tr></table></figure><ol start="2"><li><code>lower_bound()</code>函数，作用：对一个<strong>不降序列</strong>进行二分查找，返回第一个<strong>大于等于</strong>所查找的值的元素下标，<strong>注意返回的是指针变量！！！</strong> 如果所有元素都小于val，则返回last的位置，且last的位置是越界的</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br></code></pre></td></tr></table></figure><ol start="3"><li><p><code>upper_bound()</code>函数，作用：对一个不降序列进行二分查找，返回第一个<strong>大于</strong>所查找的值的元素下标，注意返回的是指针变量！！！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-keyword">auto</span> pos = <span class="hljs-built_in">upper_bound</span>(a,a+<span class="hljs-number">5</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//返回的是指针变量</span><br><span class="hljs-keyword">auto</span> index =  pos-a; <span class="hljs-comment">//对应元素下标(从0开始)</span><br>cout &lt;&lt; index &lt;&lt; endl &lt;&lt; *pos &lt;&lt; endl &lt;&lt; a[index];<br></code></pre></td></tr></table></figure></li><li><p>如果查找第一个小于某个元素的下标，则加上<code>greater&lt;int&gt;()</code></p></li></ol><p><strong>例题：数的范围</strong></p><blockquote><p>给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。<br>如果数组中不存在该元素，则返回 -1 -1。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,q;<br><span class="hljs-type">int</span> l,r;<br><span class="hljs-type">int</span> a[N],b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> k;<br>        cin &gt;&gt; k;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">binary_search</span>(a,a+n,k))&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">lower_bound</span>(a,a+n,k) - a;<br>        <span class="hljs-type">int</span> r = <span class="hljs-built_in">upper_bound</span>(a,a+n,k) - a;<br>        cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; r<span class="hljs-number">-1</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>二分算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>二分算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>String</title>
    <link href="/2024/04/02/stl/String/"/>
    <url>/2024/04/02/stl/String/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><h2 id="stl函数方法"><a href="#stl函数方法" class="headerlink" title="stl函数方法"></a>stl函数方法</h2><ol><li><p>获取字符串长度<br><code>s.size()</code> 和 <code>s.length()</code></p></li><li><p>插入<br><code>s.push_back()</code> 在末尾插入<br><code>s.insert(pos,&#39;c&#39;)</code> 在指定位置插入<br><code>s.append(str)</code> 在s字符串结尾添加str字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>s.<span class="hljs-built_in">insert</span>(s.<span class="hljs-built_in">begin</span>(),<span class="hljs-string">&#x27;1&#x27;</span>)<br>s.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;abc&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>删除<br><code>erase(iterator first, iterator last)</code><br>删除字符串中迭代器区间[first,last)上所有字符</p><p><code>erase(pos, len)</code><br>删除字符串中从索引位置pos开始的len个字符</p></li><li><p>字符替换<br><code>s.replace(pos,n,str)</code> 把当前字符串从索引pos开始的n个字符替换为str<br><code>s.replace(it1,it2,str)</code> 把当前字符串[it1,it2)区间替换为str it1 ,it2为迭代器哦<br><code>tolower(s[i]) \ toupper(s[i])</code>  转换为小写 \ 大写</p></li><li><p>分割<br><code>s.substr(pos,n)</code> 截取从pos索引开始的n个字符</p></li><li><p>查找</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;dog bird chicken bird cat&quot;</span>)</span></span>;<br><span class="hljs-comment">//字符串查找-----找到后返回首字母在字符串中的下标</span><br><span class="hljs-comment">// 1. 查找一个字符串</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;chicken&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">// 结果是：9</span><br>    <br><span class="hljs-comment">// 2. 从下标为6开始找字符&#x27;i&#x27;，返回找到的第一个i的下标</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-number">6</span>) &lt;&lt; endl;<span class="hljs-comment">// 结果是：11</span><br>    <br><span class="hljs-comment">// 3. 从字符串的末尾开始查找字符串，返回的还是首字母在字符串中的下标</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">rfind</span>(<span class="hljs-string">&quot;chicken&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">// 结果是：9</span><br>    <br><span class="hljs-comment">// 4. 从字符串的末尾开始查找字符</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">rfind</span>(<span class="hljs-string">&#x27;i&#x27;</span>) &lt;&lt; endl;<span class="hljs-comment">// 结果是：18因为是从末尾开始查找，所以返回第一次找到的字符</span><br>    <br><span class="hljs-comment">// 5. 在该字符串中查找第一个属于字符串s的字符</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">find_first_of</span>(<span class="hljs-string">&quot;13br98&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">// 结果是：4---b</span><br>    <br><span class="hljs-comment">// 6. 在该字符串中查找第一个不属于字符串s的字符------先匹配dog，然后bird匹配不到，所以打印4</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&quot;hello dog 2006&quot;</span>) &lt;&lt; endl; <span class="hljs-comment">// 结果是：4</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">find_first_not_of</span>(<span class="hljs-string">&quot;dog bird 2006&quot;</span>) &lt;&lt; endl;  <span class="hljs-comment">// 结果是：9</span><br>    <br><span class="hljs-comment">// 7. 在该字符串最后中查找第一个属于字符串s的字符</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">find_last_of</span>(<span class="hljs-string">&quot;13r98&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">// 结果是：19</span><br><br><span class="hljs-comment">// 8. 在该字符串最后中查找第一个不属于字符串s的字符------先匹配t--a---c，然后空格匹配不到，所以打印21</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">find_last_not_of</span>(<span class="hljs-string">&quot;teac&quot;</span>) &lt;&lt; endl;<span class="hljs-comment">// 结果是：21</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符比较"><a href="#字符比较" class="headerlink" title="字符比较"></a>字符比较</h2><p>使用 <strong>单引号</strong> 包括单个字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;s&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="字符串变字符数组"><a href="#字符串变字符数组" class="headerlink" title="字符串变字符数组"></a>字符串变字符数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">string s = <span class="hljs-string">&quot;xing ma qi&quot;</span>;<br><span class="hljs-type">char</span> s2[] = s.<span class="hljs-built_in">c_str</span>();<br></code></pre></td></tr></table></figure><h2 id="将数字转换成字符串"><a href="#将数字转换成字符串" class="headerlink" title="将数字转换成字符串"></a>将数字转换成字符串</h2><blockquote><p><code>to_string(num)</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = <span class="hljs-number">12345678</span>;<br>cout &lt;&lt; <span class="hljs-built_in">to_string</span>(a) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="将字符串变成数字"><a href="#将字符串变成数字" class="headerlink" title="将字符串变成数字"></a>将字符串变成数字</h2><blockquote><p><code>atoi(const char *)</code> 将<strong>字符数组</strong>转换为int类型<br><code>stoi(const string*)</code> 将<strong>字符串</strong>转换为int类型</p></blockquote><p>关于输出数字的范围：<br>atoi不做范围检查，如果超出上界，输出上界，超出下界，输出下界。<br>stoi会做范围检查，默认必须在int范围内，如果超出范围，会出现RE（Runtime Error）错误。</p><h2 id="KMP字符串匹配"><a href="#KMP字符串匹配" class="headerlink" title="KMP字符串匹配"></a>KMP字符串匹配</h2><p><a href="https://www.xdull.cn/kmp.html">彻底搞懂 KMP 算法原理</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>字符串操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>字符串操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记忆化搜索</title>
    <link href="/2024/04/02/dp/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    <url>/2024/04/02/dp/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="记忆化数组"><a href="#记忆化数组" class="headerlink" title="记忆化数组"></a>记忆化数组</h1><blockquote><p>核心思想：设置一个记忆化数组f[N][N]，保存每种情况的（最优）解<br>并且如果这个点 f[i][j] 已经计算过了，直接返回即可，这就是记忆化搜索</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n,m,g[N][N]; <span class="hljs-comment">//数组g存储每个点高度</span><br><span class="hljs-type">int</span> f[N][N]; <span class="hljs-comment">//记忆化数组，保存每个(i,j)为起点的最优解</span><br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-comment">//以i，j为起点的滑雪长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br>    <span class="hljs-comment">// 如果这个点已经计算过了，直接返回即可，这就是记忆化搜索</span><br>    <span class="hljs-keyword">if</span>(f[i][j] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> f[i][j]; <br>    f[i][j] = <span class="hljs-number">1</span>; <span class="hljs-comment">//长度最短至少为1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;a&lt;<span class="hljs-number">4</span>;a++)&#123;<br>        <span class="hljs-type">int</span> x = i + dx[a]; <span class="hljs-type">int</span> y = j + dy[a];<br>        <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">1</span> &amp;&amp; x&lt;=n &amp;&amp; y&gt;=<span class="hljs-number">1</span> &amp;&amp; y&lt;= m &amp;&amp; g[i][j] &gt; g[x][y])&#123;<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i][j],<span class="hljs-built_in">dp</span>(x,y)+<span class="hljs-number">1</span>); <span class="hljs-comment">//(i,j) 为当前位置，(x,y)为下一个要访问的位置</span><br>        &#125;  <br>    &#125;<br>    <span class="hljs-keyword">return</span> f[i][j];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            cin &gt;&gt; g[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(f));<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//循环枚举起始位置(i,j)的所有可能，找出最大值</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            res = <span class="hljs-built_in">max</span>(res,<span class="hljs-built_in">dp</span>(i,j)); <span class="hljs-comment">//dp(x,y)返回以位置(i,j)为起点能延申的最长长度</span><br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>动态规划</category>
      
      <category>记忆化搜索</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>记忆化搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树形dp</title>
    <link href="/2024/04/02/dp/%E6%A0%91%E5%BD%A2dp/"/>
    <url>/2024/04/02/dp/%E6%A0%91%E5%BD%A2dp/</url>
    
    <content type="html"><![CDATA[<h1 id="树形dp"><a href="#树形dp" class="headerlink" title="树形dp"></a>树形dp</h1>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>动态规划</category>
      
      <category>树形dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>树形dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vector</title>
    <link href="/2024/04/01/stl/vector/"/>
    <url>/2024/04/01/stl/vector/</url>
    
    <content type="html"><![CDATA[<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="vector索引"><a href="#vector索引" class="headerlink" title="vector索引"></a>vector索引</h2><p><strong>vector只有在指定长度时,才能用下标索引的方法修改元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin &gt;&gt; a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p = a.<span class="hljs-built_in">begin</span>();p != a.<span class="hljs-built_in">end</span>(); p++)&#123;<br>cout &lt;&lt; *p;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>下标访问</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>cout &lt;&lt; vi[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>迭代器访问</strong><br>迭代器类似指针，迭代器在vector中就是充当指针的作用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span>(it = vi.<span class="hljs-built_in">begin</span>(); it != vi.<span class="hljs-built_in">end</span>();it ++)<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>返回首尾部的元素</strong></p><ol><li><code>front()</code> 返回第一个元素</li><li><code>back()</code>  返回最后一个元素</li></ol><h2 id="vector-插入-删除-元素"><a href="#vector-插入-删除-元素" class="headerlink" title="vector 插入&#x2F;删除 元素"></a>vector 插入&#x2F;删除 元素</h2><ol><li>在尾部进行插入&#x2F;删除<ul><li><code>push_back()</code></li><li><code>pop_back()</code></li></ul></li><li>指定位置的插入&#x2F;删除<ul><li><code>insert()</code>  c.insert(it, x) : 向任意迭代器it插入一个元素x ，O(N)</li><li><code>erase()</code>  c.erase(first,last) 删除[first,last)的所有元素，first,last都为迭代器指针 ，O(N)</li></ul></li></ol><h2 id="vector去重"><a href="#vector去重" class="headerlink" title="vector去重"></a>vector去重</h2><ol><li>先进行 sort() 排序，这样重复元素就会堆一起了</li><li>调用 unique() 函数将<strong>相邻且重复</strong> （因此要先排序） 的元素放到vector的尾部 然后返回指向第一个重复元素的迭代器</li><li>再用erase函数擦除从迭代器所指元素到最后元素的所有的元素</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>());<br>vec.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>()), vec.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><h2 id="vector截取"><a href="#vector截取" class="headerlink" title="vector截取"></a>vector截取</h2><p>void assign(const_iterator first,const_iterator last); &#x2F;&#x2F;两个指针，分别指向开始和结束的地方</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//通过vector的迭代器截取数组</span><br><span class="hljs-keyword">auto</span> first = a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">auto</span> end = a.<span class="hljs-built_in">end</span>()<span class="hljs-number">-1</span>;<br>a.<span class="hljs-built_in">assign</span>(first,end);<br></code></pre></td></tr></table></figure><h2 id="第k小数"><a href="#第k小数" class="headerlink" title="第k小数"></a>第k小数</h2><blockquote><p>寻找序列第k小的值 <code>nth_element(beg, nth, end)</code><br><code>nth_element(a,a+k,a+n)</code>，函数只是把下标为k的元素放在了正确位置<br>求第k大时,我们可以转化成求第n+1-k小，此时下标应该是n - k,所以为 <code>nth_element(a,a+n-k,a+n)</code> 也可以用cmp自定义比较函数，<code>greater&lt;int&gt;()</code></p></blockquote><p>nth为一个迭代器，指向序列中的一个元素。第n小的值恰好在nth位置上</p><p>执行nth_element()之后，序列中的元素会围绕nth进行划分：<strong>nth之前的元素都小于等于它，而之后的元素都大于等于它</strong></p><h2 id="哈希表-vector"><a href="#哈希表-vector" class="headerlink" title="哈希表 + vector"></a>哈希表 + vector</h2><p><img src="/../../img/347.png"></p><ol><li><code>unordered_map&lt;int,int&gt; st;</code> <strong>哈希表统计数据</strong></li><li><code>vector&lt;pair&lt;int,int&gt;&gt; a;</code>   <strong>vector的sort来排序</strong></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; st; <span class="hljs-comment">//哈希表统计数据</span><br>    vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; a; <span class="hljs-comment">//vector的sort来排序</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">topKFrequent</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            st[nums[i]] ++;<br>        &#125;<br>        <span class="hljs-keyword">auto</span> it = st.<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">while</span>(it != st.<span class="hljs-built_in">end</span>()) &#123;<br>            a.<span class="hljs-built_in">push_back</span>(&#123;it-&gt;second,it-&gt;first&#125;);<br>            it ++;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            res.<span class="hljs-built_in">push_back</span>(a[i].second);<br>            k--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>stl</category>
      
      <category>vector</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>stl</tag>
      
      <tag>vector</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性dp</title>
    <link href="/2024/04/01/dp/%E7%BA%BF%E6%80%A7dp/"/>
    <url>/2024/04/01/dp/%E7%BA%BF%E6%80%A7dp/</url>
    
    <content type="html"><![CDATA[<h1 id="线性dp"><a href="#线性dp" class="headerlink" title="线性dp"></a>线性dp</h1><blockquote><p>线性DP，是较常见的一类动态规划问题，其是在线性结构上进行状态转移，这类问题不像背包问题、区间DP等有固定的模板</p><p>线性动态规划的目标函数为特定变量的线性函数，约束是这些变量的线性不等式或等式，目的是求目标函数的最大值或最小值</p></blockquote><h2 id="LCS问题——最长公共子序列"><a href="#LCS问题——最长公共子序列" class="headerlink" title="LCS问题——最长公共子序列"></a>LCS问题——最长公共子序列</h2><blockquote><p><code>子序列</code> : 指的是字符串中<strong>不一定连续</strong>但先后顺序一致的n个字符<br><code>字符子串</code>：指的是字符串中连续的n个字符<br><code>最长公共子序列</code>，英文缩写为LCS（Longest Common Subsequence）。其定义是: 一个序列 S ，如果分别是两个或多个已知序列的子序列，且是所有符合此条件序列中最长的，则 S 称为已知序列的最长公共子序列。</p></blockquote><blockquote><p>问题描述：给定两个长度分别为 N 和 M 的字符串 A 和 B，求既是 A 的子序列又是 B 的子序列的字符串长度最长是多少。</p></blockquote><p><strong>状态表示</strong></p><ol><li>集合表示：所有 $ A[1,n] $和 $ B[1,m] $ 的公共子序列的集合</li><li><strong>dp[i][j]代表以s1[i]，s2[j]结尾的LCS的长度</strong></li><li>属性：公共子序列长度的最大值</li></ol><p><strong>状态计算</strong></p><ol><li>找集合中所有情况的共同点和不同点来划分集合</li><li>该公共子序列分为四种情况：包括a[n] , b[m] ，不包括a[n] ,包括b[m] ，不包括a[n] , b[m] ，包括a[n] ,不包括b[m] （可以用二进制0 1来表示）</li><li>$ f[i][j] $：A前i个字符，B前j个字符的公共子序列 的集合<br>属性：maxlen</li><li>集合划分情况（假定）<ul><li>(1) $ f[i-1][j-1] + 1 $  同时包括 a[n] 和 b[m] （前提是a[n] &#x3D;&#x3D; a[m]）</li><li>(2) $ f[i-1][j] $  不包括a[n] ,包括b[m]</li><li>(3) $ f[i][j-1] $  包括a[n] ,不包括b[m]</li><li>(4) $ f[i-1][j-1] $ a[n] 和 b[m] 都不包括</li></ul></li><li>集合划分情况（实际）<ul><li>f[i-1][j-1]+1 可以表示情况1    –&gt; a</li><li>f[i][j-1]&#x3D;max(情况2,情况4)    –&gt; b</li><li>f[i-1][j]&#x3D;max(情况3,情况4)    –&gt; c<br>所以我们最终只需要 求 max(a,b,c) 即可</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++">\\最长公共子序列<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-comment">//注意题目中是字符</span><br><span class="hljs-type">char</span> a[N],b[N];  <br><br><span class="hljs-type">int</span> n,m,f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    cin &gt;&gt; a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>    cin &gt;&gt; b[i];<br>&#125;<br><span class="hljs-comment">//状态计算</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i][j<span class="hljs-number">-1</span>],f[i<span class="hljs-number">-1</span>][j]);<br>            <span class="hljs-keyword">if</span>(a[i] == b[j]) f[i][j]=<span class="hljs-built_in">max</span>(f[i][j],f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br>    cout &lt;&lt; f[n][m];<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="LIS问题——最长上升子序列"><a href="#LIS问题——最长上升子序列" class="headerlink" title="LIS问题——最长上升子序列"></a>LIS问题——最长上升子序列</h2><blockquote><p><code>最长上升子序列</code>（Longest  Increasing Subsequence），简称LIS，也有些情况求的是最长非降序子序列，二者区别就是序列中是否可以有相等的数，对于固定的数组，虽然LIS序列不一定唯一，但LIS的<strong>长度是唯一的</strong></p></blockquote><ol><li><p>状态设计：$dp[i]$ 代表以 $a[i]$ 结尾的LIS的长度</p></li><li><p>状态转移：$dp[i]&#x3D;max{dp[j]+1，dp[i]} (1&lt;&#x3D;j&lt; i，a[j]&lt;a[i])$</p></li><li><p>边界处理：$dp[i]&#x3D;1(1&lt;&#x3D;i&lt;&#x3D;n)$</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> a[N],n;<br><span class="hljs-type">int</span> f[N]; <span class="hljs-comment">//f[i]: 以 a[i] 为结尾的上升子序列的最大长度</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; a[i];<br>        f[i] = <span class="hljs-number">1</span>; <span class="hljs-comment">//用1去初始化dp数组，因为最短的递增子序列的长度为1</span><br>    &#125;<br>    <span class="hljs-comment">//循环整个数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-comment">//从前往后循环比那里之前的元素</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i<span class="hljs-number">-1</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(a[j] &lt; a[i]) f[i] = <span class="hljs-built_in">max</span>(f[i],f[j]+<span class="hljs-number">1</span>);<br>        &#125;<br>        ans = <span class="hljs-built_in">max</span>(ans,f[i]);<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求最长子序列的路径"><a href="#求最长子序列的路径" class="headerlink" title="求最长子序列的路径"></a>求最长子序列的路径</h3><p>核心思想：使用g数组存储序列中每个元素下标的上一个元素的下标<br><code>g[i] = j;</code> : 最长子序列中下标为 i 的元素 的 上一个元素下标为 j</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,a[N],g[N],f[N]; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        g[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i<span class="hljs-number">-1</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i] &gt; a[j])&#123;<br>                f[i] = <span class="hljs-built_in">max</span>(f[i],f[j]+<span class="hljs-number">1</span>);<br>                <span class="hljs-comment">//如果f[i]更新了，则说明最长子序列中 下标为i的元素的上一个元素下标为j</span><br>                <span class="hljs-keyword">if</span>(f[i] == f[j]+<span class="hljs-number">1</span>)&#123;<br>                    g[i] = j;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> k; <span class="hljs-comment">//最长子序列的最后一个元素的下标</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(f[i] &gt; res)&#123;<br>            res = f[i];<br>            k = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//res为最长子序列的长度</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;t&lt;res;t++)&#123;<br>        cout &lt;&lt; a[k] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        k = g[k]; <span class="hljs-comment">//g[k]存储着 下标为k的元素 的上一个元素下标</span><br>    &#125;<br>    <span class="hljs-comment">// cout &lt;&lt; res;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="最长回文子序列"><a href="#最长回文子序列" class="headerlink" title="最长回文子序列"></a>最长回文子序列</h2><p><img src="/../../img/%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.png"></p><p>题目链接：<a href="https://www.acwing.com/problem/content/description/1224/">密码脱落</a></p><p><img src="/../../img/%E6%98%9F%E7%90%83%E8%84%B1%E8%90%BD.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// f[i][j] 区间[i，j] 之间的最长 回文 子序列 长度</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">状态划分：</span><br><span class="hljs-comment">1. 字符 s[i]和s[j] 都在子序列中</span><br><span class="hljs-comment">2. 字符 s[i]在，s[j]不在</span><br><span class="hljs-comment">3. 字符 s[i]不在，s[j]在</span><br><span class="hljs-comment">4. 字符 s[i]和s[j] 都不在子序列中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; s;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len=<span class="hljs-number">1</span>;len&lt;=n;len++)&#123;<br>        <span class="hljs-comment">//r-l+1 = len</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">0</span>; len+l<span class="hljs-number">-1</span> &lt; n; l++)&#123;<br>            <span class="hljs-type">int</span> r = len+l<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span>(len == <span class="hljs-number">1</span>)&#123;<br>                f[l][r] = <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// continue;</span><br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                f[l][r] = <span class="hljs-built_in">max</span>(f[l][r<span class="hljs-number">-1</span>],f[l+<span class="hljs-number">1</span>][r]);<br>                <span class="hljs-keyword">if</span>(s[l] == s[r]) f[l][r] = <span class="hljs-built_in">max</span>(f[l][r],f[l+<span class="hljs-number">1</span>][r<span class="hljs-number">-1</span>] + <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; n - f[<span class="hljs-number">0</span>][n<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>得到具体的回文字符串</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <br>        <span class="hljs-comment">// 初始化二维动态规划表</span><br>        <span class="hljs-type">bool</span> f[n+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// 填充对角线为true，因为单个字符总是回文</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            f[i][i] = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>, maxLen = <span class="hljs-number">1</span>; <span class="hljs-comment">// 记录最长回文串的起始位置和长度</span><br><br>        <span class="hljs-comment">// 填充动态规划表</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; ++len) &#123; <span class="hljs-comment">// 长度从2开始</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i + len - <span class="hljs-number">1</span> &lt; n; ++i) &#123; <span class="hljs-comment">// i是子串的起始位置,j是右端点小于n</span><br>                <span class="hljs-type">int</span> j = i + len - <span class="hljs-number">1</span>; <span class="hljs-comment">// j是子串的结束位置</span><br>                <span class="hljs-comment">// 如果首尾字符相同，并且中间部分也是回文，则整个序列是回文</span><br>                <span class="hljs-keyword">if</span> (s[i] == s[j] &amp;&amp; (len &lt; <span class="hljs-number">3</span> || f[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>])) &#123;<br>                    f[i][j] = <span class="hljs-literal">true</span>;<br>                    maxLen = len;<br>                    start = i;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    f[i][j] = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 返回最长的回文子串</span><br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(start, maxLen);<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>动态规划</category>
      
      <category>线性dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>线性dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区间dp</title>
    <link href="/2024/04/01/dp/%E5%8C%BA%E9%97%B4dp/"/>
    <url>/2024/04/01/dp/%E5%8C%BA%E9%97%B4dp/</url>
    
    <content type="html"><![CDATA[<h1 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h1><blockquote><p>定义：区间类动态规划是线性动态规划的扩展，它在分阶段地划分问题时，与阶段中元素出现的顺序和由前一阶段的哪些元素合并而来有很大的关系。</p><p>令状态 $f(i,j) $表示将下标位置 i 到 j 的所有元素合并能获得的价值的最大值，那么 $f(i,j)&#x3D;\max{f(i,k)+f(k+1,j)+cost}$，$cost $为将这两组元素合并起来的价值</p></blockquote><p><strong>性质</strong></p><ol><li><strong>合并：</strong> 即将两个或多个部分进行整合，当然也可以反过来</li><li><strong>特征</strong> 能将问题分解为能两两合并的形式</li><li><strong>求解</strong> 对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值</li></ol><p><strong>解题模板</strong><br>区间dp问题枚举时，第一维通常是枚举区间长度，并且一般 len &#x3D; 1 时用来初始化，枚举从 len &#x3D; 2 开始；第二维枚举起点 i （右端点 j 自动获得，j &#x3D; i + len - 1）</p><p>模板代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt;= n; len++) &#123;         <span class="hljs-comment">// 区间长度</span><br>    <span class="hljs-comment">//终止条件代表右端点要小于n</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + len - <span class="hljs-number">1</span> &lt;= n; i++) &#123; <span class="hljs-comment">// 枚举起点</span><br>        <span class="hljs-type">int</span> j = i + len - <span class="hljs-number">1</span>;                 <span class="hljs-comment">// 区间终点</span><br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) &#123;<br>            dp[i][j] = 初始值<br>            <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//或者在下方加上else</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i; k &lt; j; k++) &#123;        <span class="hljs-comment">// 枚举分割点，构造状态转移方程</span><br>            dp[i][j] = <span class="hljs-built_in">min</span>(dp[i][j], dp[i][k] + dp[k + <span class="hljs-number">1</span>][j] + w[i][j]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h2><blockquote><p>问题描述：设有 N 堆石子排成一排，其编号为 1,2,3,…,N。每堆石子有一定的质量，可以用一个整数来描述，现在要将这 N堆石子合并成为一堆。<br>每次<strong>只能合并相邻的两堆</strong>，合并的代价为这两堆石子的质量之和，合并后与这两堆石子相邻的石子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同。<br>找出一种合理的方法，使总的代价最小，输出最小代价</p></blockquote><p><strong>状态表示</strong></p><ol><li>集合：$ f(i,j) $ 表示将 [i,j] 这段区间的物品合并在一起的方案集合</li><li>属性：最小代价</li><li>集合划分，最后一次合并一定是左边连续的一部分和右边连续的一部分进行合并，将集合划分成某一堆是由区间 $ [i,i] ，[i,i+1] ，[i,i+2] ，… ， [i,i + j-1] $ 这些情况中之一所合并而成（即所有方案中，最后一次合并时，其中的某一堆一定是由上述某个区间所合并而成，满足不重不漏的原则）</li><li>除了最后一次以外前面每次合并的和即为该次合并所产生的代价，因此最小总代价 &#x3D; $ f(i,k) + f(k+1,j) + s[j] - s[i-1] $</li><li>$ f(i,j) $</li></ol><p><strong>状态计算</strong></p><p>1.<br>2. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> f[N][N],s[N],n,w[N]; <span class="hljs-comment">//dp数组；前缀和数组</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; w[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        s[i] = s[i<span class="hljs-number">-1</span>] + w[i];<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f); <span class="hljs-comment">//由于是求最小值，因此先把dp数组设置成最大值</span><br>    <span class="hljs-comment">// 区间 DP 枚举套路：长度+左端点 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len=<span class="hljs-number">1</span>;len&lt;=n;len++)&#123; <span class="hljs-comment">//len表示[i, j]的元素个数</span><br>        <span class="hljs-comment">// 右端点j小于0</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i+len<span class="hljs-number">-1</span>&lt;=n;i++)&#123; <br>            <span class="hljs-type">int</span> j = i+len<span class="hljs-number">-1</span>; <span class="hljs-comment">// 自动得到右端点</span><br>            <span class="hljs-keyword">if</span>(len == <span class="hljs-number">1</span>)&#123;<br>                f[i][j] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 边界初始化</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;j;k++)&#123;<br>                f[i][j] = <span class="hljs-built_in">min</span>(f[i][j],f[i][k] + f[k+<span class="hljs-number">1</span>][j] + s[j] - s[i<span class="hljs-number">-1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    for(int len=2;len&lt;=n;len++)&#123;</span><br><span class="hljs-comment">        //右端点j小于0</span><br><span class="hljs-comment">        for(int i=1;len+i-1 &lt;= n;i++)&#123;</span><br><span class="hljs-comment">            //j-i+1 = len</span><br><span class="hljs-comment">            int j = len+i-1;</span><br><span class="hljs-comment">            </span><br><span class="hljs-comment">            //初始化f[i][j]为一个较大值（题目要求最小代价）</span><br><span class="hljs-comment">            f[i][j] = 1e9;</span><br><span class="hljs-comment">            //枚举合并点</span><br><span class="hljs-comment">            for(int k=i;k&lt;=j-1;k++)&#123;</span><br><span class="hljs-comment">                f[i][j] = min( f[i][j] , f[i][k] + f[k+1][j] + s[j] - s[i-1]);</span><br><span class="hljs-comment">                // cout &lt;&lt; f[i][j] &lt;&lt; &quot;\n&quot;;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;    </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br>    cout &lt;&lt; f[<span class="hljs-number">1</span>][n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>动态规划</category>
      
      <category>区间dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>区间dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划（背包问题）</title>
    <link href="/2024/03/30/dp/dp/"/>
    <url>/2024/03/30/dp/dp/</url>
    
    <content type="html"><![CDATA[<h1 id="dp问题分类"><a href="#dp问题分类" class="headerlink" title="dp问题分类"></a>dp问题分类</h1><h2 id="求最值"><a href="#求最值" class="headerlink" title="求最值"></a>求最值</h2><p><strong>求max&#x2F;min值</strong></p><p><a href="https://leetcode.cn/problems/last-stone-weight-ii/description/">最后一块石头的重量 II</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;stones.<span class="hljs-built_in">size</span>();i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = sum; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>        <span class="hljs-keyword">if</span>(j&gt;=stones[i]) f[j] = <span class="hljs-built_in">max</span>(f[j],f[j-stones[i]]+stones[i]);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> target = sum / <span class="hljs-number">2</span>;<br><span class="hljs-comment">//要使最后一块石头的重量尽可能地小，f[target] 需要在不超过 ⌊sum/2⌋ 的前提下尽可能地大</span><br><span class="hljs-keyword">return</span> (sum-f[target]) - f[target]; <span class="hljs-comment">// 最后剩下的一块石头的重量</span><br></code></pre></td></tr></table></figure><h2 id="求数目"><a href="#求数目" class="headerlink" title="求数目"></a>求数目</h2><p><strong>累加</strong></p><p><a href="https://leetcode.cn/problems/target-sum/">目标和</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//动态规划数组初始化</span><br><br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">//在初始化的时候dp[0] 一定要初始化为1，因为dp[0]是在公式中一切递推结果的起源，如果dp[0]是0的话，递推结果将都是0</span><br><br><span class="hljs-comment">//dp公式</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = x ; j &gt;= <span class="hljs-number">0</span>; j--)&#123; <span class="hljs-comment">//最小值可以取0，因此此时这里要取0</span><br><br>        <span class="hljs-comment">//凑整f[j]有多少方法呢，也就是把 所有的 f[j - nums[i]] 累加起来</span><br>        <span class="hljs-keyword">if</span>(j &gt;= nums[i]) f[j] += f[j-nums[i]]; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="背包问题的排列数和组合数"><a href="#背包问题的排列数和组合数" class="headerlink" title="背包问题的排列数和组合数"></a>背包问题的排列数和组合数</h2><p><a href="https://leetcode.cn/problems/coin-change-ii/description/">零钱兑换 II</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> amount, vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(amount+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//组合数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;coins.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=coins[i];j&lt;=amount;j++)&#123;<br>                f[j] += f[j-coins[i]];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//排列数</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        for(int j=0;j&lt;=amount;j++)&#123;</span><br><span class="hljs-comment">            for(int i=0;i&lt;coins.size();i++)&#123;</span><br><span class="hljs-comment">                if(j&gt;=coins[i]) f[j] += f[j-coins[i]];</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        for(int j=0;j&lt;=amount;j++)&#123;</span><br><span class="hljs-comment">            cout &lt;&lt; f[j] &lt;&lt; &quot;\n&quot;;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">return</span> f[amount];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="dp问题"><a href="#dp问题" class="headerlink" title="dp问题"></a>dp问题</h1><ol><li>要将$f[0][0]$ 等特殊的点进行初始化操作</li><li></li></ol><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><h2 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h2><blockquote><p>问题描述：有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。第 i件物品的体积是$ v_i $，价值是$ w_i $ 。 求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大</p></blockquote><p>针对0-1背包问题，每个物品有选与不选两种选择，则暴力枚举的时间复杂度为 $ O(2^n) $</p><p><strong>状态表示</strong> </p><ol><li>集合：$ f(i,j) $ 表示从前 i 个物品中选择（每个物品只能<strong>选一次</strong>），总价值不超过 j 的选法集合</li><li>属性：所有选法中物品价值的最大值</li></ol><p><strong>状态计算</strong></p><ol><li>将状态集合将所有选法划分成第 i 个物品 选 或者 不选 的方案（该划分方式不重不漏）</li><li>第 i 个物品不选时：$ f(i,j) &#x3D; f(i-1,j) $</li><li>第 i 个物品被选择时，为了方便计算，则先假设不选第 i 个物品，则此时 $ f(i,j) &#x3D; f(i-1,j-v[i]) + w[i] $ ,此时前提条件是 $ j &gt; v[i] $</li><li>状态属性是求最大值，则用max函数求出上述情况下的价值最大值。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n,m,ans;<br><span class="hljs-type">int</span> v[N],w[N];<br><span class="hljs-type">int</span> d[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; v[i] &gt;&gt; w[i];<br>    &#125;<br>    <span class="hljs-comment">//动态计算</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            d[i][j] = d[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">if</span>(j &gt;= v[i]) d[i][j] = <span class="hljs-built_in">max</span>(d[i][j], d[i<span class="hljs-number">-1</span>][j-v[i]] + w[i]);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; d[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一维优化：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> d[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=v[i];j--)&#123;<br>            <span class="hljs-keyword">if</span>(j &gt;= v[i]) d[j] = <span class="hljs-built_in">max</span>(d[j], d[j-v[i]] + w[i]);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; d[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p><strong>状态表示</strong></p><ol><li>集合：$ f(i,j) $ 表示从前 i 个物品中选择（每个物品能选<strong>无数次</strong>），总价值不超过 j 的选法集合</li><li>属性：所有选法中物品价值的最大值</li></ol><p><strong>状态计算</strong></p><ol><li>该集合的所有选法可以划分成第 i 个物品被选了0次,1次, … , n次（不重不漏）</li><li>划分依据:找最后一个不同点；最后一个物品选几个</li><li>$ f(i-1,j) $ 和 $ f(i-1,j-n*v_i) $ 这些方案的最大值</li><li>$ f(i,j) &#x3D; max( f(i-1,j), f(i-1,j-1<em>v[i])+1</em>w[i], f(i-1,j-2<em>v[i])+2</em>w[i], … , f(i-1,j-n<em>v[i])+n</em>w[i] ) $</li><li>$ f(i,j-v) &#x3D; max( f(i-1,j-v), f(i-1,j-2<em>v[i])+1</em>w[i], f(i-1,j-3<em>v[i])+2</em>w[i], … , f(i-1,j-(n+1)<em>v[i])+n</em>w[i] ) $</li><li>$ f(i,v) &#x3D; f(i,j-v) + w $</li></ol><p><strong>未优化版本，会超时</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; v[i] &gt;&gt; w[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>            d[i][j] = d[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;(k*v[i])&lt;=j;k++)&#123;<br>                <span class="hljs-keyword">if</span>(j&gt;=k*v[i]) d[i][j] = <span class="hljs-built_in">max</span>(d[i][j],d[i][j-k*v[i]]+k*w[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; d[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二维优化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>        d[i][j] = d[i<span class="hljs-number">-1</span>][j];<br>        <span class="hljs-keyword">if</span>(j&gt;=v[i]) d[i][j] = <span class="hljs-built_in">max</span>(d[i][j],d[i][j-v[i]] + w[i]);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>一维优化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>        d[j] = d[j];<br>        <span class="hljs-keyword">if</span>(j&gt;=v[i]) d[j] = <span class="hljs-built_in">max</span>(d[j],d[j-v[i]] + w[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><p><strong>状态表示</strong></p><ol><li>集合：$ f(i,j) $ 表示从前 i 个物品中选择（每个物品能选<strong>有限n次</strong>），总价值不超过 j 的选法集合</li><li>属性：所有选法中物品价值的最大值</li></ol><p><strong>状态计算</strong></p><ol><li>集合的选法包括第i个物品不被选，或者选1个，2个…n个.</li><li>多重背包可以转换成0-1背包</li><li>将s个物品的体积看成一个个单独的物品</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//将s个物品看成一个个单独的物品</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;<br>    <span class="hljs-keyword">while</span>(s--)&#123;<br>        t++; <span class="hljs-comment">//t从1开始</span><br>        v[t] = a;<br>        w[t] = b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//拆分后直接套用0-1背包板子</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=v[i];j--)&#123;<br>        f[j] = <span class="hljs-built_in">max</span>(f[j],f[j-v[i]]+w[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二进制优化版本</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> a,b,s;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;<br>        <span class="hljs-keyword">while</span>(k&lt;=s)&#123;<br>            t++;<br>            v[t] = k*a;<br>            w[t] = k*b;<br>            s -= k; <span class="hljs-comment">//s代表目前还未分配的，每次要减去已经分配</span><br>            k*=<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-comment">//如果还有没分配的，再进行最后一次分配</span><br>        <span class="hljs-keyword">if</span>(s&gt;<span class="hljs-number">0</span>)&#123;<br>            t++;<br>            v[t] = a*s;<br>            w[t] = b*s;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=v[i];j--)&#123;<br>            f[j] = f[j];<br>            <span class="hljs-keyword">if</span>(v[i] &lt;= j) f[j] = <span class="hljs-built_in">max</span>(f[j],f[j-v[i]]+w[i]);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; f[m]; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h2><blockquote><p>问题描述：有 N 组物品和一个容量是 V 的背包。每组物品有若干个，同一组内的物品最多只能选一个。每件物品的体积是$ v_{ij} $，价值是$ w_{ij} $，其中$ i $是组号，$ j $ 是组内编号。<br>求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p></blockquote><p><strong>状态计算</strong></p><ol><li>体积和价值表示为$ v[i][k] w[i][k] $ $ i $代表物品组，k 代表物品组里的第k个物品<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> d[S][M]; <span class="hljs-comment">//从前s组选，体积不超过m</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; s[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=s[i];j++)&#123;<br>            cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li>对每个物品组进行循环，将其转换成0-1背包<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>        d[i][j] = d[i<span class="hljs-number">-1</span>][j];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=s[i];k++)<br>            <span class="hljs-keyword">if</span>(j &gt;= v[i][k]) d[i][j] = <span class="hljs-built_in">max</span>(d[i][j], d[i<span class="hljs-number">-1</span>][j-v[i][k]] + w[i][k]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>动态规划</category>
      
      <category>背包问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>背包问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法</title>
    <link href="/2024/03/29/algorithm_know/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2024/03/29/algorithm_know/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><blockquote><p>定义：贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解</p></blockquote><ol><li>类似于二分，将大集合进行划分，得出最优解所在的小集合</li><li>与动态规划的不同: 在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能</li></ol><h2 id="贪心算法步骤"><a href="#贪心算法步骤" class="headerlink" title="贪心算法步骤"></a>贪心算法步骤</h2><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><blockquote><p>给定 N 个权值作为 N 个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)</p></blockquote><p><strong>实现手段：</strong><br>通过一个小根堆<code>(priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;)</code>，每次取出队列顶部的两个元素进行合并，同时将这两个元素出队，将合并之后得到的新元素入队<br>直到队列中只剩下一个元素为止</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span> <span class="hljs-comment">// 优先队列头文件</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; q; <span class="hljs-comment">// 大根堆 + 大于号 = 小根堆</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        q.<span class="hljs-built_in">push</span>(x); <span class="hljs-comment">// 加入节点</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>; <span class="hljs-comment">// res: 结果</span><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) <span class="hljs-comment">// 模拟哈夫曼树生成过程</span><br>    &#123;<br>        <span class="hljs-comment">// 挑两个最小的数</span><br>        <span class="hljs-type">int</span> a = q.<span class="hljs-built_in">top</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> b = q.<span class="hljs-built_in">top</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        res += a + b; <span class="hljs-comment">// 把他们之和加到答案里</span><br>        q.<span class="hljs-built_in">push</span>(a + b); <span class="hljs-comment">// 合并节点</span><br>    &#125;<br><br>    cout &lt;&lt; res;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>math</title>
    <link href="/2024/03/29/algorithm_know/math/"/>
    <url>/2024/03/29/algorithm_know/math/</url>
    
    <content type="html"><![CDATA[<h1 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h1><h2 id="约数-因数-个数"><a href="#约数-因数-个数" class="headerlink" title="约数(因数)个数"></a>约数(因数)个数</h2><ol><li>因数总是成对出现的,一个在开根号左边，一个在右边，此时因数个数加二</li><li>特殊情况：有可能刚好等于开根号之后的数字，此时因数个数只加一<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n,a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j*j&lt;=a[i];j++)&#123;<br>            <span class="hljs-comment">//因数总是成对出现的,一个在开根号左边，一个在右边，此时因数个数加二</span><br>            <span class="hljs-comment">//特殊情况：有可能刚好等于开根号之后的数字，此时因数个数只加一</span><br>            <span class="hljs-keyword">if</span>(a[i] % j == <span class="hljs-number">0</span> &amp;&amp; j*j != a[i]) cnt+=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(a[i] % j == <span class="hljs-number">0</span> &amp;&amp; j*j == a[i]) cnt+=<span class="hljs-number">1</span>;<br>        &#125;<br>        cout &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h2><p>题目链接：<a href="https://www.acwing.com/problem/content/description/869/">分解质因数</a></p><p><img src="/../../img/%E8%B4%A8%E5%9B%A0%E6%95%B0.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n,a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-type">int</span> m = x;<br>        <span class="hljs-comment">//循环到平方根</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=x;i++)&#123;<br>            <span class="hljs-keyword">if</span>(x%i == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span>(x%i == <span class="hljs-number">0</span>)&#123;<br>                    x /= i;<br>                    cnt++;<br>                &#125;<br>                cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; 1&quot;</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>$ gcd(a, b) &#x3D; gcd(b, a mod b) $</p><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p><strong>互质数：</strong></p><blockquote><p>两个数的公因数只有1的两个非零自然数,叫做互质数<br>1与任何数都互斥，自身与自身不互斥（公约数包括1和自身）</p></blockquote><p>性质一：两个不同的质数是互质的。<br>性质二：一个质数，另一个不为它的倍数，这两个数为互质数。（较大数是质数的两个数是互质数）<br>性质三：相邻的两个自然数是互质数。<br>性质四：相邻的两个奇数是互质数。<br>性质五：最大公约数是1，两个数互质。</p><p><strong>欧拉函数</strong></p><blockquote><p>定义：对于一个正整数n，n的欧拉函数ϕ(n)表示<strong>小于等于</strong>n中，与n互质的<strong>正整数</strong>的个数</p></blockquote><p>分解质因数：N &#x3D; $ p_1^{a_1} * p_2^{a_2} * …*p_n^{a_n} $</p><p>$ ϕ(N) &#x3D; N(1- \frac{1}{p_1})(1- \frac{1}{p_2})…(1- \frac{1}{p_n}) $</p><p>用代码表示该公式时为了防止出现小数，用以下方式表示：<br>$ ϕ(N) &#x3D; (\frac{N}{p_1})*(p_1 - 1) $</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=t/i;i++)&#123;<br>    <span class="hljs-comment">//判断i是不是t的质因子</span><br>    <span class="hljs-keyword">if</span>(t%i == <span class="hljs-number">0</span>)&#123;<br>        res = (res/i)*(i<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">while</span>(t%i == <span class="hljs-number">0</span>)&#123;<br>            t /= i;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//有没除尽的</span><br><span class="hljs-keyword">if</span>(t &gt; <span class="hljs-number">1</span>) res = (res/t)*(t<span class="hljs-number">-1</span>);<br>cout &lt;&lt; res &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>性质1：如果<strong>n是质数</strong>，那么<strong>ϕ(n) &#x3D; n−1</strong>,因为只有n本身与它不互质。</p><p>性质2：如果p，q都是质数，那么$ ϕ ( p ∗ q ) &#x3D; ϕ ( p ) ∗ ϕ ( q ) &#x3D; ( p − 1 ) ∗ ( q − 1 ) $.</p><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>快速幂，二进制取幂，在O(logn)下求$ a^n $的方法</p><blockquote><p>求 $ {a^b} % {p} $ 的值</p></blockquote><p>做这个题前首先我们需要了解一下关于取余的公式<br>(a + b) % p &#x3D; (a % p + b % p) % p<br>(a - b) % p &#x3D; (a % p - b % p ) % p<br>(a * b) % p &#x3D; (a % p * b % p) % p</p><p><strong>$ a^b &#x3D; a^{2^0+2^1+…+2^n(中的某几项)} $</strong><br>ex. $ a^{10} &#x3D; a^{(1010)_2} &#x3D; a^{2^1+2^3} $</p><p><strong>注意下述式子</strong></p><blockquote><p>$ a^{2^3} &#x3D; (a^{2^2})^2 \ a^{2^0} &#x3D; a   $</p></blockquote><p>第二个式子即可解释代码中的  <code>a = a*a % p;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br>LL a,b;<br><span class="hljs-type">int</span> p,n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;p);<br>        LL res = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(b &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// cout &lt;&lt; b;</span><br>            <span class="hljs-comment">//求数末尾为1还是0</span><br>            <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)&#123;<br>                res = res * a % p;<br>            &#125;<br>            a = a*a % p;<br>            b = b &gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">//注意这里要把移位后的值赋给b</span><br>        &#125;<br>        cout &lt;&lt; res &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p><a href="https://blog.csdn.net/gwk1234567/article/details/106444071">矩阵快速幂算法详细解析</a></p><p><img src="/../../img/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82.png"></p><p>矩阵快速幂主要是解决n很大的递推式问题</p><p>ex. f(n)&#x3D;4f(n-1)+3f(n-2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> <br>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> m[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br>&#125;ans,res;<br><br><span class="hljs-comment">//矩阵A * 矩阵B</span><br><span class="hljs-function">node <span class="hljs-title">mul</span><span class="hljs-params">(node A,node B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j,k;<br>    node temp;<span class="hljs-comment">//定义一个临时矩阵，存放A*B的结果</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n; i++)<span class="hljs-comment">//先全部定义为0</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;n; j++)<br>        &#123;<br>            temp.m[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n; i++)<span class="hljs-comment">//矩阵相乘的代码</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;n; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>; k&lt;n; k++)<br>            &#123;<br>                temp.m[i][j] += (A.m[i][k] * B.m[k][j])%<span class="hljs-number">666666</span>;<span class="hljs-comment">//取模</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-comment">//对个相同矩阵a的乘法</span><br><span class="hljs-function">node <span class="hljs-title">quickpower</span><span class="hljs-params">(node a,<span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    node c;<br>    <span class="hljs-built_in">memset</span>(c.m,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(c.m));<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)  c.m[i][i]=<span class="hljs-number">1</span>;<span class="hljs-comment">//定义一个单位矩阵</span><br>    <span class="hljs-keyword">while</span>(n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            c=<span class="hljs-built_in">mul</span>(c,a);<br>        &#125;<br>        a=<span class="hljs-built_in">mul</span>(a,a);<br>        n=n&gt;&gt;<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,k;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-built_in">memset</span>(ans.m,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(ans.m));<br><br>    <span class="hljs-comment">//这是构建常数矩阵，主要是其参数会随着递推式变化</span><br>    ans.m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">4</span>;<br>    ans.m[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>    ans.m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    ans.m[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><br>    n=n<span class="hljs-number">-2</span>;<span class="hljs-comment">//前俩个冒险者减去</span><br>    ans=<span class="hljs-built_in">quickpower</span>(ans,n);<span class="hljs-comment">//求出常数矩阵的n-2次方</span><br><br>    <span class="hljs-built_in">memset</span>(res.m,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(res.m));<br><br>    <span class="hljs-comment">//构建f[1] 和 f[2]</span><br>    res.m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">233</span>;<br>    res.m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">4</span>;<br><br>    <span class="hljs-comment">//相乘前：ans是常数矩阵的n-2次幂，mul矩阵是f[n-1] 和 f[n-2]</span><br>    <span class="hljs-comment">//相乘后：res矩阵是f[n] 和 f[n-1];</span><br>    res=<span class="hljs-built_in">mul</span>(ans,res);<span class="hljs-comment">//求出最后的结果矩阵</span><br><br>    <span class="hljs-comment">//此时res.m[0][0] 即是 f[n]</span><br>    k=k-res.m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]; <span class="hljs-comment">//减去最后的造成的总伤害</span><br><br>    cout&lt;&lt;k&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>数学知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数学知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pair</title>
    <link href="/2024/03/29/stl/pair/"/>
    <url>/2024/03/29/stl/pair/</url>
    
    <content type="html"><![CDATA[<h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><h2 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h2><blockquote><p>pair&lt;int,int&gt; p[N];</p></blockquote><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><blockquote><p>和结构体类似，first代表第一个元素，second代表第二个元素</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin &gt;&gt; a[i].first &gt;&gt; a[i].second;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="索引元素"><a href="#索引元素" class="headerlink" title="索引元素"></a>索引元素</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cout &lt;&lt; p[i].first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p[i].second;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>stl</category>
      
      <category>pair</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>stl</tag>
      
      <tag>pair</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动手做操作系统</title>
    <link href="/2024/03/28/%E8%AE%A1%E7%AE%97%E6%9C%BA408/OS/"/>
    <url>/2024/03/28/%E8%AE%A1%E7%AE%97%E6%9C%BA408/OS/</url>
    
    <content type="html"><![CDATA[<h1 id="动手做操作系统"><a href="#动手做操作系统" class="headerlink" title="动手做操作系统"></a>动手做操作系统</h1><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ol><li>在Windows下编写代码，使用vscode、记事本等编辑器。</li><li>使用Linux的虚拟机编译内核和生成操作软盘映像。（img软盘也可以直接在window11环境下使用bximage.exe生成，但需要在虚拟机里进行格式化）</li><li>必要时使用安装了DOS的虚拟机来调试程序以及操作软盘映像。</li><li>安装一个Bochs,必要的时候用它来调试。</li><li>使用其他必要的工具，比如版本控制工具(VSS或者CVS)。</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>软盘是从A盘启动的</li></ol><h2 id="实模式和保护模式"><a href="#实模式和保护模式" class="headerlink" title="实模式和保护模式"></a>实模式和保护模式</h2><p>在操作系统中，实模式（Real Mode）和保护模式（Protected Mode）是两种不同的工作模式，特别是在x86架构的计算机上常见。</p><p><strong>实模式：</strong></p><ul><li>实模式是早期IBM PC兼容计算机上的一种工作模式。在实模式下，CPU可以访问1MB范围内的内存。</li><li>内存管理采用分段机制，内存地址由一个16位段地址和一个16位偏移地址组成，共20位地址空间。</li><li>实模式下，没有内存保护机制，任何程序都可以访问系统的所有内存和硬件设备，因此容易导致系统的稳定性问题。<br><strong>保护模式：</strong></li><li>保护模式是后来引入的一种工作模式，提供了更为复杂和强大的内存管理和保护机制。</li><li>在保护模式下，CPU可以访问超过1MB的内存，并且支持虚拟内存和分页机制。</li><li>内存管理采用分段和分页结合的方式，可以实现更灵活的内存保护和隔离，不同程序之间不会相互影响。</li><li>保护模式下，操作系统可以对内存和硬件设备进行更精细的控制和管理，提高了系统的稳定性和安全性。</li></ul><p>总的来说，实模式和保护模式是操作系统在x86架构下的两种不同的工作模式，保护模式相比实模式具有更多的功能和优势，是现代操作系统常用的工作模式。</p><h2 id="全局描述符表（GDT）"><a href="#全局描述符表（GDT）" class="headerlink" title="全局描述符表（GDT）"></a>全局描述符表（GDT）</h2><p>全局描述符表（Global Descriptor Table，GDT）是x86架构下一种用于管理内存的数据结构，它在操作系统中扮演着重要的角色。GDT定义了内存分段的策略，包括内存段的起始地址、段的大小、访问权限等信息。</p><p>在x86架构中，内存被分成多个段（segment），每个段都有自己的起始地址和大小。GDT就是用来管理这些段的数据结构。每个段都由一个描述符（descriptor）来描述，而GDT就是存放这些描述符的表格。描述符包含了段的各种属性，比如基地址、段限长、访问权限等。</p><p>通过GDT，操作系统可以实现对内存的灵活管理和保护。例如，操作系统可以将代码、数据、堆栈等不同类型的信息放在不同的段中，并且对每个段设置不同的访问权限，从而提高系统的安全性和稳定性。此外，GDT还支持虚拟内存和分页机制，可以实现更高效的内存管理和地址转换。</p><p>总的来说，全局描述符表（GDT）是x86架构下一种重要的内存管理数据结构，它定义了内存分段的策略，为操作系统提供了灵活的内存管理和保护机制。</p><h2 id="进入保护模式"><a href="#进入保护模式" class="headerlink" title="进入保护模式"></a>进入保护模式</h2><p>(1) 准备GDT </p><p>(2) 用 lgdt 加载 gdtr.<br><code>lgdt [GdtPtr]</code></p><p>(3) 关中断<br><code>cli</code></p><p>(4) 打开 A20地址线.<br><code>inal, 92h </code><br><code>oral, 00000010b</code><br><code>out92h, al</code></p><p>(5)置cr0的PE位（第0位）为1.<br><code>moveax, cr0</code><br><code>oreax, 1</code><br><code>movcr0, eax</code></p><p>(6)跳转，进入保护模式.<br><code>jmpdword SelectorCode32:0</code></p><h2 id="运行一个-com程序的步骤"><a href="#运行一个-com程序的步骤" class="headerlink" title="运行一个.com程序的步骤"></a>运行一个.com程序的步骤</h2><ol><li>使用bximage.exe生成一个软盘</li><li>将软盘插入到xp虚拟机中，进行格式化（选择带ms-dos启动盘的格式化）</li><li>将需要运行的.com程序放入软盘中，之后将软盘取出（防止软盘被占用而出错）</li><li>编辑bochsrc.bxrc，将软盘名称改成自己软盘的名称，将启动盘改成A</li><li>运行<code>C:\Bochs-2.6.9\dos</code> 里的 <code>bchsrc.bxrc</code>即可进入到软盘中，之后在窗口中输入test1.com即可运行</li></ol><h2 id="保护模式下的特点"><a href="#保护模式下的特点" class="headerlink" title="保护模式下的特点"></a>保护模式下的特点</h2><ol><li>地址用 SEG:OFFSET 表示 ; 段值仍然由原来16位的cs、ds 等寄存器表示，但此时它仅仅变成了一个索引，这个索引指向一个数据结构的一个表项，表项中详细定义了段的起始地址、界限、属性等内容。这个数据结构，就是GDT（实际上还可能是LDT，这个以后再介绍)。GDT 中的表项也有一个专门的名字，叫做描述符（Descriptor)。</li><li>也就是说，GDT的作用是用来提供段式存储机制，这种机制是通过段寄存器和GDT中的描述符共同提供的。</li><li>GDT中的每一个描述符定义一个段</li><li>不难理解，当TI和RPL都为零时，选择子就变成了对应描述符相对于GDT 基址的偏移</li></ol><h2 id="建立新段的步骤"><a href="#建立新段的步骤" class="headerlink" title="建立新段的步骤"></a>建立新段的步骤</h2><ol><li>建立一个段</li><li>在段表中建立一个条目写进去</li><li>给定一个选择子（指向段表的索引）</li><li>初始化时，把起始地址填入到Desc</li><li>使用该段</li></ol>]]></content>
    
    
    <categories>
      
      <category>408</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>408</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举算法</title>
    <link href="/2024/03/28/algorithm_know/%E6%9E%9A%E4%B8%BE%E7%AE%97%E6%B3%95/"/>
    <url>/2024/03/28/algorithm_know/%E6%9E%9A%E4%B8%BE%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举算法"><a href="#枚举算法" class="headerlink" title="枚举算法"></a>枚举算法</h1><h2 id="结题步骤"><a href="#结题步骤" class="headerlink" title="结题步骤"></a>结题步骤</h2><p>采用枚举算法解题的一般思路如下：</p><ol><li>确定枚举对象、枚举范围和判断条件，并判断条件设立的正确性。</li><li>一一枚举可能的情况，并验证是否是问题的解。</li><li>考虑提高枚举算法的效率。</li></ol><p><strong>提高算法效率方法</strong></p><ol><li>抓住问题状态的本质，尽可能缩小问题状态空间的大小。</li><li>加强约束条件，缩小枚举范围。</li><li>根据某些问题特有的性质，例如对称性等，避免对本质相同的状态重复求解。</li></ol><h2 id="递归常见的三类枚举方式是：指数型枚举、排列型枚举、组合型枚举。"><a href="#递归常见的三类枚举方式是：指数型枚举、排列型枚举、组合型枚举。" class="headerlink" title="递归常见的三类枚举方式是：指数型枚举、排列型枚举、组合型枚举。"></a>递归常见的三类枚举方式是：指数型枚举、排列型枚举、组合型枚举。</h2><h3 id="指数型枚举"><a href="#指数型枚举" class="headerlink" title="指数型枚举"></a>指数型枚举</h3><p>从 1∼n 这 n个整数中随机选取任意多个，输出所有可能的选择方案。<br>由于每个数都存在选与不选两种状态，所以总共会有2^n 种情况<br>选与不选可以使用dfs来递归表示<br>因此递归函数中会用到两个dfs()函数分别表示选与不选</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> st[<span class="hljs-number">20</span>]; <span class="hljs-comment">//结果数组</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(u &gt; n)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(st[i] == <span class="hljs-number">1</span>) <br>                cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    st[u] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>);<br>    <br>    st[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="排列型枚举"><a href="#排列型枚举" class="headerlink" title="排列型枚举"></a>排列型枚举</h3><p>可以使用stl函数 next_permutation </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//时间复杂度 N!</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> a[N],n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        a[i] = i;<br>    &#125;<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">next_permutation</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n));<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="组合型枚举"><a href="#组合型枚举" class="headerlink" title="组合型枚举"></a>组合型枚举</h3><blockquote><p>从 1∼n 这 n 个整数中随机选出 k 个，输出所有可能的选择方案</p></blockquote><p>可以使用stl函数 <strong>prev_permutation</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">50</span>;<br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++) a[i]=<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-keyword">if</span>(a[i]) cout&lt;&lt; i &lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">prev_permutation</span>(a+<span class="hljs-number">1</span>, a+<span class="hljs-number">1</span>+n));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>枚举算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>枚举算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将数据集分成训练集和测试集</title>
    <link href="/2024/03/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/data-set-spilt/"/>
    <url>/2024/03/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/data-set-spilt/</url>
    
    <content type="html"><![CDATA[<h1 id="将数据集分成训练集和测试集"><a href="#将数据集分成训练集和测试集" class="headerlink" title="将数据集分成训练集和测试集"></a>将数据集分成训练集和测试集</h1><h2 id="具体代码（带详细注释）"><a href="#具体代码（带详细注释）" class="headerlink" title="具体代码（带详细注释）"></a>具体代码（带详细注释）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">假设数据集文件夹中有三类</span><br><span class="hljs-string">class_indices.json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;0&quot;: &quot;AD&quot;,</span><br><span class="hljs-string">    &quot;1&quot;: &quot;CN&quot;,</span><br><span class="hljs-string">    &quot;2&quot;: &quot;MCI&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_split_data</span>(<span class="hljs-params">root: <span class="hljs-built_in">str</span>, val_rate: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.2</span></span>):<br>    random.seed(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 保证随机结果可复现</span><br>    <span class="hljs-keyword">assert</span> os.path.exists(root), <span class="hljs-string">&quot;dataset root: &#123;&#125; does not exist.&quot;</span>.<span class="hljs-built_in">format</span>(root)<br><br>    <span class="hljs-comment"># 遍历文件夹，一个文件夹对应一个类别</span><br>    data_class = [cla <span class="hljs-keyword">for</span> cla <span class="hljs-keyword">in</span> os.listdir(root) <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(root, cla))]<br>    <span class="hljs-comment"># 排序，保证各平台顺序一致</span><br>    data_class.sort()  <span class="hljs-comment"># [&#x27;AD&#x27;, &#x27;CN&#x27;, &#x27;MCI&#x27;]</span><br>    <span class="hljs-comment"># 生成类别名称以及对应的数字索引</span><br>    class_indices = <span class="hljs-built_in">dict</span>((k, v) <span class="hljs-keyword">for</span> v, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data_class))<br>    json_str = json.dumps(<span class="hljs-built_in">dict</span>((val, key) <span class="hljs-keyword">for</span> key, val <span class="hljs-keyword">in</span> class_indices.items()), indent=<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;class_indices.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> json_file:<br>        json_file.write(json_str)<br><br>    train_images_path = []  <span class="hljs-comment"># 存储训练集的所有图片路径</span><br>    train_images_label = []  <span class="hljs-comment"># 存储训练集图片对应索引信息</span><br>    val_images_path = []  <span class="hljs-comment"># 存储验证集的所有图片路径</span><br>    val_images_label = []  <span class="hljs-comment"># 存储验证集图片对应索引信息</span><br>    every_class_num = []  <span class="hljs-comment"># 存储每个类别的样本总数</span><br>    supported = [<span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;.JPG&quot;</span>, <span class="hljs-string">&quot;.png&quot;</span>, <span class="hljs-string">&quot;.PNG&quot;</span>]  <span class="hljs-comment"># 支持的文件后缀类型</span><br>    <span class="hljs-comment"># 遍历每个文件夹下的文件</span><br>    <span class="hljs-keyword">for</span> cla <span class="hljs-keyword">in</span> data_class:<br>        cla_path = os.path.join(root, cla) <span class="hljs-comment"># 类别文件夹的具体路径</span><br>        <span class="hljs-comment"># 遍历获取supported支持的所有文件路径</span><br>        images = [os.path.join(root, cla, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir(cla_path)<br>                  <span class="hljs-keyword">if</span> os.path.splitext(i)[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> supported]<br>        <span class="hljs-comment"># 排序，保证各平台顺序一致</span><br>        images.sort() <span class="hljs-comment"># 该类别文件夹下的所有图片 按名称字典顺序排列</span><br>        <span class="hljs-comment"># 获取该类别对应的索引</span><br>        image_class = class_indices[cla]<br>        <span class="hljs-comment"># 记录该类别的样本数量</span><br>        every_class_num.append(<span class="hljs-built_in">len</span>(images))<br>        <span class="hljs-comment"># 按比例随机采样验证样本</span><br>        val_path = random.sample(images, k=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(images) * val_rate))<br><br>        <span class="hljs-keyword">for</span> img_path <span class="hljs-keyword">in</span> images:<br>            <span class="hljs-keyword">if</span> img_path <span class="hljs-keyword">in</span> val_path:  <span class="hljs-comment"># 如果该路径在采样的验证集样本中则存入验证集</span><br>                val_images_path.append(img_path)<br>                val_images_label.append(image_class)<br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 否则存入训练集</span><br>                train_images_path.append(img_path)<br>                train_images_label.append(image_class)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; images were found in the dataset.&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">sum</span>(every_class_num)))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; images for training.&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(train_images_path)))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; images for validation.&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(val_images_path)))<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(train_images_path) &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;number of training images must greater than 0.&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(val_images_path) &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;number of validation images must greater than 0.&quot;</span><br><br>    plot_image = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> plot_image:<br>        <span class="hljs-comment"># 绘制每种类别个数柱状图</span><br>        plt.bar(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data_class)), every_class_num, align=<span class="hljs-string">&#x27;center&#x27;</span>)<br>        <span class="hljs-comment"># 将横坐标0,1,2,3,4替换为相应的类别名称</span><br>        plt.xticks(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data_class)), data_class)<br>        <span class="hljs-comment"># 在柱状图上添加数值标签</span><br>        <span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(every_class_num):<br>            plt.text(x=i, y=v + <span class="hljs-number">5</span>, s=<span class="hljs-built_in">str</span>(v), ha=<span class="hljs-string">&#x27;center&#x27;</span>)<br>        <span class="hljs-comment"># 设置x坐标</span><br>        plt.xlabel(<span class="hljs-string">&#x27;image class&#x27;</span>)<br>        <span class="hljs-comment"># 设置y坐标</span><br>        plt.ylabel(<span class="hljs-string">&#x27;number of images&#x27;</span>)<br>        <span class="hljs-comment"># 设置柱状图的标题</span><br>        plt.title(<span class="hljs-string">&#x27;data class distribution&#x27;</span>)<br>        plt.show()<br><br>    <span class="hljs-keyword">return</span> train_images_path, train_images_label, val_images_path, val_images_label<br><br>data_path = <span class="hljs-string">&quot;D:\data_set&quot;</span> <span class="hljs-comment"># 数据集所在（绝对/相对）路径</span><br>train_images_path, train_images_label, val_images_path, val_images_label = read_split_data(data_path)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>数据集处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>数据集处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树状数组</title>
    <link href="/2024/03/25/algorithm_know/tree-arr/"/>
    <url>/2024/03/25/algorithm_know/tree-arr/</url>
    
    <content type="html"><![CDATA[<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><p>首要用途：维护序列的前缀和</p><blockquote><p>对一个序列a，建立一个数组c，其中c[x]保存序列a的区间(x-lowbit(x)+1,x]中所有数的和(前开后必)。</p></blockquote><h2 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h2><p>1.每一个节点x，有c[x]保存着以x为根节点的所有叶节点的和</p><p>2.每个内部节点c[x]的子节点个数等于lowbit（x）的位数</p><p>3.除了树根以外的每个子节点的父节点都是c[x+lowbit(x)];</p><p>4.数的深度为log(N)  &#x2F;&#x2F;N为序列a的长度</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>O(logN)的时间复杂度去实现单点修改和区间查询</li><li>数组下标一定要从1开始</li><li>一个数的二进制表示中末尾有几个0就在第几层</li></ol><h2 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h2><blockquote><p><code>x &amp; (-x)</code> : 假设 x的二进制数表示 的从右向左数的第一个1所在位为k，则lowbit(x) &#x3D; 2^(k-1)</p></blockquote><blockquote><p>tip: 求 n 的二进制表示的第 k 位(从0开始)数字：<code>n &gt;&gt; k &amp; 1</code></p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>实现单点修改</li><li>实现求前缀和</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 构造树状数组的方法</span><br><span class="hljs-comment">// 可以假设原序列a为全0，依次通过“单点修改”操作把每个数加进去，最后就可以形成树状数组了</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> t[N],tr[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><br><span class="hljs-comment">//在原数组的第x个数加上v</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    <span class="hljs-comment">//注意这里的i是从x开始得</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x;i&lt;=n;i+=<span class="hljs-built_in">lowbit</span>(i))&#123; <br>        tr[i] += v; <span class="hljs-comment">//在树状数组第i个位置上加上一个值</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//返回原数组前x个数的前缀和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x; i&gt;<span class="hljs-number">0</span>; i-=<span class="hljs-built_in">lowbit</span>(i))&#123;<br>        sum += tr[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin &gt;&gt; t[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">add</span>(i,t[i]); <span class="hljs-comment">//在第i个位置上加上原数组t[i] 构造树状数组</span><br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> k,x,y;<br>        cin &gt;&gt; k &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>)&#123;<br>            cout &lt;&lt; <span class="hljs-built_in">query</span>(y) - <span class="hljs-built_in">query</span>(x<span class="hljs-number">-1</span>) &lt;&lt; endl; <span class="hljs-comment">//求的是[a,b]的必区间</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">add</span>(x,y);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>树状数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法 树状数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm_know</title>
    <link href="/2024/03/25/algorithm_know/algorithm-know/"/>
    <url>/2024/03/25/algorithm_know/algorithm-know/</url>
    
    <content type="html"><![CDATA[<h1 id="2-16"><a href="#2-16" class="headerlink" title="2.16"></a>2.16</h1><p><a href="https://blog.csdn.net/weixin_49486457/article/details/123439229">算法竞赛常用STL万字总结</a></p><h2 id="降低时间复杂度的方法（降低运行时间防止超时）"><a href="#降低时间复杂度的方法（降低运行时间防止超时）" class="headerlink" title="降低时间复杂度的方法（降低运行时间防止超时）"></a>降低时间复杂度的方法（降低运行时间防止超时）</h2><h3 id="使用平方根去约束数的循环范围"><a href="#使用平方根去约束数的循环范围" class="headerlink" title="使用平方根去约束数的循环范围"></a>使用平方根去约束数的循环范围</h3><blockquote><p>应用场景：完全数，质数</p></blockquote><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><h2 id="得到某一段数组-l-r-的和，常规循环计算的复杂度为-O-n-，使用前缀和就可以直接使用-S-r-S-l-1-，复杂度为O-1"><a href="#得到某一段数组-l-r-的和，常规循环计算的复杂度为-O-n-，使用前缀和就可以直接使用-S-r-S-l-1-，复杂度为O-1" class="headerlink" title="得到某一段数组 [l,r] 的和，常规循环计算的复杂度为 O(n) ，使用前缀和就可以直接使用 S(r) - S(l-1) ，复杂度为O(1)"></a>得到某一段数组 [l,r] 的和，常规循环计算的复杂度为 O(n) ，使用前缀和就可以直接使用 S(r) - S(l-1) ，复杂度为O(1)</h2><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><ol><li>O(log)的时间复杂度去实现单点修改和区间查询</li><li>数组下标一定要从1开始</li><li>一个数的二进制表示中末尾有几个0就在第几层</li></ol><h1 id="2-17"><a href="#2-17" class="headerlink" title="2.17"></a>2.17</h1><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><blockquote><p>求 n 的二进制表示的第 k+1 位（计数从1开始）数字：<code>n &gt;&gt; k &amp; 1</code><br><code>n &amp; 1</code> 判断第1位的数字</p></blockquote><p><a href="https://www.acwing.com/problem/content/description/803/">二进制中1的个数</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[i])&#123;<br>        <span class="hljs-keyword">if</span>((a[i] &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) res++;<br>        a[i] = a[i] &gt;&gt; <span class="hljs-number">1</span>;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>返回 n 的最后一位1所对应的值：lowbit(n) &#x3D; n &amp; -n &#x3D; n &amp; (n^(n-1))<br>假设一个数的二进制最低位的1在从右往左数的第k位，那么它的lowbit值就是2^(k-1)<br>树状数组C[x] &#x3D; [x-lowbit(n) , x] 原数组中这段区间的和</p></blockquote><h1 id="3-25"><a href="#3-25" class="headerlink" title="3.25"></a>3.25</h1><h2 id="n次方幂"><a href="#n次方幂" class="headerlink" title="n次方幂"></a>n次方幂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//负数要先转换成正数去计算n次方根</span><br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>)&#123;<br>        flag = <span class="hljs-literal">true</span>; <br>        n = -n;<br>    &#125;<br>    <span class="hljs-type">double</span> res = <span class="hljs-built_in">pow</span>(n,(<span class="hljs-type">double</span>)<span class="hljs-number">1</span>/<span class="hljs-number">3</span>); <span class="hljs-comment">//使用求n次幂函数，来求n次方根</span><br></code></pre></td></tr></table></figure><h1 id="3-26"><a href="#3-26" class="headerlink" title="3.26"></a>3.26</h1><h1 id="线段数组"><a href="#线段数组" class="headerlink" title="线段数组"></a>线段数组</h1><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>线段树是一棵平衡二叉树。母结点代表整个区间的和，越往下区间越小</li><li>每个节点p的左右子节点的编号分别为 2p 和 2p+1</li><li>节点p存储区间[l,r]的和，设 mid &#x3D; floor(l+r&#x2F;2) ; 左节点存储[l,mid]的和， 左节点存储[mid+1,r]的和</li></ol><h2 id="建立线段数组"><a href="#建立线段数组" class="headerlink" title="建立线段数组"></a>建立线段数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-type">int</span> sum;<br>&#125;tr[N*<span class="hljs-number">4</span>];<br><br><span class="hljs-comment">//u位节点编号，l和r为区间左右端点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span> tr[u] = &#123;l,r,w[l]&#125;; <span class="hljs-comment">//抵达叶子节点，为其赋值</span><br>    <span class="hljs-type">int</span> mid = (l+r) / <span class="hljs-number">2</span>;  <span class="hljs-comment">//向下取整</span><br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span>*u, l, mid); <span class="hljs-comment">//向左子树递归</span><br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span>*u+<span class="hljs-number">1</span>, mid+<span class="hljs-number">1</span>, r); <span class="hljs-comment">//向右子树递归</span><br>    tr[u].sum = tr[<span class="hljs-number">2</span>*u].sum + tr[<span class="hljs-number">2</span>*u+<span class="hljs-number">1</span>].sum <span class="hljs-comment">//递归完左右子树后向上回溯</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h2><blockquote><p>把区间内的叶子节点相加</p></blockquote><h2 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h2><blockquote></blockquote><h1 id="第k小数"><a href="#第k小数" class="headerlink" title="第k小数"></a>第k小数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> t, n, k;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br><span class="hljs-keyword">while</span> (t--) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        list[i] = <span class="hljs-built_in">read</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 将第k小的数放在 k-1 位置，左边的数都比它小，右边的数都比它大，但都是无序的</span><br>    <span class="hljs-built_in">nth_element</span>(list, list + k - <span class="hljs-number">1</span>, list + n);<br>    <span class="hljs-comment">// 由于数据量太大，下面两种方法会超时</span><br>    <span class="hljs-comment">// 快速排序</span><br>    <span class="hljs-comment">// sort(list, list + n);</span><br>    <span class="hljs-comment">// 将第k小的数放在 k-1 位置，左边的数都比它小，而且是有序的，右边的数都比它大，但右边是无序的</span><br>    <span class="hljs-comment">// partial_sort(list, list + k - 1, list + n);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, list[k - <span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>首先，binary_search()函数，作用：对一个不降序列进行二分查找，如果所查找的值在序列中出现了，返回true，没有出现，返回false。</p><p>然后，lower_bound()函数，作用：对一个不降序列进行二分查找，返回第一个大于等于所查找的值的元素下标，注意返回的是指针变量！！！</p><p>最后，upper_bound()函数，作用：对一个不降序列进行二分查找，返回第一个大于所查找的值的元素下标，注意返回的是指针变量！！！</p><h1 id="无穷大和无穷小"><a href="#无穷大和无穷小" class="headerlink" title="无穷大和无穷小"></a>无穷大和无穷小</h1><p>指定一个数为无穷大或无穷小：INT_MIX INT_MAX<br>要把一段内存全部置为无穷大，我们只需要memset(a,0x3f,sizeof(a))<br>要把一段内存全部置为无穷小，我们只需要memset(a,0xc0,sizeof(a))</p><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>map[key] &#x3D; value</p><h2 id="查找map中某个key是否存在-具体位置"><a href="#查找map中某个key是否存在-具体位置" class="headerlink" title="查找map中某个key是否存在&#x2F;具体位置"></a>查找map中某个key是否存在&#x2F;具体位置</h2><blockquote><p>mp.count(key)<br>查看元素是否存在，因为map中键是唯一的，所以存在返回1，不存在返回0<br>mp.find(key)<br>返回键为key的映射的迭代器 $O(logN) $ 注意：用find函数来定位数据出现位置，它返回一个迭代器。当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回mp.end()</p></blockquote><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>set里面的元素<strong>不重复</strong> 且 <strong>有序</strong></p><h1 id="如何将字符串转换成数字"><a href="#如何将字符串转换成数字" class="headerlink" title="如何将字符串转换成数字"></a>如何将字符串转换成数字</h1><p>String str&#x3D;“2019”;<br>char s[]&#x3D;str.toCharArray();<br>int x&#x3D;0;<br>for(int i&#x3D;0;i&lt;s.length;i++){<br>x&#x3D;x*10+str[i]-‘0’;<br>}</p><h1 id="结构体数组排序"><a href="#结构体数组排序" class="headerlink" title="结构体数组排序"></a>结构体数组排序</h1><p><strong>当数组是从1开始赋值时，sort函数也要加1</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin &gt;&gt; a[i].t &gt;&gt; a[i].d &gt;&gt; a[i].l;<br>&#125;<br><span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>,cmp); <span class="hljs-comment">//由于数组是从1开始赋值的，因此排序函数也要加1 </span><br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">int</span> solve;<br>    <span class="hljs-type">int</span> time;<br>&#125;p[<span class="hljs-number">10000</span>];<br><br><span class="hljs-comment">//按照题数，再罚时间，再名字（名字按字典序排列）</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> Student&amp; a, <span class="hljs-type">const</span> Student&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a.solve != b.solve)<br>     &#123; <br>        <span class="hljs-keyword">if</span> (a.solve &gt; b.solve)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a.time != b.time)<br>           <span class="hljs-keyword">return</span> a.time &lt; b.time;<br>    <span class="hljs-keyword">else</span><br>          <span class="hljs-built_in">return</span> (<span class="hljs-built_in">strcmp</span>(a.name, b.name) &lt; <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>      cin&gt;&gt;p[i].name&gt;&gt;p[i].solve&gt;&gt;p[i].time;<br>    <span class="hljs-built_in">sort</span>(p,p+n,cmp);<span class="hljs-comment">//在主函数中调用，结构体排序；</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>      cout&lt;&lt;p[i].name;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="max-element-min-element"><a href="#max-element-min-element" class="headerlink" title="max_element+min_element"></a>max_element+min_element</h2><blockquote><p>返回最大最小值的下标所对应的地址</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数都是返回地址，需要加*取值</span><br><span class="hljs-type">int</span> indx = <span class="hljs-built_in">max_element</span>(a, a + n) - a;<br><span class="hljs-type">int</span> mx = *<span class="hljs-built_in">max_element</span>(a, a + n);<br><span class="hljs-type">int</span> mn = *<span class="hljs-built_in">min_element</span>(a, a + n);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>算法小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>算法小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络复习第三章</title>
    <link href="/2024/03/25/%E8%AE%A1%E7%AE%97%E6%9C%BA408/cs-net-3/"/>
    <url>/2024/03/25/%E8%AE%A1%E7%AE%97%E6%9C%BA408/cs-net-3/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络复习第三章"><a href="#计算机网络复习第三章" class="headerlink" title="计算机网络复习第三章"></a>计算机网络复习第三章</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>数据链路层的功能是：实现在两个通信实体之间传送数据（以 帧为单位），并通过差错控制方法，使有差错的物理线路变成无差错数据链路。数据链路层使用的信道有2种：广播信道和点对点信道。 数据链路层需要解决的三个基本问题是：封装成帧. 透明传输（如在数据中出现控制字符时加入转义字符）和差错检测（如CRC技术）。</p></li><li><p>10Mbps以太网是基带编码，使用的曼彻斯特编码，是一种自同步的数字信号编码方式，编码效率是50%；通常采用RJ45（非屏蔽双绞线）。</p></li><li><p>虚拟局域网（VLAN）技术是建立在网络交换机之上的，以硬件方式实现逻辑工作组的划分与管理，通常可以根据端口. MAC地址. IP地址等划分VLAN。同一层交换机上不同VLAN之间不能直接通信（需要使用路由器才能通信）</p></li><li><p>网络互联时使用中继器或集线器完成物理层功能，使用网桥或二层交换机完成数据链路层的功能，使用路由器或三层交换机完成网络层的功能。</p></li><li><p>常用的IEEE802协议有802.2—LLC   802.3—10Mbps CSMA&#x2F;CD以太网  802.4—令牌总线 802.5—令牌环，这些协议都属于数据链路层。以太网使用10BASE-T规定从集线器到网卡的最大距离是100米。</p></li><li><p>总线型网络和使用HUB的星型网络，任意时刻只能有一台电脑发送信息；使用SWITCH的星型网络，任意时刻可以有多台电脑发送信息。</p></li><li><p>CSMA&#x2F;CD的中文是多路载波侦听&#x2F;冲突检测，掌握其工作原理并重点掌握：用于在10Mbps以标准太网的信道访问控制，要求数据帧的发送时间是传播时间的2倍，其帧长为64–1518B，其碰撞窗口为51.2us ，总线型以太网可以检测冲突却不能避免冲突，交换型以太网可以避免冲突。发生第K次冲突后，需要等待r*51.2us之后再侦听以决定是否发送，其中r&#x3D;Min（10，x）(x取(0,1,2,3,…2k-1)中任意随机值),最多传送16次。 </p></li><li><p>通常数据在各个层次的名称不同，一般物理层称为比特. 数据链路层称为帧. 网络层称为分组. 传输层称为报文. 余下各层统称为文本。OSI&#x2F;RM协议的层次名称. 上下层次关系，TCP&#x2F;IP协议的层次名称. 上下层关系，以及OSI&#x2F;RM各层次与TCP&#x2F;IP各层次对应关系。VLAN(虚拟局域网)使用的核心设备是二层交换机。</p></li><li><p>教材图3-10的PPP格式（P75）。教材图3-22的以太网格式（P92）</p></li><li><p>CRC计算（教材 图3-8）（P71）</p></li></ol><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>数据链路层需要解决的三个基本问题是：封装成帧. 透明传输和差错检测，其中在数据中出现控制字符时加入转义字符属于(   )。<br>2. 完善以太网的MAC帧格式 。</p><ol start="3"><li>以太网中采用的CSMA&#x2F;CD协议是一种能避免冲突的协议。</li><li>在一个二层交换机内划分为3个虚拟网络后，虚拟网络之间不可在本交换机内通信。</li><li>在802.3局域网中，当使用了交换技术后，可避免冲突产生。</li><li>10M以太网的碰撞窗口为51.2us  </li><li>10M以太网的标准是IEEE802.5 。</li><li>10BASE-T标准中使用的电缆为双绞线</li><li>802.3协议中源地址为（）。<br>A. 1字节  B. 4字节    C. 6字节   D. 8字节</li><li>符合OSI参考模型第二层功能的设备，均有一个MAC地址，以太网MAC地址是（）位二进制。<br>A.    64     B. 48     C. 32    D. 8<br>11.交换机是对应OSI参考模型（）的设备。<br>A. 物理层    B. 传输层    C. 网络层  D. 数据链路层<br>12目前局域网中的高端交换机使用双绞线时能适应10M&#x2F;S，100M&#x2F;S，1000M&#x2F;S的速率，依靠（  ）技术。<br>A. 线路交换    B. 令牌控制<br>C. 自动侦测    D. VLAN技术</li><li>以太网交换机不具有的功能是（）。<br>A. 地址学习    B. 数据帧转发<br>C. 路由选择    D. 回路避免</li><li>以下MAC地址哪个是正确的（）<br>A. 004         B.  00DA45<br>C. 210.47.2.34   D. 00AABB0034CC</li><li>虚拟局域网中的核心设备是（）<br>A. 高端交换机   B. 路由器<br>C. 集线器       D. 中继器</li><li>虚拟局域网的技术基础是（）。<br>A. 交换    B. 路由    C.  带宽分配    D. 冲突检测</li><li>在一个数字化的语音系统中，采用256个量化级时，编码时采用（）位。<br>A. 8           B. 7          C. 6        D. 10</li><li>具有冲突检测载波监听多路访问CSMA&#x2F;CD技术，不适用于（）。<br>A. 总线型网络    B. 星型网络<br>C. 树型网络      D. 环型网络</li><li>IEEE802.3标准中，MAC帧的帖起始定界符是（）。<br>A.  01111111（左低右高）  B. 11101011（左低右高）<br>C.  01111110（左低右高）  D. 10101011（左低右高）</li><li>CSMA&#x2F;CD协议只适用于（）。<br>A. 局域网  B. 广域网    C. 城域网    D. 以上全部</li><li>IEEE802.3中10BASE-T规定从集线器到网卡的最大距离是（）。<br>A. 50米     B. 100米      C. 200米     D. 500米</li><li>数据链路层需要解决的三个基本问题是：封装成帧. 透明传输和差错检测，其中CRC技术属于（  ）。</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><ol><li>透明传输</li><li>类型</li><li>T</li><li>T</li><li>T</li><li>T</li><li>F</li><li>T</li><li>C</li><li>B</li><li>D</li><li>C</li><li>C</li><li>D</li><li>A</li><li>A</li><li>A</li><li>C</li><li>D</li><li>A</li><li>B</li><li>差错检测</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络复习第二章</title>
    <link href="/2024/03/25/%E8%AE%A1%E7%AE%97%E6%9C%BA408/cs-net-2/"/>
    <url>/2024/03/25/%E8%AE%A1%E7%AE%97%E6%9C%BA408/cs-net-2/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络复习第二章"><a href="#计算机网络复习第二章" class="headerlink" title="计算机网络复习第二章"></a>计算机网络复习第二章</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>物理层确定与传输媒体的接口有关的特性是机械特性.电气特性.功能特性和过程特性。</p></li><li><p>根据信号中代表消息的参数的取值方式不同，信号可以分为2大类，模拟信号和数字信号。从通信的双方信息的交互方式来区分，可以有三种基本方式：单工通信（只能有一个方向的通信而没有反方向的交互）.半双工通信（通信的双方都可以发送信息，但不能双方同时发送）和全双工通信（通信的双方都可以发送信息，而且双方能同时发送）。</p></li><li><p>复用方式有：频分复用（FDM）.时分复用(TDM).码分复用(CDM)和波分复用(WDM)多种，在一根光纤上复用多路光载波信号称为波分复用，利用信号频率的不同来实现电路复用的方法是频分复用，利用信号的不同时间发送来实现电路复用的方法是时分复用。</p></li><li><p>10Mbps以太网是基带编码，使用的曼彻斯特编码，是一种自同步的数字信号编码方式，编码效率是50%；通常采用RJ45（非屏蔽双绞线）。</p></li><li><p>在脉码调制PCM过程中要经过采样.量化.编码三个过程。T1和E1技术都是基本的将模拟信号转为数字信号的方法，目前我国使用的是欧洲的E1标准，E1速率是2.048Mbps，T1的速率是1.544Mbps，这两种方法都使用时分复用。</p></li><li><p>传输媒体也称为传输介质或传输媒介，它就是数据传输系统中在发送器和接收器之间的物理通路。传输媒体可分为两大类，即导引型传输媒体和非导引型传输媒体。在导引型传输媒体中，电磁波被导引沿着固体媒体（铜线或光纤）传播。非导引型传输媒体就是指自由空间。在非导引型传输媒体中，电磁波的传输常称为无线传输。一个数据通信系统包括三大部分：源系统（或发送端.发送方）.传输系统（或传输网络）和目的系统（或接收端.接收方）。</p></li></ol><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><ol><li><p>通常一个通信系统可以划分为三大部分，即源系统（或发送端.发送方）.(   )和目的系统（或接收方.接收端）。</p></li><li><p>从通信的双方信息的交互方式来区分，可以有三种基本方式：单工通信.半双工通信和(   )。</p></li><li><p>传输媒体是数据传输系统中在发送器和接收器之间的物理通道，可以分为导向传输媒体和非导向传输媒体。无线电波属于(   )。</p></li><li><p>多个通信设备共享一个信道进行通信称为信道复用，不同的用户占用不同的带宽资源称为(   )。</p></li><li><p>在PCM调制过程中要经过量化.采样.编码三个过程。</p></li><li><p>在数据传输过程中，差错主要是由通信过程中的噪声引起的。</p></li><li><p>ADSL技术中，上行通道和下行通道的传输速率不对称。</p></li><li><p>在电路交换.分组交换与报文交换方式中，都要经过线路建立.数据传输.线路释放这3个过程。</p></li><li><p>两台计算机通过电话网通信时必须使用的设备是（）。<br>A. 调制解调器  B.网线.C.中继器    D.集线器</p></li><li><p>常用的传输介质中，带宽最大.信号传输衰减最小.抗干扰能力最强的是（）。<br>A.光纤    B.双绞线     C.同轴电缆     D.无线信道</p></li><li><p>利用信号频率的不同来实现电路复用的方法是（）。<br>A.频分多路复用   B.时分多路复用<br>C.码分多路复用   D.以上都不对</p></li><li><p>在物理层中，指明在接口电缆的各条线上出现的电压范围，属于（）。<br>A.机械特性   B.电气特性  C.功能特性   D.过程特性</p></li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><ol><li>传输系统</li><li>全双工通信</li><li>非导向传输媒体</li><li>频分复用</li><li>F</li><li>T</li><li>T</li><li>F</li><li>A</li><li>A</li><li>A</li><li>B</li></ol>]]></content>
    
    
    <categories>
      
      <category>期末复习</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络复习第一章</title>
    <link href="/2024/03/25/%E8%AE%A1%E7%AE%97%E6%9C%BA408/cs-net-1/"/>
    <url>/2024/03/25/%E8%AE%A1%E7%AE%97%E6%9C%BA408/cs-net-1/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络复习第一章"><a href="#计算机网络复习第一章" class="headerlink" title="计算机网络复习第一章"></a>计算机网络复习第一章</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>为网络中的数据交换而建立的规则.标准或约定称为网络协议，网络协议由三部分组成：语法（数据与控制信息的结构或格式）.语义（需要发出何种控制信息，完成何种动作以及做出何种响应）.同步（事件实现顺序的详细说明）。</p></li><li><p>Arpanet是Internet的前身，对因特网发展起到很大作用。Internet是通过路由器将多个LAN或WAN相连接形成。</p></li><li><p>计算机网络向用户提供的最重要的功能有2个：连通性和共享</p></li><li><p>所有因特网标准都是以RFC形式在因特网上发表。RFC的意思是“请求评论”</p></li><li><p>因特网从其工作方式上看，可以划分为2大块：边缘部分（由连接在因特网上的主机组成，这部分是用户直接使用的，用来进行通信和资源共享）和核心部分（由大量网络和连接这些网络的路由器组成，这部分为边缘部分提供服务，提供连通性和交换）</p></li><li><p>三网合一是指电信语音 .有线电视网和计算机网络的结合。</p></li><li><p>常用的交换方式有电路.报文和分组。在电路交换方式中要经过线路建立.数据传输.线路释放三个过程。而分组交换和报文交换不需要，因为每个分组都需要被独立进行确定“路由”处理，所以可能存在“后发先至”的现象。计算机网络通常采用分组交换方式。</p></li><li><p>网络通信常用的3种交换方式是电路交换（整个报文的比特流连续地从源点直达终点，好像在一个管道中传送）.报文交换（整个报文先送到相邻节点，全部存储下来后查找转发表，转发到下一节点）和分组交换（单个分组（这只是整个报文的一部分）传送到相邻节点，存储下来后查找转发表，转发到下一节点）。计算机网络采用的交换方式属于分组交换。</p></li><li><p>时延是计算机网络的性能指标之一，指的是数据从网络的一端传输到另一端所需的时间，通常包括发送时延（主机或路由器发送数据帧所需要的时间，也称为传输时延。发送时延&#x3D;数据帧长度&#x2F;发送速率）.传播时延（电磁波在信道中传播一定的距离所需要的时间，在自由空间的传播速率约为3.0<em>105km&#x2F;s，在铜线电缆中的传播速率约为2.3</em>105km&#x2F;s, 在光纤中的传播速率约为2.0*105km&#x2F;s。传播时延&#x3D;信道长度&#x2F;电磁波在信道上传输速率）.处理时延（主机或路由器在收到分组是需要花费一定的时间进行处理）和排队时延（分组在进入路由器后在输入队列中等待处理）。</p></li><li><p>OSI的体系结构由7层组成，从上到下分别是：应用层.表示层.会话层.运输层.网络层.数据链路层.物理层。TCP&#x2F;IP协议由4层组成，从上向下分别为应用层.运输层.网际层（IP）和网络接口层。掌握OSI&#x2F;RM协议的各层次名称.顺序及与TCP&#x2F;IP协议的对应关系。教材图1-18</p></li><li><p>按距离进行分类，可将网络分为广域网.城域网和局域网，掌握其距离范围</p></li></ol><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><ol><li>假定有一个10MB的数据块，在带宽为1Mb&#x2F;s的信道上连续发送，其发送时延是_____s。</li><li>因特网从其工作方式上看，可以划分为2大块：用来进行通信和资源共享属于边缘部分。提供连通性和交换的属于(   )。</li><li>网络通信有3种交换方式。其中【单个分组（这只是整个报文的一部分）传送到相邻节点，存储下来后查找转发表，转发到下一节点】属于(   )（请说明名称，不能说第一种、第二种或第三种）。</li><li>时延是计算机网络的性能指标之一，指的是数据从网络的一端传输到另一端所需的时间。其中的传播时延是指电磁波在信道中传播一定的距离所需要的时间，通常在铜线电缆中其传播速率约为(   )km&#x2F;s。</li><li>所有因特网标准都是以(   )形式在因特网上发表。其意思是“请求评论”。</li><li>网络协议由三部分组成：语法、语义和同步，其中需要发出何种控制信息，完成何种动作以及做出何种响应属于(   )。</li><li>OSI的体系结构由7层组成，从下向上，第六层是(   )。</li><li>TCP&#x2F;IP协议由4层组成，从上向下，UDP是属于(   )。</li><li>电磁波在光纤中传播的速率大约为2.0*105km&#x2F;s,长度为1000km的光纤传播时延是（    ）s。</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><ol><li>83.89</li><li>核心部分</li><li>分组交换</li><li>2.3*105km&#x2F;s</li><li>RFC</li><li>语义</li><li>表示层</li><li>运输层</li><li>0.005</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>first-test-blog</title>
    <link href="/2024/03/25/first-test-blog/"/>
    <url>/2024/03/25/first-test-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="这是一个测试博客"><a href="#这是一个测试博客" class="headerlink" title="这是一个测试博客"></a>这是一个测试博客</h1><h1 id="浅浅许个愿：保研上岸"><a href="#浅浅许个愿：保研上岸" class="headerlink" title="浅浅许个愿：保研上岸"></a>浅浅许个愿：保研上岸</h1>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
      <category>保研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>保研</tag>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
